{"/home/travis/build/npmtest/node-npmtest-chai/test.js":{"path":"/home/travis/build/npmtest/node-npmtest-chai/test.js","s":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":2,"8":1,"9":2,"10":2,"11":1,"12":1,"13":1,"14":1,"15":2,"16":2,"17":2,"18":2,"19":1,"20":1,"21":2,"22":2,"23":2,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":2,"37":2,"38":1,"39":2,"40":2,"41":1,"42":2,"43":2,"44":1,"45":1,"46":1,"47":1,"48":1},"b":{"1":[2,1,1,1],"2":[1,1,1,1],"3":[1,1],"4":[1,1],"5":[1,1],"6":[1,1],"7":[1,1],"8":[1,1],"9":[1,1,1],"10":[1,1],"11":[1,1],"12":[1,1],"13":[1,1],"14":[1,1],"15":[1,1]},"f":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":1,"7":1,"8":2,"9":2,"10":2,"11":1},"fnMap":{"1":{"name":"(anonymous_1)","line":12,"loc":{"start":{"line":12,"column":1},"end":{"line":12,"column":13}}},"2":{"name":"(anonymous_2)","line":19,"loc":{"start":{"line":19,"column":5},"end":{"line":19,"column":17}}},"3":{"name":"(anonymous_3)","line":23,"loc":{"start":{"line":23,"column":24},"end":{"line":23,"column":36}}},"4":{"name":"(anonymous_4)","line":61,"loc":{"start":{"line":61,"column":5},"end":{"line":61,"column":17}}},"5":{"name":"(anonymous_5)","line":82,"loc":{"start":{"line":82,"column":5},"end":{"line":82,"column":17}}},"6":{"name":"(anonymous_6)","line":102,"loc":{"start":{"line":102,"column":83},"end":{"line":105,"column":10}},"skip":true},"7":{"name":"(anonymous_7)","line":113,"loc":{"start":{"line":113,"column":77},"end":{"line":116,"column":10}},"skip":true},"8":{"name":"(anonymous_8)","line":127,"loc":{"start":{"line":127,"column":77},"end":{"line":130,"column":10}},"skip":true},"9":{"name":"(anonymous_9)","line":138,"loc":{"start":{"line":138,"column":83},"end":{"line":141,"column":10}},"skip":true},"10":{"name":"(anonymous_10)","line":149,"loc":{"start":{"line":149,"column":79},"end":{"line":152,"column":10}},"skip":true},"11":{"name":"(anonymous_11)","line":160,"loc":{"start":{"line":160,"column":75},"end":{"line":163,"column":10}},"skip":true}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":175,"column":5}},"2":{"start":{"line":14,"column":4},"end":{"line":14,"column":14}},"3":{"start":{"line":19,"column":4},"end":{"line":56,"column":9}},"4":{"start":{"line":21,"column":8},"end":{"line":21,"column":19}},"5":{"start":{"line":23,"column":8},"end":{"line":35,"column":13}},"6":{"start":{"line":24,"column":12},"end":{"line":34,"column":13}},"7":{"start":{"line":25,"column":16},"end":{"line":28,"column":30}},"8":{"start":{"line":30,"column":16},"end":{"line":33,"column":27}},"9":{"start":{"line":37,"column":8},"end":{"line":39,"column":21}},"10":{"start":{"line":40,"column":8},"end":{"line":53,"column":9}},"11":{"start":{"line":43,"column":12},"end":{"line":46,"column":14}},"12":{"start":{"line":47,"column":12},"end":{"line":47,"column":18}},"13":{"start":{"line":50,"column":12},"end":{"line":51,"column":46}},"14":{"start":{"line":52,"column":12},"end":{"line":52,"column":18}},"15":{"start":{"line":55,"column":8},"end":{"line":55,"column":35}},"16":{"start":{"line":61,"column":4},"end":{"line":63,"column":9}},"17":{"start":{"line":62,"column":8},"end":{"line":62,"column":15}},"18":{"start":{"line":64,"column":4},"end":{"line":77,"column":5}},"19":{"start":{"line":70,"column":8},"end":{"line":70,"column":14}},"20":{"start":{"line":76,"column":8},"end":{"line":76,"column":14}},"21":{"start":{"line":82,"column":4},"end":{"line":84,"column":9}},"22":{"start":{"line":83,"column":8},"end":{"line":83,"column":15}},"23":{"start":{"line":85,"column":4},"end":{"line":174,"column":5}},"24":{"start":{"line":92,"column":8},"end":{"line":94,"column":63}},"25":{"start":{"line":95,"column":8},"end":{"line":95,"column":14}},"26":{"start":{"line":102,"column":8},"end":{"line":111,"column":10},"skip":true},"27":{"start":{"line":109,"column":12},"end":{"line":109,"column":55},"skip":true},"28":{"start":{"line":110,"column":12},"end":{"line":110,"column":48},"skip":true},"29":{"start":{"line":113,"column":8},"end":{"line":125,"column":10},"skip":true},"30":{"start":{"line":120,"column":12},"end":{"line":120,"column":76},"skip":true},"31":{"start":{"line":121,"column":12},"end":{"line":121,"column":73},"skip":true},"32":{"start":{"line":122,"column":12},"end":{"line":122,"column":74},"skip":true},"33":{"start":{"line":123,"column":12},"end":{"line":123,"column":25},"skip":true},"34":{"start":{"line":124,"column":12},"end":{"line":124,"column":45},"skip":true},"35":{"start":{"line":127,"column":8},"end":{"line":136,"column":10},"skip":true},"36":{"start":{"line":134,"column":12},"end":{"line":134,"column":25},"skip":true},"37":{"start":{"line":135,"column":12},"end":{"line":135,"column":45},"skip":true},"38":{"start":{"line":138,"column":8},"end":{"line":147,"column":10},"skip":true},"39":{"start":{"line":145,"column":12},"end":{"line":145,"column":25},"skip":true},"40":{"start":{"line":146,"column":12},"end":{"line":146,"column":48},"skip":true},"41":{"start":{"line":149,"column":8},"end":{"line":158,"column":10},"skip":true},"42":{"start":{"line":156,"column":12},"end":{"line":156,"column":25},"skip":true},"43":{"start":{"line":157,"column":12},"end":{"line":157,"column":46},"skip":true},"44":{"start":{"line":160,"column":8},"end":{"line":169,"column":10},"skip":true},"45":{"start":{"line":167,"column":12},"end":{"line":167,"column":94},"skip":true},"46":{"start":{"line":168,"column":12},"end":{"line":168,"column":48},"skip":true},"47":{"start":{"line":172,"column":8},"end":{"line":172,"column":35},"skip":true},"48":{"start":{"line":173,"column":8},"end":{"line":173,"column":14},"skip":true}},"branchMap":{"1":{"line":25,"type":"binary-expr","locations":[{"start":{"line":25,"column":23},"end":{"line":25,"column":62}},{"start":{"line":26,"column":20},"end":{"line":26,"column":70}},{"start":{"line":27,"column":20},"end":{"line":27,"column":71}},{"start":{"line":28,"column":20},"end":{"line":28,"column":29}}]},"2":{"line":30,"type":"binary-expr","locations":[{"start":{"line":30,"column":23},"end":{"line":30,"column":37}},{"start":{"line":31,"column":20},"end":{"line":31,"column":61}},{"start":{"line":32,"column":20},"end":{"line":32,"column":70}},{"start":{"line":33,"column":20},"end":{"line":33,"column":26}}]},"3":{"line":37,"type":"cond-expr","locations":[{"start":{"line":38,"column":14},"end":{"line":38,"column":20}},{"start":{"line":39,"column":14},"end":{"line":39,"column":20}}]},"4":{"line":40,"type":"switch","locations":[{"start":{"line":42,"column":8},"end":{"line":47,"column":18}},{"start":{"line":49,"column":8},"end":{"line":52,"column":18}}]},"5":{"line":44,"type":"binary-expr","locations":[{"start":{"line":44,"column":16},"end":{"line":44,"column":44}},{"start":{"line":44,"column":48},"end":{"line":44,"column":66}}]},"6":{"line":50,"type":"binary-expr","locations":[{"start":{"line":50,"column":21},"end":{"line":50,"column":49}},{"start":{"line":50,"column":53},"end":{"line":50,"column":72}}]},"7":{"line":64,"type":"switch","locations":[{"start":{"line":69,"column":4},"end":{"line":70,"column":14}},{"start":{"line":75,"column":4},"end":{"line":76,"column":14}}]},"8":{"line":85,"type":"switch","locations":[{"start":{"line":90,"column":4},"end":{"line":95,"column":14}},{"start":{"line":101,"column":4},"end":{"line":173,"column":14},"skip":true}]},"9":{"line":92,"type":"binary-expr","locations":[{"start":{"line":92,"column":18},"end":{"line":92,"column":32}},{"start":{"line":93,"column":12},"end":{"line":93,"column":53}},{"start":{"line":94,"column":12},"end":{"line":94,"column":61}}]},"10":{"line":102,"type":"binary-expr","locations":[{"start":{"line":102,"column":45},"end":{"line":102,"column":79},"skip":true},{"start":{"line":102,"column":83},"end":{"line":111,"column":9},"skip":true}]},"11":{"line":113,"type":"binary-expr","locations":[{"start":{"line":113,"column":42},"end":{"line":113,"column":73},"skip":true},{"start":{"line":113,"column":77},"end":{"line":125,"column":9},"skip":true}]},"12":{"line":127,"type":"binary-expr","locations":[{"start":{"line":127,"column":42},"end":{"line":127,"column":73},"skip":true},{"start":{"line":127,"column":77},"end":{"line":136,"column":9},"skip":true}]},"13":{"line":138,"type":"binary-expr","locations":[{"start":{"line":138,"column":45},"end":{"line":138,"column":79},"skip":true},{"start":{"line":138,"column":83},"end":{"line":147,"column":9},"skip":true}]},"14":{"line":149,"type":"binary-expr","locations":[{"start":{"line":149,"column":43},"end":{"line":149,"column":75},"skip":true},{"start":{"line":149,"column":79},"end":{"line":158,"column":9},"skip":true}]},"15":{"line":160,"type":"binary-expr","locations":[{"start":{"line":160,"column":41},"end":{"line":160,"column":71},"skip":true},{"start":{"line":160,"column":75},"end":{"line":169,"column":9},"skip":true}]}},"code":["/* istanbul instrument in package npmtest_chai */","/*jslint","    bitwise: true,","    browser: true,","    maxerr: 8,","    maxlen: 96,","    node: true,","    nomen: true,","    regexp: true,","    stupid: true","*/","(function () {","    'use strict';","    var local;","","","","    // run shared js-env code - pre-init","    (function () {","        // init local","        local = {};","        // init modeJs","        local.modeJs = (function () {","            try {","                return typeof navigator.userAgent === 'string' &&","                    typeof document.querySelector('body') === 'object' &&","                    typeof XMLHttpRequest.prototype.open === 'function' &&","                    'browser';","            } catch (errorCaughtBrowser) {","                return module.exports &&","                    typeof process.versions.node === 'string' &&","                    typeof require('http').createServer === 'function' &&","                    'node';","            }","        }());","        // init global","        local.global = local.modeJs === 'browser'","            ? window","            : global;","        switch (local.modeJs) {","        // re-init local from window.local","        case 'browser':","            local = local.global.utility2.objectSetDefault(","                local.global.utility2_rollup || local.global.local,","                local.global.utility2","            );","            break;","        // re-init local from example.js","        case 'node':","            local = (local.global.utility2_rollup || require('utility2'))","                .requireExampleJsFromReadme();","            break;","        }","        // export local","        local.global.local = local;","    }());","","","","    // run shared js-env code - function","    (function () {","        return;","    }());","    switch (local.modeJs) {","","","","    // run browser js-env code - function","    case 'browser':","        break;","","","","    // run node js-env code - function","    case 'node':","        break;","    }","","","","    // run shared js-env code - post-init","    (function () {","        return;","    }());","    switch (local.modeJs) {","","","","    // run browser js-env code - post-init","    case 'browser':","        // run tests","        local.nop(local.modeTest &&","            document.querySelector('#testRunButton1') &&","            document.querySelector('#testRunButton1').click());","        break;","","","","    // run node js-env code - post-init","    /* istanbul ignore next */","    case 'node':","        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildApidoc's default handling-behavior-behavior","         */","            options = { modulePathList: module.paths };","            local.buildApidoc(options, onError);","        };","","        local.testCase_buildApp_default = local.testCase_buildApp_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildApp's default handling-behavior-behavior","         */","            local.testCase_buildReadme_default(options, local.onErrorThrow);","            local.testCase_buildLib_default(options, local.onErrorThrow);","            local.testCase_buildTest_default(options, local.onErrorThrow);","            options = [];","            local.buildApp(options, onError);","        };","","        local.testCase_buildLib_default = local.testCase_buildLib_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildLib's default handling-behavior","         */","            options = {};","            local.buildLib(options, onError);","        };","","        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildReadme's default handling-behavior-behavior","         */","            options = {};","            local.buildReadme(options, onError);","        };","","        local.testCase_buildTest_default = local.testCase_buildTest_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildTest's default handling-behavior","         */","            options = {};","            local.buildTest(options, onError);","        };","","        local.testCase_webpage_default = local.testCase_webpage_default || function (","            options,","            onError","        ) {","        /*","         * this function will test webpage's default handling-behavior","         */","            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };","            local.browserTest(options, onError);","        };","","        // run test-server","        local.testRunServer(local);","        break;","    }","}());",""],"l":{"12":2,"14":2,"19":2,"21":2,"23":2,"24":2,"25":2,"30":1,"37":2,"40":2,"43":1,"47":1,"50":1,"52":1,"55":2,"61":2,"62":2,"64":2,"70":1,"76":1,"82":2,"83":2,"85":2,"92":1,"95":1,"102":1,"109":1,"110":1,"113":1,"120":1,"121":1,"122":1,"123":1,"124":1,"127":1,"134":2,"135":2,"138":1,"145":2,"146":2,"149":1,"156":2,"157":2,"160":1,"167":1,"168":1,"172":1,"173":1}},"/home/travis/build/npmtest/node-npmtest-chai/lib.npmtest_chai.js":{"path":"/home/travis/build/npmtest/node-npmtest-chai/lib.npmtest_chai.js","s":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":2,"8":1,"9":2,"10":2,"11":2,"12":2,"13":1,"14":1,"15":1,"16":1},"b":{"1":[2,1,1,1],"2":[1,1,1,1],"3":[1,1],"4":[2,2],"5":[1,1]},"f":{"1":2,"2":2,"3":2},"fnMap":{"1":{"name":"(anonymous_1)","line":12,"loc":{"start":{"line":12,"column":1},"end":{"line":12,"column":13}}},"2":{"name":"(anonymous_2)","line":19,"loc":{"start":{"line":19,"column":5},"end":{"line":19,"column":17}}},"3":{"name":"(anonymous_3)","line":23,"loc":{"start":{"line":23,"column":24},"end":{"line":23,"column":36}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":53,"column":5}},"2":{"start":{"line":14,"column":4},"end":{"line":14,"column":14}},"3":{"start":{"line":19,"column":4},"end":{"line":52,"column":9}},"4":{"start":{"line":21,"column":8},"end":{"line":21,"column":19}},"5":{"start":{"line":23,"column":8},"end":{"line":35,"column":13}},"6":{"start":{"line":24,"column":12},"end":{"line":34,"column":13}},"7":{"start":{"line":25,"column":16},"end":{"line":28,"column":30}},"8":{"start":{"line":30,"column":16},"end":{"line":33,"column":27}},"9":{"start":{"line":37,"column":8},"end":{"line":39,"column":21}},"10":{"start":{"line":41,"column":8},"end":{"line":41,"column":54}},"11":{"start":{"line":43,"column":8},"end":{"line":43,"column":49}},"12":{"start":{"line":45,"column":8},"end":{"line":51,"column":9}},"13":{"start":{"line":46,"column":12},"end":{"line":46,"column":55}},"14":{"start":{"line":48,"column":12},"end":{"line":48,"column":35}},"15":{"start":{"line":49,"column":12},"end":{"line":49,"column":49}},"16":{"start":{"line":50,"column":12},"end":{"line":50,"column":43}}},"branchMap":{"1":{"line":25,"type":"binary-expr","locations":[{"start":{"line":25,"column":23},"end":{"line":25,"column":62}},{"start":{"line":26,"column":20},"end":{"line":26,"column":70}},{"start":{"line":27,"column":20},"end":{"line":27,"column":71}},{"start":{"line":28,"column":20},"end":{"line":28,"column":29}}]},"2":{"line":30,"type":"binary-expr","locations":[{"start":{"line":30,"column":23},"end":{"line":30,"column":37}},{"start":{"line":31,"column":20},"end":{"line":31,"column":61}},{"start":{"line":32,"column":20},"end":{"line":32,"column":70}},{"start":{"line":33,"column":20},"end":{"line":33,"column":26}}]},"3":{"line":37,"type":"cond-expr","locations":[{"start":{"line":38,"column":14},"end":{"line":38,"column":20}},{"start":{"line":39,"column":14},"end":{"line":39,"column":20}}]},"4":{"line":41,"type":"binary-expr","locations":[{"start":{"line":41,"column":16},"end":{"line":41,"column":44}},{"start":{"line":41,"column":48},"end":{"line":41,"column":53}}]},"5":{"line":45,"type":"if","locations":[{"start":{"line":45,"column":8},"end":{"line":45,"column":8}},{"start":{"line":45,"column":8},"end":{"line":45,"column":8}}]}},"code":["/* istanbul instrument in package npmtest_chai */","/*jslint","    bitwise: true,","    browser: true,","    maxerr: 8,","    maxlen: 96,","    node: true,","    nomen: true,","    regexp: true,","    stupid: true","*/","(function () {","    'use strict';","    var local;","","","","    // run shared js-env code - pre-init","    (function () {","        // init local","        local = {};","        // init modeJs","        local.modeJs = (function () {","            try {","                return typeof navigator.userAgent === 'string' &&","                    typeof document.querySelector('body') === 'object' &&","                    typeof XMLHttpRequest.prototype.open === 'function' &&","                    'browser';","            } catch (errorCaughtBrowser) {","                return module.exports &&","                    typeof process.versions.node === 'string' &&","                    typeof require('http').createServer === 'function' &&","                    'node';","            }","        }());","        // init global","        local.global = local.modeJs === 'browser'","            ? window","            : global;","        // init utility2_rollup","        local = local.global.utility2_rollup || local;","        // init lib","        local.local = local.npmtest_chai = local;","        // init exports","        if (local.modeJs === 'browser') {","            local.global.utility2_npmtest_chai = local;","        } else {","            module.exports = local;","            module.exports.__dirname = __dirname;","            module.exports.module = module;","        }","    }());","}());",""],"l":{"12":2,"14":2,"19":2,"21":2,"23":2,"24":2,"25":2,"30":1,"37":2,"41":2,"43":2,"45":2,"46":1,"48":1,"49":1,"50":1}},"/home/travis/build/npmtest/node-npmtest-chai/example.js":{"path":"/home/travis/build/npmtest/node-npmtest-chai/example.js","s":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":2,"8":1,"9":2,"10":2,"11":2,"12":2,"13":1,"14":2,"15":2,"16":2,"17":2,"18":2,"19":0,"20":2,"21":1,"22":1,"23":1,"24":1,"25":1,"26":0,"27":0,"28":1,"29":1,"30":2,"31":0,"32":0,"33":0,"34":1,"35":2,"36":2,"37":2,"38":2,"39":2,"40":2,"41":0,"42":2,"43":2,"44":2,"45":1,"46":3,"47":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"54":1,"55":1,"56":1,"57":0,"58":1,"59":6,"60":6,"61":1,"62":2,"63":0,"64":2,"65":1,"66":1,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0},"b":{"1":[2,1,1,1],"2":[1,1,1,1],"3":[1,1],"4":[2,2],"5":[1,1],"6":[1,1],"7":[2,0],"8":[2,1,1,1,1,1],"9":[0,2,0],"10":[1,1],"11":[2,1,1],"12":[1,0],"13":[0,2],"14":[2,0,0,0,0,0,0],"15":[0,2],"16":[2,0],"17":[1,1],"18":[0,1],"19":[1,2,0,2],"20":[1,0],"21":[1,1],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0]},"f":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":2,"8":2,"9":3,"10":1,"11":6,"12":0},"fnMap":{"1":{"name":"(anonymous_1)","line":26,"loc":{"start":{"line":26,"column":1},"end":{"line":26,"column":13}}},"2":{"name":"(anonymous_2)","line":33,"loc":{"start":{"line":33,"column":5},"end":{"line":33,"column":17}}},"3":{"name":"(anonymous_3)","line":37,"loc":{"start":{"line":37,"column":24},"end":{"line":37,"column":36}}},"4":{"name":"(anonymous_4)","line":69,"loc":{"start":{"line":69,"column":31},"end":{"line":69,"column":48}},"skip":true},"5":{"name":"(anonymous_5)","line":78,"loc":{"start":{"line":78,"column":26},"end":{"line":78,"column":45}},"skip":true},"6":{"name":"(anonymous_6)","line":123,"loc":{"start":{"line":123,"column":33},"end":{"line":123,"column":48}},"skip":true},"7":{"name":"(anonymous_7)","line":125,"loc":{"start":{"line":125,"column":27},"end":{"line":125,"column":39}},"skip":true},"8":{"name":"(anonymous_8)","line":133,"loc":{"start":{"line":133,"column":59},"end":{"line":133,"column":74}},"skip":true},"9":{"name":"(anonymous_9)","line":143,"loc":{"start":{"line":143,"column":45},"end":{"line":143,"column":62}},"skip":true},"10":{"name":"(anonymous_10)","line":144,"loc":{"start":{"line":144,"column":73},"end":{"line":144,"column":92}},"skip":true},"11":{"name":"(anonymous_11)","line":272,"loc":{"start":{"line":272,"column":51},"end":{"line":272,"column":77}},"skip":true},"12":{"name":"(anonymous_12)","line":314,"loc":{"start":{"line":314,"column":32},"end":{"line":314,"column":61}},"skip":true}},"statementMap":{"1":{"start":{"line":26,"column":0},"end":{"line":325,"column":5}},"2":{"start":{"line":28,"column":4},"end":{"line":28,"column":14}},"3":{"start":{"line":33,"column":4},"end":{"line":60,"column":9}},"4":{"start":{"line":35,"column":8},"end":{"line":35,"column":19}},"5":{"start":{"line":37,"column":8},"end":{"line":49,"column":13}},"6":{"start":{"line":38,"column":12},"end":{"line":48,"column":13}},"7":{"start":{"line":39,"column":16},"end":{"line":42,"column":30}},"8":{"start":{"line":44,"column":16},"end":{"line":47,"column":27}},"9":{"start":{"line":51,"column":8},"end":{"line":53,"column":21}},"10":{"start":{"line":55,"column":8},"end":{"line":57,"column":45}},"11":{"start":{"line":59,"column":8},"end":{"line":59,"column":35}},"12":{"start":{"line":61,"column":4},"end":{"line":324,"column":5}},"13":{"start":{"line":69,"column":8},"end":{"line":121,"column":10},"skip":true},"14":{"start":{"line":70,"column":12},"end":{"line":88,"column":13},"skip":true},"15":{"start":{"line":76,"column":16},"end":{"line":87,"column":19},"skip":true},"16":{"start":{"line":79,"column":20},"end":{"line":86,"column":21},"skip":true},"17":{"start":{"line":82,"column":24},"end":{"line":82,"column":43},"skip":true},"18":{"start":{"line":83,"column":24},"end":{"line":83,"column":30},"skip":true},"19":{"start":{"line":85,"column":24},"end":{"line":85,"column":49},"skip":true},"20":{"start":{"line":89,"column":12},"end":{"line":107,"column":13},"skip":true},"21":{"start":{"line":92,"column":16},"end":{"line":102,"column":17},"skip":true},"22":{"start":{"line":93,"column":20},"end":{"line":93,"column":86},"skip":true},"23":{"start":{"line":94,"column":20},"end":{"line":95,"column":45},"skip":true},"24":{"start":{"line":96,"column":20},"end":{"line":96,"column":42},"skip":true},"25":{"start":{"line":97,"column":20},"end":{"line":97,"column":48},"skip":true},"26":{"start":{"line":100,"column":20},"end":{"line":100,"column":85},"skip":true},"27":{"start":{"line":101,"column":20},"end":{"line":101,"column":96},"skip":true},"28":{"start":{"line":103,"column":16},"end":{"line":103,"column":22},"skip":true},"29":{"start":{"line":106,"column":16},"end":{"line":106,"column":22},"skip":true},"30":{"start":{"line":108,"column":12},"end":{"line":120,"column":13},"skip":true},"31":{"start":{"line":114,"column":16},"end":{"line":119,"column":17},"skip":true},"32":{"start":{"line":116,"column":20},"end":{"line":116,"column":78},"skip":true},"33":{"start":{"line":118,"column":20},"end":{"line":118,"column":53},"skip":true},"34":{"start":{"line":123,"column":8},"end":{"line":141,"column":11},"skip":true},"35":{"start":{"line":124,"column":12},"end":{"line":124,"column":54},"skip":true},"36":{"start":{"line":125,"column":12},"end":{"line":140,"column":14},"skip":true},"37":{"start":{"line":126,"column":16},"end":{"line":126,"column":28},"skip":true},"38":{"start":{"line":127,"column":16},"end":{"line":127,"column":69},"skip":true},"39":{"start":{"line":128,"column":16},"end":{"line":128,"column":75},"skip":true},"40":{"start":{"line":129,"column":16},"end":{"line":131,"column":17},"skip":true},"41":{"start":{"line":130,"column":20},"end":{"line":130,"column":27},"skip":true},"42":{"start":{"line":133,"column":16},"end":{"line":137,"column":36},"skip":true},"43":{"start":{"line":134,"column":20},"end":{"line":136,"column":55},"skip":true},"44":{"start":{"line":139,"column":16},"end":{"line":139,"column":57},"skip":true},"45":{"start":{"line":143,"column":8},"end":{"line":147,"column":11},"skip":true},"46":{"start":{"line":144,"column":12},"end":{"line":146,"column":15},"skip":true},"47":{"start":{"line":145,"column":16},"end":{"line":145,"column":70},"skip":true},"48":{"start":{"line":149,"column":8},"end":{"line":149,"column":31},"skip":true},"49":{"start":{"line":150,"column":8},"end":{"line":150,"column":14},"skip":true},"50":{"start":{"line":158,"column":8},"end":{"line":158,"column":31},"skip":true},"51":{"start":{"line":160,"column":8},"end":{"line":160,"column":33},"skip":true},"52":{"start":{"line":161,"column":8},"end":{"line":161,"column":37},"skip":true},"53":{"start":{"line":162,"column":8},"end":{"line":162,"column":35},"skip":true},"54":{"start":{"line":164,"column":8},"end":{"line":164,"column":50},"skip":true},"55":{"start":{"line":166,"column":8},"end":{"line":256,"column":2},"skip":true},"56":{"start":{"line":258,"column":8},"end":{"line":286,"column":9},"skip":true},"57":{"start":{"line":259,"column":12},"end":{"line":269,"column":14},"skip":true},"58":{"start":{"line":271,"column":12},"end":{"line":285,"column":19},"skip":true},"59":{"start":{"line":274,"column":20},"end":{"line":274,"column":35},"skip":true},"60":{"start":{"line":275,"column":20},"end":{"line":284,"column":21},"skip":true},"61":{"start":{"line":277,"column":24},"end":{"line":277,"column":64},"skip":true},"62":{"start":{"line":279,"column":24},"end":{"line":279,"column":40},"skip":true},"63":{"start":{"line":281,"column":24},"end":{"line":281,"column":40},"skip":true},"64":{"start":{"line":283,"column":24},"end":{"line":283,"column":39},"skip":true},"65":{"start":{"line":288,"column":8},"end":{"line":290,"column":9},"skip":true},"66":{"start":{"line":289,"column":12},"end":{"line":289,"column":18},"skip":true},"67":{"start":{"line":291,"column":8},"end":{"line":293,"column":54},"skip":true},"68":{"start":{"line":294,"column":8},"end":{"line":301,"column":37},"skip":true},"69":{"start":{"line":302,"column":8},"end":{"line":302,"column":82},"skip":true},"70":{"start":{"line":305,"column":8},"end":{"line":307,"column":9},"skip":true},"71":{"start":{"line":306,"column":12},"end":{"line":306,"column":82},"skip":true},"72":{"start":{"line":309,"column":8},"end":{"line":311,"column":9},"skip":true},"73":{"start":{"line":310,"column":12},"end":{"line":310,"column":18},"skip":true},"74":{"start":{"line":312,"column":8},"end":{"line":312,"column":54},"skip":true},"75":{"start":{"line":313,"column":8},"end":{"line":313,"column":69},"skip":true},"76":{"start":{"line":314,"column":8},"end":{"line":322,"column":36},"skip":true},"77":{"start":{"line":315,"column":12},"end":{"line":315,"column":61},"skip":true},"78":{"start":{"line":316,"column":12},"end":{"line":319,"column":13},"skip":true},"79":{"start":{"line":317,"column":16},"end":{"line":317,"column":75},"skip":true},"80":{"start":{"line":318,"column":16},"end":{"line":318,"column":23},"skip":true},"81":{"start":{"line":320,"column":12},"end":{"line":320,"column":38},"skip":true},"82":{"start":{"line":321,"column":12},"end":{"line":321,"column":27},"skip":true},"83":{"start":{"line":323,"column":8},"end":{"line":323,"column":14},"skip":true}},"branchMap":{"1":{"line":39,"type":"binary-expr","locations":[{"start":{"line":39,"column":23},"end":{"line":39,"column":62}},{"start":{"line":40,"column":20},"end":{"line":40,"column":70}},{"start":{"line":41,"column":20},"end":{"line":41,"column":71}},{"start":{"line":42,"column":20},"end":{"line":42,"column":29}}]},"2":{"line":44,"type":"binary-expr","locations":[{"start":{"line":44,"column":23},"end":{"line":44,"column":37}},{"start":{"line":45,"column":20},"end":{"line":45,"column":61}},{"start":{"line":46,"column":20},"end":{"line":46,"column":70}},{"start":{"line":47,"column":20},"end":{"line":47,"column":26}}]},"3":{"line":51,"type":"cond-expr","locations":[{"start":{"line":52,"column":14},"end":{"line":52,"column":20}},{"start":{"line":53,"column":14},"end":{"line":53,"column":20}}]},"4":{"line":55,"type":"binary-expr","locations":[{"start":{"line":55,"column":16},"end":{"line":55,"column":44}},{"start":{"line":55,"column":49},"end":{"line":57,"column":43}}]},"5":{"line":55,"type":"cond-expr","locations":[{"start":{"line":56,"column":14},"end":{"line":56,"column":48}},{"start":{"line":57,"column":14},"end":{"line":57,"column":43}}]},"6":{"line":61,"type":"switch","locations":[{"start":{"line":68,"column":4},"end":{"line":150,"column":14},"skip":true},{"start":{"line":156,"column":4},"end":{"line":323,"column":14},"skip":true}]},"7":{"line":70,"type":"if","locations":[{"start":{"line":70,"column":12},"end":{"line":70,"column":12},"skip":true},{"start":{"line":70,"column":12},"end":{"line":70,"column":12},"skip":true}]},"8":{"line":70,"type":"binary-expr","locations":[{"start":{"line":70,"column":16},"end":{"line":70,"column":22},"skip":true},{"start":{"line":70,"column":27},"end":{"line":70,"column":32},"skip":true},{"start":{"line":71,"column":20},"end":{"line":71,"column":39},"skip":true},{"start":{"line":72,"column":20},"end":{"line":72,"column":49},"skip":true},{"start":{"line":73,"column":20},"end":{"line":73,"column":58},"skip":true},{"start":{"line":74,"column":20},"end":{"line":74,"column":69},"skip":true}]},"9":{"line":79,"type":"switch","locations":[{"start":{"line":80,"column":20},"end":{"line":80,"column":33},"skip":true},{"start":{"line":81,"column":20},"end":{"line":83,"column":30},"skip":true},{"start":{"line":84,"column":20},"end":{"line":85,"column":49},"skip":true}]},"10":{"line":89,"type":"switch","locations":[{"start":{"line":90,"column":12},"end":{"line":103,"column":22},"skip":true},{"start":{"line":105,"column":12},"end":{"line":106,"column":22},"skip":true}]},"11":{"line":89,"type":"binary-expr","locations":[{"start":{"line":89,"column":20},"end":{"line":89,"column":25},"skip":true},{"start":{"line":89,"column":29},"end":{"line":89,"column":48},"skip":true},{"start":{"line":89,"column":52},"end":{"line":89,"column":74},"skip":true}]},"12":{"line":92,"type":"if","locations":[{"start":{"line":92,"column":16},"end":{"line":92,"column":16},"skip":true},{"start":{"line":92,"column":16},"end":{"line":92,"column":16},"skip":true}]},"13":{"line":108,"type":"if","locations":[{"start":{"line":108,"column":12},"end":{"line":108,"column":12},"skip":true},{"start":{"line":108,"column":12},"end":{"line":108,"column":12},"skip":true}]},"14":{"line":108,"type":"binary-expr","locations":[{"start":{"line":108,"column":16},"end":{"line":108,"column":61},"skip":true},{"start":{"line":108,"column":66},"end":{"line":108,"column":72},"skip":true},{"start":{"line":108,"column":77},"end":{"line":108,"column":82},"skip":true},{"start":{"line":109,"column":20},"end":{"line":109,"column":39},"skip":true},{"start":{"line":110,"column":20},"end":{"line":110,"column":49},"skip":true},{"start":{"line":111,"column":20},"end":{"line":111,"column":58},"skip":true},{"start":{"line":112,"column":20},"end":{"line":112,"column":68},"skip":true}]},"15":{"line":129,"type":"if","locations":[{"start":{"line":129,"column":16},"end":{"line":129,"column":16},"skip":true},{"start":{"line":129,"column":16},"end":{"line":129,"column":16},"skip":true}]},"16":{"line":134,"type":"cond-expr","locations":[{"start":{"line":135,"column":26},"end":{"line":135,"column":29},"skip":true},{"start":{"line":136,"column":26},"end":{"line":136,"column":54},"skip":true}]},"17":{"line":164,"type":"binary-expr","locations":[{"start":{"line":164,"column":27},"end":{"line":164,"column":43},"skip":true},{"start":{"line":164,"column":47},"end":{"line":164,"column":49},"skip":true}]},"18":{"line":258,"type":"if","locations":[{"start":{"line":258,"column":8},"end":{"line":258,"column":8},"skip":true},{"start":{"line":258,"column":8},"end":{"line":258,"column":8},"skip":true}]},"19":{"line":275,"type":"switch","locations":[{"start":{"line":276,"column":20},"end":{"line":277,"column":64},"skip":true},{"start":{"line":278,"column":20},"end":{"line":279,"column":40},"skip":true},{"start":{"line":280,"column":20},"end":{"line":281,"column":40},"skip":true},{"start":{"line":282,"column":20},"end":{"line":283,"column":39},"skip":true}]},"20":{"line":288,"type":"if","locations":[{"start":{"line":288,"column":8},"end":{"line":288,"column":8},"skip":true},{"start":{"line":288,"column":8},"end":{"line":288,"column":8},"skip":true}]},"21":{"line":288,"type":"binary-expr","locations":[{"start":{"line":288,"column":12},"end":{"line":288,"column":40},"skip":true},{"start":{"line":288,"column":44},"end":{"line":288,"column":67},"skip":true}]},"22":{"line":292,"type":"binary-expr","locations":[{"start":{"line":292,"column":12},"end":{"line":292,"column":50},"skip":true},{"start":{"line":293,"column":12},"end":{"line":293,"column":53},"skip":true}]},"23":{"line":295,"type":"binary-expr","locations":[{"start":{"line":295,"column":12},"end":{"line":295,"column":62},"skip":true},{"start":{"line":296,"column":12},"end":{"line":301,"column":36},"skip":true}]},"24":{"line":302,"type":"binary-expr","locations":[{"start":{"line":302,"column":43},"end":{"line":302,"column":75},"skip":true},{"start":{"line":302,"column":79},"end":{"line":302,"column":81},"skip":true}]},"25":{"line":305,"type":"if","locations":[{"start":{"line":305,"column":8},"end":{"line":305,"column":8},"skip":true},{"start":{"line":305,"column":8},"end":{"line":305,"column":8},"skip":true}]},"26":{"line":309,"type":"if","locations":[{"start":{"line":309,"column":8},"end":{"line":309,"column":8},"skip":true},{"start":{"line":309,"column":8},"end":{"line":309,"column":8},"skip":true}]},"27":{"line":312,"type":"binary-expr","locations":[{"start":{"line":312,"column":27},"end":{"line":312,"column":43},"skip":true},{"start":{"line":312,"column":47},"end":{"line":312,"column":53},"skip":true}]},"28":{"line":316,"type":"if","locations":[{"start":{"line":316,"column":12},"end":{"line":316,"column":12},"skip":true},{"start":{"line":316,"column":12},"end":{"line":316,"column":12},"skip":true}]}},"code":["/*","example.js","","quickstart example","","instruction","    1. save this script as example.js","    2. run the shell command:","        $ npm install npmtest-chai && PORT=8081 node example.js","    3. play with the browser-demo on http://127.0.0.1:8081","*/","","","","/* istanbul instrument in package npmtest_chai */","/*jslint","    bitwise: true,","    browser: true,","    maxerr: 8,","    maxlen: 96,","    node: true,","    nomen: true,","    regexp: true,","    stupid: true","*/","(function () {","    'use strict';","    var local;","","","","    // run shared js-env code - pre-init","    (function () {","        // init local","        local = {};","        // init modeJs","        local.modeJs = (function () {","            try {","                return typeof navigator.userAgent === 'string' &&","                    typeof document.querySelector('body') === 'object' &&","                    typeof XMLHttpRequest.prototype.open === 'function' &&","                    'browser';","            } catch (errorCaughtBrowser) {","                return module.exports &&","                    typeof process.versions.node === 'string' &&","                    typeof require('http').createServer === 'function' &&","                    'node';","            }","        }());","        // init global","        local.global = local.modeJs === 'browser'","            ? window","            : global;","        // init utility2_rollup","        local = local.global.utility2_rollup || (local.modeJs === 'browser'","            ? local.global.utility2_npmtest_chai","            : global.utility2_moduleExports);","        // export local","        local.global.local = local;","    }());","    switch (local.modeJs) {","","","","    // post-init","    // run browser js-env code - post-init","    /* istanbul ignore next */","    case 'browser':","        local.testRunBrowser = function (event) {","            if (!event || (event &&","                    event.currentTarget &&","                    event.currentTarget.className &&","                    event.currentTarget.className.includes &&","                    event.currentTarget.className.includes('onreset'))) {","                // reset output","                Array.from(","                    document.querySelectorAll('body > .resettable')","                ).forEach(function (element) {","                    switch (element.tagName) {","                    case 'INPUT':","                    case 'TEXTAREA':","                        element.value = '';","                        break;","                    default:","                        element.textContent = '';","                    }","                });","            }","            switch (event && event.currentTarget && event.currentTarget.id) {","            case 'testRunButton1':","                // show tests","                if (document.querySelector('#testReportDiv1').style.display === 'none') {","                    document.querySelector('#testReportDiv1').style.display = 'block';","                    document.querySelector('#testRunButton1').textContent =","                        'hide internal test';","                    local.modeTest = true;","                    local.testRunDefault(local);","                // hide tests","                } else {","                    document.querySelector('#testReportDiv1').style.display = 'none';","                    document.querySelector('#testRunButton1').textContent = 'run internal test';","                }","                break;","            // custom-case","            default:","                break;","            }","            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&","                    event.currentTarget &&","                    event.currentTarget.className &&","                    event.currentTarget.className.includes &&","                    event.currentTarget.className.includes('oneval')))) {","                // try to eval input-code","                try {","                    /*jslint evil: true*/","                    eval(document.querySelector('#inputTextareaEval1').value);","                } catch (errorCaught) {","                    console.error(errorCaught.stack);","                }","            }","        };","        // log stderr and stdout to #outputTextareaStdout1","        ['error', 'log'].forEach(function (key) {","            console[key + '_original'] = console[key];","            console[key] = function () {","                var element;","                console[key + '_original'].apply(console, arguments);","                element = document.querySelector('#outputTextareaStdout1');","                if (!element) {","                    return;","                }","                // append text to #outputTextareaStdout1","                element.value += Array.from(arguments).map(function (arg) {","                    return typeof arg === 'string'","                        ? arg","                        : JSON.stringify(arg, null, 4);","                }).join(' ') + '\\n';","                // scroll textarea to bottom","                element.scrollTop = element.scrollHeight;","            };","        });","        // init event-handling","        ['change', 'click', 'keyup'].forEach(function (event) {","            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {","                element.addEventListener(event, local.testRunBrowser);","            });","        });","        // run tests","        local.testRunBrowser();","        break;","","","","    // run node js-env code - post-init","    /* istanbul ignore next */","    case 'node':","        // export local","        module.exports = local;","        // require modules","        local.fs = require('fs');","        local.http = require('http');","        local.url = require('url');","        // init assets","        local.assetsDict = local.assetsDict || {};","        /* jslint-ignore-begin */","        local.assetsDict['/assets.index.template.html'] = '\\","<!doctype html>\\n\\","<html lang=\"en\">\\n\\","<head>\\n\\","<meta charset=\"UTF-8\">\\n\\","<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\","<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\","<style>\\n\\","/*csslint\\n\\","    box-sizing: false,\\n\\","    universal-selector: false\\n\\","*/\\n\\","* {\\n\\","    box-sizing: border-box;\\n\\","}\\n\\","body {\\n\\","    background: #dde;\\n\\","    font-family: Arial, Helvetica, sans-serif;\\n\\","    margin: 2rem;\\n\\","}\\n\\","body > * {\\n\\","    margin-bottom: 1rem;\\n\\","}\\n\\",".utility2FooterDiv {\\n\\","    margin-top: 20px;\\n\\","    text-align: center;\\n\\","}\\n\\","</style>\\n\\","<style>\\n\\","/*csslint\\n\\","*/\\n\\","textarea {\\n\\","    font-family: monospace;\\n\\","    height: 10rem;\\n\\","    width: 100%;\\n\\","}\\n\\","textarea[readonly] {\\n\\","    background: #ddd;\\n\\","}\\n\\","</style>\\n\\","</head>\\n\\","<body>\\n\\","<!-- utility2-comment\\n\\","<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\","utility2-comment -->\\n\\","<h1>\\n\\","<!-- utility2-comment\\n\\","    <a\\n\\","        {{#if env.npm_package_homepage}}\\n\\","        href=\"{{env.npm_package_homepage}}\"\\n\\","        {{/if env.npm_package_homepage}}\\n\\","        target=\"_blank\"\\n\\","    >\\n\\","utility2-comment -->\\n\\","        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\","<!-- utility2-comment\\n\\","    </a>\\n\\","utility2-comment -->\\n\\","</h1>\\n\\","<h3>{{env.npm_package_description}}</h3>\\n\\","<!-- utility2-comment\\n\\","<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\","<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\","<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\","utility2-comment -->\\n\\","\\n\\","\\n\\","\\n\\","<label>stderr and stdout</label>\\n\\","<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\","<!-- utility2-comment\\n\\","{{#if isRollup}}\\n\\","<script src=\"assets.app.js\"></script>\\n\\","{{#unless isRollup}}\\n\\","utility2-comment -->\\n\\","<script src=\"assets.utility2.rollup.js\"></script>\\n\\","<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\","<script src=\"assets.npmtest_chai.rollup.js\"></script>\\n\\","<script src=\"assets.example.js\"></script>\\n\\","<script src=\"assets.test.js\"></script>\\n\\","<!-- utility2-comment\\n\\","{{/if isRollup}}\\n\\","utility2-comment -->\\n\\","<div class=\"utility2FooterDiv\">\\n\\","    [ this app was created with\\n\\","    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\","    ]\\n\\","</div>\\n\\","</body>\\n\\","</html>\\n\\","';","        /* jslint-ignore-end */","        if (local.templateRender) {","            local.assetsDict['/'] = local.templateRender(","                local.assetsDict['/assets.index.template.html'],","                {","                    env: local.objectSetDefault(local.env, {","                        npm_package_description: 'the greatest app in the world!',","                        npm_package_name: 'my-app',","                        npm_package_nameAlias: 'my_app',","                        npm_package_version: '0.0.1'","                    })","                }","            );","        } else {","            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']","                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {","                    // jslint-hack","                    String(match0);","                    switch (match1) {","                    case 'npm_package_description':","                        return 'the greatest app in the world!';","                    case 'npm_package_name':","                        return 'my-app';","                    case 'npm_package_nameAlias':","                        return 'my_app';","                    case 'npm_package_version':","                        return '0.0.1';","                    }","                });","        }","        // run the cli","        if (local.global.utility2_rollup || module !== require.main) {","            break;","        }","        local.assetsDict['/assets.example.js'] =","            local.assetsDict['/assets.example.js'] ||","            local.fs.readFileSync(__filename, 'utf8');","        local.assetsDict['/assets.npmtest_chai.rollup.js'] =","            local.assetsDict['/assets.npmtest_chai.rollup.js'] ||","            local.fs.readFileSync(","                // buildCustomOrg-hack","                local.npmtest_chai.__dirname +","                    '/lib.npmtest_chai.js',","                'utf8'","            ).replace((/^#!/), '//');","        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';","        // if $npm_config_timeout_exit exists,","        // then exit this process after $npm_config_timeout_exit ms","        if (Number(process.env.npm_config_timeout_exit)) {","            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));","        }","        // start server","        if (local.global.utility2_serverHttp1) {","            break;","        }","        process.env.PORT = process.env.PORT || '8081';","        console.error('server starting on port ' + process.env.PORT);","        local.http.createServer(function (request, response) {","            request.urlParsed = local.url.parse(request.url);","            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {","                response.end(local.assetsDict[request.urlParsed.pathname]);","                return;","            }","            response.statusCode = 404;","            response.end();","        }).listen(process.env.PORT);","        break;","    }","}());",""],"l":{"26":2,"28":2,"33":2,"35":2,"37":2,"38":2,"39":2,"44":1,"51":2,"55":2,"59":2,"61":2,"69":1,"70":2,"76":2,"79":2,"82":2,"83":2,"85":1,"89":2,"92":1,"93":1,"94":1,"96":1,"97":1,"100":1,"101":1,"103":1,"106":1,"108":2,"114":1,"116":1,"118":1,"123":1,"124":2,"125":2,"126":2,"127":2,"128":2,"129":2,"130":1,"133":2,"134":2,"139":2,"143":1,"144":3,"145":1,"149":1,"150":1,"158":1,"160":1,"161":1,"162":1,"164":1,"166":1,"258":1,"259":1,"271":1,"274":6,"275":6,"277":1,"279":2,"281":1,"283":2,"288":1,"289":1,"291":1,"294":1,"302":1,"305":1,"306":1,"309":1,"310":1,"312":1,"313":1,"314":1,"315":1,"316":1,"317":1,"318":1,"320":1,"321":1,"323":1}},"/home/travis/build/npmtest/node-npmtest-chai/chai/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-chai/chai/index.js","s":{"1":1},"b":{},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":39}}},"branchMap":{},"code":["module.exports = require('./lib/chai');",""],"l":{"1":1}},"/home/travis/build/npmtest/node-npmtest-chai/chai/lib/chai.js":{"path":"/home/travis/build/npmtest/node-npmtest-chai/chai/lib/chai.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":5,"7":5,"8":5,"9":5,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1},"b":{"1":[5,0]},"f":{"1":5},"fnMap":{"1":{"name":"(anonymous_1)","line":38,"loc":{"start":{"line":38,"column":14},"end":{"line":38,"column":28}}}},"statementMap":{"1":{"start":{"line":7,"column":0},"end":{"line":8,"column":34}},"2":{"start":{"line":14,"column":0},"end":{"line":14,"column":26}},"3":{"start":{"line":20,"column":0},"end":{"line":20,"column":52}},"4":{"start":{"line":26,"column":0},"end":{"line":26,"column":35}},"5":{"start":{"line":38,"column":0},"end":{"line":45,"column":2}},"6":{"start":{"line":39,"column":2},"end":{"line":42,"column":3}},"7":{"start":{"line":40,"column":4},"end":{"line":40,"column":19}},"8":{"start":{"line":41,"column":4},"end":{"line":41,"column":18}},"9":{"start":{"line":44,"column":2},"end":{"line":44,"column":14}},"10":{"start":{"line":51,"column":0},"end":{"line":51,"column":20}},"11":{"start":{"line":57,"column":0},"end":{"line":57,"column":38}},"12":{"start":{"line":58,"column":0},"end":{"line":58,"column":24}},"13":{"start":{"line":64,"column":0},"end":{"line":64,"column":44}},"14":{"start":{"line":65,"column":0},"end":{"line":65,"column":23}},"15":{"start":{"line":71,"column":0},"end":{"line":71,"column":45}},"16":{"start":{"line":72,"column":0},"end":{"line":72,"column":18}},"17":{"start":{"line":78,"column":0},"end":{"line":78,"column":48}},"18":{"start":{"line":79,"column":0},"end":{"line":79,"column":20}},"19":{"start":{"line":85,"column":0},"end":{"line":85,"column":48}},"20":{"start":{"line":86,"column":0},"end":{"line":86,"column":20}},"21":{"start":{"line":92,"column":0},"end":{"line":92,"column":48}},"22":{"start":{"line":93,"column":0},"end":{"line":93,"column":20}}},"branchMap":{"1":{"line":39,"type":"if","locations":[{"start":{"line":39,"column":2},"end":{"line":39,"column":2}},{"start":{"line":39,"column":2},"end":{"line":39,"column":2}}]}},"code":["/*!"," * chai"," * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>"," * MIT Licensed"," */","","var used = []","  , exports = module.exports = {};","","/*!"," * Chai version"," */","","exports.version = '3.5.0';","","/*!"," * Assertion Error"," */","","exports.AssertionError = require('assertion-error');","","/*!"," * Utils for plugins (not exported)"," */","","var util = require('./chai/utils');","","/**"," * # .use(function)"," *"," * Provides a way to extend the internals of Chai"," *"," * @param {Function}"," * @returns {this} for chaining"," * @api public"," */","","exports.use = function (fn) {","  if (!~used.indexOf(fn)) {","    fn(this, util);","    used.push(fn);","  }","","  return this;","};","","/*!"," * Utility Functions"," */","","exports.util = util;","","/*!"," * Configuration"," */","","var config = require('./chai/config');","exports.config = config;","","/*!"," * Primary `Assertion` prototype"," */","","var assertion = require('./chai/assertion');","exports.use(assertion);","","/*!"," * Core Assertions"," */","","var core = require('./chai/core/assertions');","exports.use(core);","","/*!"," * Expect interface"," */","","var expect = require('./chai/interface/expect');","exports.use(expect);","","/*!"," * Should interface"," */","","var should = require('./chai/interface/should');","exports.use(should);","","/*!"," * Assert interface"," */","","var assert = require('./chai/interface/assert');","exports.use(assert);",""],"l":{"7":1,"14":1,"20":1,"26":1,"38":1,"39":5,"40":5,"41":5,"44":5,"51":1,"57":1,"58":1,"64":1,"65":1,"71":1,"72":1,"78":1,"79":1,"85":1,"86":1,"92":1,"93":1}},"/home/travis/build/npmtest/node-npmtest-chai/chai/lib/chai/utils/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-chai/chai/lib/chai/utils/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1},"b":{},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":11,"column":34}},"2":{"start":{"line":17,"column":0},"end":{"line":17,"column":33}},"3":{"start":{"line":23,"column":0},"end":{"line":23,"column":38}},"4":{"start":{"line":28,"column":0},"end":{"line":28,"column":47}},"5":{"start":{"line":34,"column":0},"end":{"line":34,"column":45}},"6":{"start":{"line":40,"column":0},"end":{"line":40,"column":43}},"7":{"start":{"line":46,"column":0},"end":{"line":46,"column":39}},"8":{"start":{"line":52,"column":0},"end":{"line":52,"column":45}},"9":{"start":{"line":58,"column":0},"end":{"line":58,"column":33}},"10":{"start":{"line":64,"column":0},"end":{"line":64,"column":51}},"11":{"start":{"line":70,"column":0},"end":{"line":70,"column":34}},"12":{"start":{"line":76,"column":0},"end":{"line":76,"column":49}},"13":{"start":{"line":82,"column":0},"end":{"line":82,"column":47}},"14":{"start":{"line":88,"column":0},"end":{"line":88,"column":47}},"15":{"start":{"line":94,"column":0},"end":{"line":94,"column":39}},"16":{"start":{"line":100,"column":0},"end":{"line":100,"column":47}},"17":{"start":{"line":106,"column":0},"end":{"line":106,"column":43}},"18":{"start":{"line":112,"column":0},"end":{"line":112,"column":59}},"19":{"start":{"line":118,"column":0},"end":{"line":118,"column":55}},"20":{"start":{"line":124,"column":0},"end":{"line":124,"column":61}},"21":{"start":{"line":130,"column":0},"end":{"line":130,"column":73}}},"branchMap":{},"code":["/*!"," * chai"," * Copyright(c) 2011 Jake Luer <jake@alogicalparadox.com>"," * MIT Licensed"," */","","/*!"," * Main exports"," */","","var exports = module.exports = {};","","/*!"," * test utility"," */","","exports.test = require('./test');","","/*!"," * type utility"," */","","exports.type = require('type-detect');","","/*!"," * expectTypes utility"," */","exports.expectTypes = require('./expectTypes');","","/*!"," * message utility"," */","","exports.getMessage = require('./getMessage');","","/*!"," * actual utility"," */","","exports.getActual = require('./getActual');","","/*!"," * Inspect util"," */","","exports.inspect = require('./inspect');","","/*!"," * Object Display util"," */","","exports.objDisplay = require('./objDisplay');","","/*!"," * Flag utility"," */","","exports.flag = require('./flag');","","/*!"," * Flag transferring utility"," */","","exports.transferFlags = require('./transferFlags');","","/*!"," * Deep equal utility"," */","","exports.eql = require('deep-eql');","","/*!"," * Deep path value"," */","","exports.getPathValue = require('./getPathValue');","","/*!"," * Deep path info"," */","","exports.getPathInfo = require('./getPathInfo');","","/*!"," * Check if a property exists"," */","","exports.hasProperty = require('./hasProperty');","","/*!"," * Function name"," */","","exports.getName = require('./getName');","","/*!"," * add Property"," */","","exports.addProperty = require('./addProperty');","","/*!"," * add Method"," */","","exports.addMethod = require('./addMethod');","","/*!"," * overwrite Property"," */","","exports.overwriteProperty = require('./overwriteProperty');","","/*!"," * overwrite Method"," */","","exports.overwriteMethod = require('./overwriteMethod');","","/*!"," * Add a chainable method"," */","","exports.addChainableMethod = require('./addChainableMethod');","","/*!"," * Overwrite chainable method"," */","","exports.overwriteChainableMethod = require('./overwriteChainableMethod');",""],"l":{"11":1,"17":1,"23":1,"28":1,"34":1,"40":1,"46":1,"52":1,"58":1,"64":1,"70":1,"76":1,"82":1,"88":1,"94":1,"100":1,"106":1,"112":1,"118":1,"124":1,"130":1}},"/home/travis/build/npmtest/node-npmtest-chai/chai/lib/chai/utils/test.js":{"path":"/home/travis/build/npmtest/node-npmtest-chai/chai/lib/chai/utils/test.js","s":{"1":1,"2":1,"3":0,"4":0},"b":{"1":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":24,"loc":{"start":{"line":24,"column":17},"end":{"line":24,"column":38}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":11,"column":29}},"2":{"start":{"line":24,"column":0},"end":{"line":28,"column":2}},"3":{"start":{"line":25,"column":2},"end":{"line":26,"column":21}},"4":{"start":{"line":27,"column":2},"end":{"line":27,"column":31}}},"branchMap":{"1":{"line":27,"type":"cond-expr","locations":[{"start":{"line":27,"column":18},"end":{"line":27,"column":23}},{"start":{"line":27,"column":26},"end":{"line":27,"column":30}}]}},"code":["/*!"," * Chai - test utility"," * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>"," * MIT Licensed"," */","","/*!"," * Module dependancies"," */","","var flag = require('./flag');","","/**"," * # test(object, expression)"," *"," * Test and object for expression."," *"," * @param {Object} object (constructed Assertion)"," * @param {Arguments} chai.Assertion.prototype.assert arguments"," * @namespace Utils"," * @name test"," */","","module.exports = function (obj, args) {","  var negate = flag(obj, 'negate')","    , expr = args[0];","  return negate ? !expr : expr;","};",""],"l":{"11":1,"24":1,"25":0,"27":0}},"/home/travis/build/npmtest/node-npmtest-chai/chai/lib/chai/utils/flag.js":{"path":"/home/travis/build/npmtest/node-npmtest-chai/chai/lib/chai/utils/flag.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":26,"loc":{"start":{"line":26,"column":17},"end":{"line":26,"column":44}}}},"statementMap":{"1":{"start":{"line":26,"column":0},"end":{"line":33,"column":2}},"2":{"start":{"line":27,"column":2},"end":{"line":27,"column":65}},"3":{"start":{"line":28,"column":2},"end":{"line":32,"column":3}},"4":{"start":{"line":29,"column":4},"end":{"line":29,"column":23}},"5":{"start":{"line":31,"column":4},"end":{"line":31,"column":22}}},"branchMap":{"1":{"line":27,"type":"binary-expr","locations":[{"start":{"line":27,"column":14},"end":{"line":27,"column":25}},{"start":{"line":27,"column":30},"end":{"line":27,"column":63}}]},"2":{"line":28,"type":"if","locations":[{"start":{"line":28,"column":2},"end":{"line":28,"column":2}},{"start":{"line":28,"column":2},"end":{"line":28,"column":2}}]}},"code":["/*!"," * Chai - flag utility"," * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>"," * MIT Licensed"," */","","/**"," * ### flag(object, key, [value])"," *"," * Get or set a flag value on an object. If a"," * value is provided it will be set, else it will"," * return the currently set value or `undefined` if"," * the value is not set."," *"," *     utils.flag(this, 'foo', 'bar'); // setter"," *     utils.flag(this, 'foo'); // getter, returns `bar`"," *"," * @param {Object} object constructed Assertion"," * @param {String} key"," * @param {Mixed} value (optional)"," * @namespace Utils"," * @name flag"," * @api private"," */","","module.exports = function (obj, key, value) {","  var flags = obj.__flags || (obj.__flags = Object.create(null));","  if (arguments.length === 3) {","    flags[key] = value;","  } else {","    return flags[key];","  }","};",""],"l":{"26":1,"27":0,"28":0,"29":0,"31":0}},"/home/travis/build/npmtest/node-npmtest-chai/chai/lib/chai/utils/expectTypes.js":{"path":"/home/travis/build/npmtest/node-npmtest-chai/chai/lib/chai/utils/expectTypes.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"(anonymous_1)","line":25,"loc":{"start":{"line":25,"column":17},"end":{"line":25,"column":39}}},"2":{"name":"(anonymous_2)","line":27,"loc":{"start":{"line":27,"column":20},"end":{"line":27,"column":33}}},"3":{"name":"(anonymous_3)","line":31,"loc":{"start":{"line":31,"column":22},"end":{"line":31,"column":42}}},"4":{"name":"(anonymous_4)","line":37,"loc":{"start":{"line":37,"column":18},"end":{"line":37,"column":38}}}},"statementMap":{"1":{"start":{"line":21,"column":0},"end":{"line":21,"column":48}},"2":{"start":{"line":22,"column":0},"end":{"line":22,"column":29}},"3":{"start":{"line":23,"column":0},"end":{"line":23,"column":34}},"4":{"start":{"line":25,"column":0},"end":{"line":42,"column":2}},"5":{"start":{"line":26,"column":2},"end":{"line":26,"column":32}},"6":{"start":{"line":27,"column":2},"end":{"line":27,"column":62}},"7":{"start":{"line":27,"column":35},"end":{"line":27,"column":58}},"8":{"start":{"line":28,"column":2},"end":{"line":28,"column":15}},"9":{"start":{"line":31,"column":2},"end":{"line":35,"column":16}},"10":{"start":{"line":32,"column":4},"end":{"line":32,"column":77}},"11":{"start":{"line":33,"column":4},"end":{"line":33,"column":73}},"12":{"start":{"line":34,"column":4},"end":{"line":34,"column":30}},"13":{"start":{"line":37,"column":2},"end":{"line":41,"column":3}},"14":{"start":{"line":37,"column":40},"end":{"line":37,"column":70}},"15":{"start":{"line":38,"column":4},"end":{"line":40,"column":6}}},"branchMap":{"1":{"line":32,"type":"cond-expr","locations":[{"start":{"line":32,"column":66},"end":{"line":32,"column":70}},{"start":{"line":32,"column":73},"end":{"line":32,"column":76}}]},"2":{"line":33,"type":"cond-expr","locations":[{"start":{"line":33,"column":62},"end":{"line":33,"column":67}},{"start":{"line":33,"column":70},"end":{"line":33,"column":72}}]},"3":{"line":33,"type":"binary-expr","locations":[{"start":{"line":33,"column":13},"end":{"line":33,"column":29}},{"start":{"line":33,"column":33},"end":{"line":33,"column":59}}]},"4":{"line":37,"type":"if","locations":[{"start":{"line":37,"column":2},"end":{"line":37,"column":2}},{"start":{"line":37,"column":2},"end":{"line":37,"column":2}}]}},"code":["/*!"," * Chai - expectTypes utility"," * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>"," * MIT Licensed"," */","","/**"," * ### expectTypes(obj, types)"," *"," * Ensures that the object being tested against is of a valid type."," *"," *     utils.expectTypes(this, ['array', 'object', 'string']);"," *"," * @param {Mixed} obj constructed Assertion"," * @param {Array} type A list of allowed types for this assertion"," * @namespace Utils"," * @name expectTypes"," * @api public"," */","","var AssertionError = require('assertion-error');","var flag = require('./flag');","var type = require('type-detect');","","module.exports = function (obj, types) {","  var obj = flag(obj, 'object');","  types = types.map(function (t) { return t.toLowerCase(); });","  types.sort();","","  // Transforms ['lorem', 'ipsum'] into 'a lirum, or an ipsum'","  var str = types.map(function (t, index) {","    var art = ~[ 'a', 'e', 'i', 'o', 'u' ].indexOf(t.charAt(0)) ? 'an' : 'a';","    var or = types.length > 1 && index === types.length - 1 ? 'or ' : '';","    return or + art + ' ' + t;","  }).join(', ');","","  if (!types.some(function (expected) { return type(obj) === expected; })) {","    throw new AssertionError(","      'object tested must be ' + str + ', but ' + type(obj) + ' given'","    );","  }","};",""],"l":{"21":1,"22":1,"23":1,"25":1,"26":0,"27":0,"28":0,"31":0,"32":0,"33":0,"34":0,"37":0,"38":0}},"/home/travis/build/npmtest/node-npmtest-chai/chai/lib/chai/utils/getMessage.js":{"path":"/home/travis/build/npmtest/node-npmtest-chai/chai/lib/chai/utils/getMessage.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"(anonymous_1)","line":35,"loc":{"start":{"line":35,"column":17},"end":{"line":35,"column":38}}},"2":{"name":"(anonymous_2)","line":46,"loc":{"start":{"line":46,"column":27},"end":{"line":46,"column":39}}},"3":{"name":"(anonymous_3)","line":47,"loc":{"start":{"line":47,"column":26},"end":{"line":47,"column":38}}},"4":{"name":"(anonymous_4)","line":48,"loc":{"start":{"line":48,"column":26},"end":{"line":48,"column":38}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":14,"column":41}},"2":{"start":{"line":35,"column":0},"end":{"line":51,"column":2}},"3":{"start":{"line":36,"column":2},"end":{"line":41,"column":37}},"4":{"start":{"line":43,"column":2},"end":{"line":43,"column":44}},"5":{"start":{"line":43,"column":32},"end":{"line":43,"column":44}},"6":{"start":{"line":44,"column":2},"end":{"line":44,"column":18}},"7":{"start":{"line":45,"column":2},"end":{"line":48,"column":72}},"8":{"start":{"line":46,"column":41},"end":{"line":46,"column":64}},"9":{"start":{"line":47,"column":40},"end":{"line":47,"column":66}},"10":{"start":{"line":48,"column":40},"end":{"line":48,"column":68}},"11":{"start":{"line":50,"column":2},"end":{"line":50,"column":46}}},"branchMap":{"1":{"line":40,"type":"cond-expr","locations":[{"start":{"line":40,"column":21},"end":{"line":40,"column":28}},{"start":{"line":40,"column":31},"end":{"line":40,"column":38}}]},"2":{"line":43,"type":"if","locations":[{"start":{"line":43,"column":2},"end":{"line":43,"column":2}},{"start":{"line":43,"column":2},"end":{"line":43,"column":2}}]},"3":{"line":44,"type":"binary-expr","locations":[{"start":{"line":44,"column":8},"end":{"line":44,"column":11}},{"start":{"line":44,"column":15},"end":{"line":44,"column":17}}]},"4":{"line":50,"type":"cond-expr","locations":[{"start":{"line":50,"column":19},"end":{"line":50,"column":39}},{"start":{"line":50,"column":42},"end":{"line":50,"column":45}}]}},"code":["/*!"," * Chai - message composition utility"," * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>"," * MIT Licensed"," */","","/*!"," * Module dependancies"," */","","var flag = require('./flag')","  , getActual = require('./getActual')","  , inspect = require('./inspect')","  , objDisplay = require('./objDisplay');","","/**"," * ### .getMessage(object, message, negateMessage)"," *"," * Construct the error message based on flags"," * and template tags. Template tags will return"," * a stringified inspection of the object referenced."," *"," * Message template tags:"," * - `#{this}` current asserted object"," * - `#{act}` actual value"," * - `#{exp}` expected value"," *"," * @param {Object} object (constructed Assertion)"," * @param {Arguments} chai.Assertion.prototype.assert arguments"," * @namespace Utils"," * @name getMessage"," * @api public"," */","","module.exports = function (obj, args) {","  var negate = flag(obj, 'negate')","    , val = flag(obj, 'object')","    , expected = args[3]","    , actual = getActual(obj, args)","    , msg = negate ? args[2] : args[1]","    , flagMsg = flag(obj, 'message');","","  if(typeof msg === \"function\") msg = msg();","  msg = msg || '';","  msg = msg","    .replace(/#\\{this\\}/g, function () { return objDisplay(val); })","    .replace(/#\\{act\\}/g, function () { return objDisplay(actual); })","    .replace(/#\\{exp\\}/g, function () { return objDisplay(expected); });","","  return flagMsg ? flagMsg + ': ' + msg : msg;","};",""],"l":{"11":1,"35":1,"36":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"50":0}},"/home/travis/build/npmtest/node-npmtest-chai/chai/lib/chai/utils/getActual.js":{"path":"/home/travis/build/npmtest/node-npmtest-chai/chai/lib/chai/utils/getActual.js","s":{"1":1,"2":0},"b":{"1":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":18,"loc":{"start":{"line":18,"column":17},"end":{"line":18,"column":38}}}},"statementMap":{"1":{"start":{"line":18,"column":0},"end":{"line":20,"column":2}},"2":{"start":{"line":19,"column":2},"end":{"line":19,"column":46}}},"branchMap":{"1":{"line":19,"type":"cond-expr","locations":[{"start":{"line":19,"column":27},"end":{"line":19,"column":34}},{"start":{"line":19,"column":37},"end":{"line":19,"column":45}}]}},"code":["/*!"," * Chai - getActual utility"," * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>"," * MIT Licensed"," */","","/**"," * # getActual(object, [actual])"," *"," * Returns the `actual` value for an Assertion"," *"," * @param {Object} object (constructed Assertion)"," * @param {Arguments} chai.Assertion.prototype.assert arguments"," * @namespace Utils"," * @name getActual"," */","","module.exports = function (obj, args) {","  return args.length > 4 ? args[4] : obj._obj;","};",""],"l":{"18":1,"19":0}},"/home/travis/build/npmtest/node-npmtest-chai/chai/lib/chai/utils/inspect.js":{"path":"/home/travis/build/npmtest/node-npmtest-chai/chai/lib/chai/utils/inspect.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":0,"7":0,"8":0,"9":1,"10":0,"11":0,"12":0,"13":1,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":1,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":1,"88":0,"89":1,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":1,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":1,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":1,"143":0,"144":1,"145":0,"146":1,"147":0,"148":1,"149":0,"150":1,"151":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0,0,0],"4":[0,0],"5":[0,0,0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0,0,0,0,0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0,0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0],"44":[0,0],"45":[0,0],"46":[0,0],"47":[0,0],"48":[0,0],"49":[0,0],"50":[0,0],"51":[0,0],"52":[0,0],"53":[0,0],"54":[0,0,0],"55":[0,0],"56":[0,0],"57":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0},"fnMap":{"1":{"name":"inspect","line":23,"loc":{"start":{"line":23,"column":0},"end":{"line":23,"column":49}}},"2":{"name":"(anonymous_2)","line":27,"loc":{"start":{"line":27,"column":13},"end":{"line":27,"column":28}}},"3":{"name":"(anonymous_3)","line":33,"loc":{"start":{"line":33,"column":19},"end":{"line":33,"column":37}}},"4":{"name":"formatValue","line":44,"loc":{"start":{"line":44,"column":0},"end":{"line":44,"column":47}}},"5":{"name":"(anonymous_5)","line":173,"loc":{"start":{"line":173,"column":22},"end":{"line":173,"column":36}}},"6":{"name":"formatPrimitive","line":184,"loc":{"start":{"line":184,"column":0},"end":{"line":184,"column":37}}},"7":{"name":"formatError","line":211,"loc":{"start":{"line":211,"column":0},"end":{"line":211,"column":28}}},"8":{"name":"formatArray","line":216,"loc":{"start":{"line":216,"column":0},"end":{"line":216,"column":66}}},"9":{"name":"(anonymous_9)","line":226,"loc":{"start":{"line":226,"column":15},"end":{"line":226,"column":29}}},"10":{"name":"formatProperty","line":236,"loc":{"start":{"line":236,"column":0},"end":{"line":236,"column":75}}},"11":{"name":"(anonymous_11)","line":263,"loc":{"start":{"line":263,"column":36},"end":{"line":263,"column":51}}},"12":{"name":"(anonymous_12)","line":267,"loc":{"start":{"line":267,"column":43},"end":{"line":267,"column":58}}},"13":{"name":"reduceToSingleString","line":296,"loc":{"start":{"line":296,"column":0},"end":{"line":296,"column":52}}},"14":{"name":"(anonymous_14)","line":298,"loc":{"start":{"line":298,"column":29},"end":{"line":298,"column":49}}},"15":{"name":"isArray","line":316,"loc":{"start":{"line":316,"column":0},"end":{"line":316,"column":21}}},"16":{"name":"isRegExp","line":321,"loc":{"start":{"line":321,"column":0},"end":{"line":321,"column":22}}},"17":{"name":"isDate","line":325,"loc":{"start":{"line":325,"column":0},"end":{"line":325,"column":19}}},"18":{"name":"isError","line":329,"loc":{"start":{"line":329,"column":0},"end":{"line":329,"column":20}}},"19":{"name":"objectToString","line":333,"loc":{"start":{"line":333,"column":0},"end":{"line":333,"column":27}}}},"statementMap":{"1":{"start":{"line":4,"column":0},"end":{"line":4,"column":35}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":47}},"3":{"start":{"line":6,"column":0},"end":{"line":6,"column":67}},"4":{"start":{"line":8,"column":0},"end":{"line":8,"column":25}},"5":{"start":{"line":23,"column":0},"end":{"line":30,"column":1}},"6":{"start":{"line":24,"column":2},"end":{"line":28,"column":4}},"7":{"start":{"line":27,"column":30},"end":{"line":27,"column":41}},"8":{"start":{"line":29,"column":2},"end":{"line":29,"column":75}},"9":{"start":{"line":33,"column":0},"end":{"line":42,"column":2}},"10":{"start":{"line":34,"column":2},"end":{"line":41,"column":3}},"11":{"start":{"line":35,"column":4},"end":{"line":35,"column":41}},"12":{"start":{"line":37,"column":4},"end":{"line":40,"column":42}},"13":{"start":{"line":44,"column":0},"end":{"line":181,"column":1}},"14":{"start":{"line":47,"column":2},"end":{"line":57,"column":3}},"15":{"start":{"line":52,"column":4},"end":{"line":52,"column":42}},"16":{"start":{"line":53,"column":4},"end":{"line":55,"column":5}},"17":{"start":{"line":54,"column":6},"end":{"line":54,"column":48}},"18":{"start":{"line":56,"column":4},"end":{"line":56,"column":15}},"19":{"start":{"line":60,"column":2},"end":{"line":60,"column":46}},"20":{"start":{"line":61,"column":2},"end":{"line":63,"column":3}},"21":{"start":{"line":62,"column":4},"end":{"line":62,"column":21}},"22":{"start":{"line":66,"column":2},"end":{"line":96,"column":3}},"23":{"start":{"line":67,"column":4},"end":{"line":95,"column":5}},"24":{"start":{"line":68,"column":6},"end":{"line":68,"column":29}},"25":{"start":{"line":73,"column":6},"end":{"line":94,"column":7}},"26":{"start":{"line":74,"column":8},"end":{"line":89,"column":9}},"27":{"start":{"line":75,"column":10},"end":{"line":75,"column":50}},"28":{"start":{"line":76,"column":10},"end":{"line":76,"column":56}},"29":{"start":{"line":81,"column":10},"end":{"line":81,"column":50}},"30":{"start":{"line":82,"column":10},"end":{"line":82,"column":60}},"31":{"start":{"line":84,"column":10},"end":{"line":84,"column":56}},"32":{"start":{"line":85,"column":10},"end":{"line":86,"column":56}},"33":{"start":{"line":87,"column":10},"end":{"line":87,"column":35}},"34":{"start":{"line":88,"column":10},"end":{"line":88,"column":22}},"35":{"start":{"line":99,"column":2},"end":{"line":99,"column":51}},"36":{"start":{"line":100,"column":2},"end":{"line":100,"column":65}},"37":{"start":{"line":105,"column":2},"end":{"line":123,"column":3}},"38":{"start":{"line":109,"column":4},"end":{"line":113,"column":5}},"39":{"start":{"line":110,"column":6},"end":{"line":110,"column":32}},"40":{"start":{"line":111,"column":6},"end":{"line":111,"column":47}},"41":{"start":{"line":112,"column":6},"end":{"line":112,"column":68}},"42":{"start":{"line":114,"column":4},"end":{"line":116,"column":5}},"43":{"start":{"line":115,"column":6},"end":{"line":115,"column":74}},"44":{"start":{"line":117,"column":4},"end":{"line":119,"column":5}},"45":{"start":{"line":118,"column":6},"end":{"line":118,"column":73}},"46":{"start":{"line":120,"column":4},"end":{"line":122,"column":5}},"47":{"start":{"line":121,"column":6},"end":{"line":121,"column":32}},"48":{"start":{"line":125,"column":2},"end":{"line":125,"column":52}},"49":{"start":{"line":128,"column":2},"end":{"line":131,"column":3}},"50":{"start":{"line":129,"column":4},"end":{"line":129,"column":17}},"51":{"start":{"line":130,"column":4},"end":{"line":130,"column":24}},"52":{"start":{"line":134,"column":2},"end":{"line":138,"column":3}},"53":{"start":{"line":135,"column":4},"end":{"line":135,"column":30}},"54":{"start":{"line":136,"column":4},"end":{"line":136,"column":45}},"55":{"start":{"line":137,"column":4},"end":{"line":137,"column":43}},"56":{"start":{"line":141,"column":2},"end":{"line":143,"column":3}},"57":{"start":{"line":142,"column":4},"end":{"line":142,"column":55}},"58":{"start":{"line":146,"column":2},"end":{"line":148,"column":3}},"59":{"start":{"line":147,"column":4},"end":{"line":147,"column":56}},"60":{"start":{"line":151,"column":2},"end":{"line":153,"column":3}},"61":{"start":{"line":152,"column":4},"end":{"line":152,"column":30}},"62":{"start":{"line":155,"column":2},"end":{"line":157,"column":3}},"63":{"start":{"line":156,"column":4},"end":{"line":156,"column":40}},"64":{"start":{"line":159,"column":2},"end":{"line":165,"column":3}},"65":{"start":{"line":160,"column":4},"end":{"line":164,"column":5}},"66":{"start":{"line":161,"column":6},"end":{"line":161,"column":74}},"67":{"start":{"line":163,"column":6},"end":{"line":163,"column":48}},"68":{"start":{"line":167,"column":2},"end":{"line":167,"column":23}},"69":{"start":{"line":169,"column":2},"end":{"line":169,"column":13}},"70":{"start":{"line":170,"column":2},"end":{"line":176,"column":3}},"71":{"start":{"line":171,"column":4},"end":{"line":171,"column":70}},"72":{"start":{"line":173,"column":4},"end":{"line":175,"column":7}},"73":{"start":{"line":174,"column":6},"end":{"line":174,"column":79}},"74":{"start":{"line":178,"column":2},"end":{"line":178,"column":17}},"75":{"start":{"line":180,"column":2},"end":{"line":180,"column":52}},"76":{"start":{"line":184,"column":0},"end":{"line":208,"column":1}},"77":{"start":{"line":185,"column":2},"end":{"line":203,"column":3}},"78":{"start":{"line":187,"column":6},"end":{"line":187,"column":51}},"79":{"start":{"line":190,"column":6},"end":{"line":192,"column":76}},"80":{"start":{"line":193,"column":6},"end":{"line":193,"column":43}},"81":{"start":{"line":196,"column":6},"end":{"line":198,"column":7}},"82":{"start":{"line":197,"column":8},"end":{"line":197,"column":43}},"83":{"start":{"line":199,"column":6},"end":{"line":199,"column":47}},"84":{"start":{"line":202,"column":6},"end":{"line":202,"column":48}},"85":{"start":{"line":205,"column":2},"end":{"line":207,"column":3}},"86":{"start":{"line":206,"column":4},"end":{"line":206,"column":39}},"87":{"start":{"line":211,"column":0},"end":{"line":213,"column":1}},"88":{"start":{"line":212,"column":2},"end":{"line":212,"column":58}},"89":{"start":{"line":216,"column":0},"end":{"line":233,"column":1}},"90":{"start":{"line":217,"column":2},"end":{"line":217,"column":18}},"91":{"start":{"line":218,"column":2},"end":{"line":225,"column":3}},"92":{"start":{"line":219,"column":4},"end":{"line":224,"column":5}},"93":{"start":{"line":220,"column":6},"end":{"line":221,"column":28}},"94":{"start":{"line":223,"column":6},"end":{"line":223,"column":22}},"95":{"start":{"line":226,"column":2},"end":{"line":231,"column":5}},"96":{"start":{"line":227,"column":4},"end":{"line":230,"column":5}},"97":{"start":{"line":228,"column":6},"end":{"line":229,"column":22}},"98":{"start":{"line":232,"column":2},"end":{"line":232,"column":16}},"99":{"start":{"line":236,"column":0},"end":{"line":293,"column":1}},"100":{"start":{"line":237,"column":2},"end":{"line":237,"column":16}},"101":{"start":{"line":238,"column":2},"end":{"line":250,"column":3}},"102":{"start":{"line":239,"column":4},"end":{"line":249,"column":5}},"103":{"start":{"line":240,"column":6},"end":{"line":244,"column":7}},"104":{"start":{"line":241,"column":8},"end":{"line":241,"column":56}},"105":{"start":{"line":243,"column":8},"end":{"line":243,"column":49}},"106":{"start":{"line":246,"column":6},"end":{"line":248,"column":7}},"107":{"start":{"line":247,"column":8},"end":{"line":247,"column":49}},"108":{"start":{"line":251,"column":2},"end":{"line":253,"column":3}},"109":{"start":{"line":252,"column":4},"end":{"line":252,"column":27}},"110":{"start":{"line":254,"column":2},"end":{"line":275,"column":3}},"111":{"start":{"line":255,"column":4},"end":{"line":274,"column":5}},"112":{"start":{"line":256,"column":6},"end":{"line":260,"column":7}},"113":{"start":{"line":257,"column":8},"end":{"line":257,"column":49}},"114":{"start":{"line":259,"column":8},"end":{"line":259,"column":61}},"115":{"start":{"line":261,"column":6},"end":{"line":271,"column":7}},"116":{"start":{"line":262,"column":8},"end":{"line":270,"column":9}},"117":{"start":{"line":263,"column":10},"end":{"line":265,"column":34}},"118":{"start":{"line":264,"column":12},"end":{"line":264,"column":31}},"119":{"start":{"line":267,"column":10},"end":{"line":269,"column":24}},"120":{"start":{"line":268,"column":12},"end":{"line":268,"column":32}},"121":{"start":{"line":273,"column":6},"end":{"line":273,"column":49}},"122":{"start":{"line":276,"column":2},"end":{"line":290,"column":3}},"123":{"start":{"line":277,"column":4},"end":{"line":279,"column":5}},"124":{"start":{"line":278,"column":6},"end":{"line":278,"column":17}},"125":{"start":{"line":280,"column":4},"end":{"line":280,"column":36}},"126":{"start":{"line":281,"column":4},"end":{"line":289,"column":5}},"127":{"start":{"line":282,"column":6},"end":{"line":282,"column":45}},"128":{"start":{"line":283,"column":6},"end":{"line":283,"column":39}},"129":{"start":{"line":285,"column":6},"end":{"line":287,"column":43}},"130":{"start":{"line":288,"column":6},"end":{"line":288,"column":41}},"131":{"start":{"line":292,"column":2},"end":{"line":292,"column":27}},"132":{"start":{"line":296,"column":0},"end":{"line":314,"column":1}},"133":{"start":{"line":297,"column":2},"end":{"line":297,"column":22}},"134":{"start":{"line":298,"column":2},"end":{"line":302,"column":8}},"135":{"start":{"line":299,"column":4},"end":{"line":299,"column":18}},"136":{"start":{"line":300,"column":4},"end":{"line":300,"column":46}},"137":{"start":{"line":300,"column":32},"end":{"line":300,"column":46}},"138":{"start":{"line":301,"column":4},"end":{"line":301,"column":33}},"139":{"start":{"line":304,"column":2},"end":{"line":311,"column":3}},"140":{"start":{"line":305,"column":4},"end":{"line":310,"column":21}},"141":{"start":{"line":313,"column":2},"end":{"line":313,"column":70}},"142":{"start":{"line":316,"column":0},"end":{"line":319,"column":1}},"143":{"start":{"line":317,"column":2},"end":{"line":318,"column":77}},"144":{"start":{"line":321,"column":0},"end":{"line":323,"column":1}},"145":{"start":{"line":322,"column":2},"end":{"line":322,"column":76}},"146":{"start":{"line":325,"column":0},"end":{"line":327,"column":1}},"147":{"start":{"line":326,"column":2},"end":{"line":326,"column":72}},"148":{"start":{"line":329,"column":0},"end":{"line":331,"column":1}},"149":{"start":{"line":330,"column":2},"end":{"line":330,"column":73}},"150":{"start":{"line":333,"column":0},"end":{"line":335,"column":1}},"151":{"start":{"line":334,"column":2},"end":{"line":334,"column":43}}},"branchMap":{"1":{"line":29,"type":"cond-expr","locations":[{"start":{"line":29,"column":63},"end":{"line":29,"column":64}},{"start":{"line":29,"column":67},"end":{"line":29,"column":72}}]},"2":{"line":34,"type":"if","locations":[{"start":{"line":34,"column":2},"end":{"line":34,"column":2}},{"start":{"line":34,"column":2},"end":{"line":34,"column":2}}]},"3":{"line":37,"type":"binary-expr","locations":[{"start":{"line":37,"column":11},"end":{"line":37,"column":17}},{"start":{"line":38,"column":6},"end":{"line":38,"column":32}},{"start":{"line":39,"column":6},"end":{"line":39,"column":27}},{"start":{"line":40,"column":6},"end":{"line":40,"column":41}}]},"4":{"line":47,"type":"if","locations":[{"start":{"line":47,"column":2},"end":{"line":47,"column":2}},{"start":{"line":47,"column":2},"end":{"line":47,"column":2}}]},"5":{"line":47,"type":"binary-expr","locations":[{"start":{"line":47,"column":6},"end":{"line":47,"column":11}},{"start":{"line":47,"column":15},"end":{"line":47,"column":50}},{"start":{"line":49,"column":6},"end":{"line":49,"column":39}},{"start":{"line":51,"column":6},"end":{"line":51,"column":67}}]},"6":{"line":51,"type":"binary-expr","locations":[{"start":{"line":51,"column":8},"end":{"line":51,"column":25}},{"start":{"line":51,"column":29},"end":{"line":51,"column":66}}]},"7":{"line":53,"type":"if","locations":[{"start":{"line":53,"column":4},"end":{"line":53,"column":4}},{"start":{"line":53,"column":4},"end":{"line":53,"column":4}}]},"8":{"line":61,"type":"if","locations":[{"start":{"line":61,"column":2},"end":{"line":61,"column":2}},{"start":{"line":61,"column":2},"end":{"line":61,"column":2}}]},"9":{"line":66,"type":"if","locations":[{"start":{"line":66,"column":2},"end":{"line":66,"column":2}},{"start":{"line":66,"column":2},"end":{"line":66,"column":2}}]},"10":{"line":67,"type":"if","locations":[{"start":{"line":67,"column":4},"end":{"line":67,"column":4}},{"start":{"line":67,"column":4},"end":{"line":67,"column":4}}]},"11":{"line":74,"type":"if","locations":[{"start":{"line":74,"column":8},"end":{"line":74,"column":8}},{"start":{"line":74,"column":8},"end":{"line":74,"column":8}}]},"12":{"line":100,"type":"cond-expr","locations":[{"start":{"line":100,"column":30},"end":{"line":100,"column":50}},{"start":{"line":100,"column":53},"end":{"line":100,"column":64}}]},"13":{"line":105,"type":"if","locations":[{"start":{"line":105,"column":2},"end":{"line":105,"column":2}},{"start":{"line":105,"column":2},"end":{"line":105,"column":2}}]},"14":{"line":105,"type":"binary-expr","locations":[{"start":{"line":105,"column":6},"end":{"line":105,"column":23}},{"start":{"line":105,"column":28},"end":{"line":105,"column":42}},{"start":{"line":106,"column":7},"end":{"line":106,"column":24}},{"start":{"line":106,"column":28},"end":{"line":106,"column":47}},{"start":{"line":107,"column":7},"end":{"line":107,"column":24}},{"start":{"line":107,"column":28},"end":{"line":107,"column":53}},{"start":{"line":107,"column":57},"end":{"line":107,"column":76}}]},"15":{"line":109,"type":"if","locations":[{"start":{"line":109,"column":4},"end":{"line":109,"column":4}},{"start":{"line":109,"column":4},"end":{"line":109,"column":4}}]},"16":{"line":111,"type":"cond-expr","locations":[{"start":{"line":111,"column":30},"end":{"line":111,"column":41}},{"start":{"line":111,"column":44},"end":{"line":111,"column":46}}]},"17":{"line":114,"type":"if","locations":[{"start":{"line":114,"column":4},"end":{"line":114,"column":4}},{"start":{"line":114,"column":4},"end":{"line":114,"column":4}}]},"18":{"line":117,"type":"if","locations":[{"start":{"line":117,"column":4},"end":{"line":117,"column":4}},{"start":{"line":117,"column":4},"end":{"line":117,"column":4}}]},"19":{"line":120,"type":"if","locations":[{"start":{"line":120,"column":4},"end":{"line":120,"column":4}},{"start":{"line":120,"column":4},"end":{"line":120,"column":4}}]},"20":{"line":128,"type":"if","locations":[{"start":{"line":128,"column":2},"end":{"line":128,"column":2}},{"start":{"line":128,"column":2},"end":{"line":128,"column":2}}]},"21":{"line":134,"type":"if","locations":[{"start":{"line":134,"column":2},"end":{"line":134,"column":2}},{"start":{"line":134,"column":2},"end":{"line":134,"column":2}}]},"22":{"line":136,"type":"cond-expr","locations":[{"start":{"line":136,"column":28},"end":{"line":136,"column":39}},{"start":{"line":136,"column":42},"end":{"line":136,"column":44}}]},"23":{"line":141,"type":"if","locations":[{"start":{"line":141,"column":2},"end":{"line":141,"column":2}},{"start":{"line":141,"column":2},"end":{"line":141,"column":2}}]},"24":{"line":146,"type":"if","locations":[{"start":{"line":146,"column":2},"end":{"line":146,"column":2}},{"start":{"line":146,"column":2},"end":{"line":146,"column":2}}]},"25":{"line":151,"type":"if","locations":[{"start":{"line":151,"column":2},"end":{"line":151,"column":2}},{"start":{"line":151,"column":2},"end":{"line":151,"column":2}}]},"26":{"line":155,"type":"if","locations":[{"start":{"line":155,"column":2},"end":{"line":155,"column":2}},{"start":{"line":155,"column":2},"end":{"line":155,"column":2}}]},"27":{"line":155,"type":"binary-expr","locations":[{"start":{"line":155,"column":6},"end":{"line":155,"column":23}},{"start":{"line":155,"column":28},"end":{"line":155,"column":34}},{"start":{"line":155,"column":38},"end":{"line":155,"column":55}}]},"28":{"line":159,"type":"if","locations":[{"start":{"line":159,"column":2},"end":{"line":159,"column":2}},{"start":{"line":159,"column":2},"end":{"line":159,"column":2}}]},"29":{"line":160,"type":"if","locations":[{"start":{"line":160,"column":4},"end":{"line":160,"column":4}},{"start":{"line":160,"column":4},"end":{"line":160,"column":4}}]},"30":{"line":170,"type":"if","locations":[{"start":{"line":170,"column":2},"end":{"line":170,"column":2}},{"start":{"line":170,"column":2},"end":{"line":170,"column":2}}]},"31":{"line":185,"type":"switch","locations":[{"start":{"line":186,"column":4},"end":{"line":187,"column":51}},{"start":{"line":189,"column":4},"end":{"line":193,"column":43}},{"start":{"line":195,"column":4},"end":{"line":199,"column":47}},{"start":{"line":201,"column":4},"end":{"line":202,"column":48}}]},"32":{"line":196,"type":"if","locations":[{"start":{"line":196,"column":6},"end":{"line":196,"column":6}},{"start":{"line":196,"column":6},"end":{"line":196,"column":6}}]},"33":{"line":196,"type":"binary-expr","locations":[{"start":{"line":196,"column":10},"end":{"line":196,"column":21}},{"start":{"line":196,"column":25},"end":{"line":196,"column":48}}]},"34":{"line":205,"type":"if","locations":[{"start":{"line":205,"column":2},"end":{"line":205,"column":2}},{"start":{"line":205,"column":2},"end":{"line":205,"column":2}}]},"35":{"line":219,"type":"if","locations":[{"start":{"line":219,"column":4},"end":{"line":219,"column":4}},{"start":{"line":219,"column":4},"end":{"line":219,"column":4}}]},"36":{"line":227,"type":"if","locations":[{"start":{"line":227,"column":4},"end":{"line":227,"column":4}},{"start":{"line":227,"column":4},"end":{"line":227,"column":4}}]},"37":{"line":238,"type":"if","locations":[{"start":{"line":238,"column":2},"end":{"line":238,"column":2}},{"start":{"line":238,"column":2},"end":{"line":238,"column":2}}]},"38":{"line":239,"type":"if","locations":[{"start":{"line":239,"column":4},"end":{"line":239,"column":4}},{"start":{"line":239,"column":4},"end":{"line":239,"column":4}}]},"39":{"line":240,"type":"if","locations":[{"start":{"line":240,"column":6},"end":{"line":240,"column":6}},{"start":{"line":240,"column":6},"end":{"line":240,"column":6}}]},"40":{"line":246,"type":"if","locations":[{"start":{"line":246,"column":6},"end":{"line":246,"column":6}},{"start":{"line":246,"column":6},"end":{"line":246,"column":6}}]},"41":{"line":251,"type":"if","locations":[{"start":{"line":251,"column":2},"end":{"line":251,"column":2}},{"start":{"line":251,"column":2},"end":{"line":251,"column":2}}]},"42":{"line":254,"type":"if","locations":[{"start":{"line":254,"column":2},"end":{"line":254,"column":2}},{"start":{"line":254,"column":2},"end":{"line":254,"column":2}}]},"43":{"line":255,"type":"if","locations":[{"start":{"line":255,"column":4},"end":{"line":255,"column":4}},{"start":{"line":255,"column":4},"end":{"line":255,"column":4}}]},"44":{"line":256,"type":"if","locations":[{"start":{"line":256,"column":6},"end":{"line":256,"column":6}},{"start":{"line":256,"column":6},"end":{"line":256,"column":6}}]},"45":{"line":261,"type":"if","locations":[{"start":{"line":261,"column":6},"end":{"line":261,"column":6}},{"start":{"line":261,"column":6},"end":{"line":261,"column":6}}]},"46":{"line":262,"type":"if","locations":[{"start":{"line":262,"column":8},"end":{"line":262,"column":8}},{"start":{"line":262,"column":8},"end":{"line":262,"column":8}}]},"47":{"line":276,"type":"if","locations":[{"start":{"line":276,"column":2},"end":{"line":276,"column":2}},{"start":{"line":276,"column":2},"end":{"line":276,"column":2}}]},"48":{"line":277,"type":"if","locations":[{"start":{"line":277,"column":4},"end":{"line":277,"column":4}},{"start":{"line":277,"column":4},"end":{"line":277,"column":4}}]},"49":{"line":277,"type":"binary-expr","locations":[{"start":{"line":277,"column":8},"end":{"line":277,"column":13}},{"start":{"line":277,"column":17},"end":{"line":277,"column":35}}]},"50":{"line":281,"type":"if","locations":[{"start":{"line":281,"column":4},"end":{"line":281,"column":4}},{"start":{"line":281,"column":4},"end":{"line":281,"column":4}}]},"51":{"line":300,"type":"if","locations":[{"start":{"line":300,"column":4},"end":{"line":300,"column":4}},{"start":{"line":300,"column":4},"end":{"line":300,"column":4}}]},"52":{"line":304,"type":"if","locations":[{"start":{"line":304,"column":2},"end":{"line":304,"column":2}},{"start":{"line":304,"column":2},"end":{"line":304,"column":2}}]},"53":{"line":306,"type":"cond-expr","locations":[{"start":{"line":306,"column":26},"end":{"line":306,"column":28}},{"start":{"line":306,"column":31},"end":{"line":306,"column":43}}]},"54":{"line":317,"type":"binary-expr","locations":[{"start":{"line":317,"column":9},"end":{"line":317,"column":26}},{"start":{"line":318,"column":10},"end":{"line":318,"column":32}},{"start":{"line":318,"column":36},"end":{"line":318,"column":75}}]},"55":{"line":322,"type":"binary-expr","locations":[{"start":{"line":322,"column":9},"end":{"line":322,"column":31}},{"start":{"line":322,"column":35},"end":{"line":322,"column":75}}]},"56":{"line":326,"type":"binary-expr","locations":[{"start":{"line":326,"column":9},"end":{"line":326,"column":30}},{"start":{"line":326,"column":34},"end":{"line":326,"column":71}}]},"57":{"line":330,"type":"binary-expr","locations":[{"start":{"line":330,"column":9},"end":{"line":330,"column":30}},{"start":{"line":330,"column":34},"end":{"line":330,"column":72}}]}},"code":["// This is (almost) directly from Node.js utils","// https://github.com/joyent/node/blob/f8c335d0caf47f16d31413f89aa28eda3878e3aa/lib/util.js","","var getName = require('./getName');","var getProperties = require('./getProperties');","var getEnumerableProperties = require('./getEnumerableProperties');","","module.exports = inspect;","","/**"," * Echos the value of a value. Trys to print the value out"," * in the best way possible given the different types."," *"," * @param {Object} obj The object to print out."," * @param {Boolean} showHidden Flag that shows hidden (not enumerable)"," *    properties of objects."," * @param {Number} depth Depth in which to descend in object. Default is 2."," * @param {Boolean} colors Flag to turn on ANSI escape codes to color the"," *    output. Default is false (no coloring)."," * @namespace Utils"," * @name inspect"," */","function inspect(obj, showHidden, depth, colors) {","  var ctx = {","    showHidden: showHidden,","    seen: [],","    stylize: function (str) { return str; }","  };","  return formatValue(ctx, obj, (typeof depth === 'undefined' ? 2 : depth));","}","","// Returns true if object is a DOM element.","var isDOMElement = function (object) {","  if (typeof HTMLElement === 'object') {","    return object instanceof HTMLElement;","  } else {","    return object &&","      typeof object === 'object' &&","      object.nodeType === 1 &&","      typeof object.nodeName === 'string';","  }","};","","function formatValue(ctx, value, recurseTimes) {","  // Provide a hook for user-specified inspect functions.","  // Check that value is an object with an inspect function on it","  if (value && typeof value.inspect === 'function' &&","      // Filter out the util module, it's inspect function is special","      value.inspect !== exports.inspect &&","      // Also filter out any prototype objects using the circular check.","      !(value.constructor && value.constructor.prototype === value)) {","    var ret = value.inspect(recurseTimes);","    if (typeof ret !== 'string') {","      ret = formatValue(ctx, ret, recurseTimes);","    }","    return ret;","  }","","  // Primitive types cannot have properties","  var primitive = formatPrimitive(ctx, value);","  if (primitive) {","    return primitive;","  }","","  // If this is a DOM element, try to get the outer HTML.","  if (isDOMElement(value)) {","    if ('outerHTML' in value) {","      return value.outerHTML;","      // This value does not have an outerHTML attribute,","      //   it could still be an XML element","    } else {","      // Attempt to serialize it","      try {","        if (document.xmlVersion) {","          var xmlSerializer = new XMLSerializer();","          return xmlSerializer.serializeToString(value);","        } else {","          // Firefox 11- do not support outerHTML","          //   It does, however, support innerHTML","          //   Use the following to render the element","          var ns = \"http://www.w3.org/1999/xhtml\";","          var container = document.createElementNS(ns, '_');","","          container.appendChild(value.cloneNode(false));","          html = container.innerHTML","            .replace('><', '>' + value.innerHTML + '<');","          container.innerHTML = '';","          return html;","        }","      } catch (err) {","        // This could be a non-native DOM implementation,","        //   continue with the normal flow:","        //   printing the element as if it is an object.","      }","    }","  }","","  // Look up the keys of the object.","  var visibleKeys = getEnumerableProperties(value);","  var keys = ctx.showHidden ? getProperties(value) : visibleKeys;","","  // Some type of object without properties can be shortcutted.","  // In IE, errors have a single `stack` property, or if they are vanilla `Error`,","  // a `stack` plus `description` property; ignore those for consistency.","  if (keys.length === 0 || (isError(value) && (","      (keys.length === 1 && keys[0] === 'stack') ||","      (keys.length === 2 && keys[0] === 'description' && keys[1] === 'stack')","     ))) {","    if (typeof value === 'function') {","      var name = getName(value);","      var nameSuffix = name ? ': ' + name : '';","      return ctx.stylize('[Function' + nameSuffix + ']', 'special');","    }","    if (isRegExp(value)) {","      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');","    }","    if (isDate(value)) {","      return ctx.stylize(Date.prototype.toUTCString.call(value), 'date');","    }","    if (isError(value)) {","      return formatError(value);","    }","  }","","  var base = '', array = false, braces = ['{', '}'];","","  // Make Array say that they are Array","  if (isArray(value)) {","    array = true;","    braces = ['[', ']'];","  }","","  // Make functions say that they are functions","  if (typeof value === 'function') {","    var name = getName(value);","    var nameSuffix = name ? ': ' + name : '';","    base = ' [Function' + nameSuffix + ']';","  }","","  // Make RegExps say that they are RegExps","  if (isRegExp(value)) {","    base = ' ' + RegExp.prototype.toString.call(value);","  }","","  // Make dates with properties first say the date","  if (isDate(value)) {","    base = ' ' + Date.prototype.toUTCString.call(value);","  }","","  // Make error with message first say the error","  if (isError(value)) {","    return formatError(value);","  }","","  if (keys.length === 0 && (!array || value.length == 0)) {","    return braces[0] + base + braces[1];","  }","","  if (recurseTimes < 0) {","    if (isRegExp(value)) {","      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');","    } else {","      return ctx.stylize('[Object]', 'special');","    }","  }","","  ctx.seen.push(value);","","  var output;","  if (array) {","    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);","  } else {","    output = keys.map(function(key) {","      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);","    });","  }","","  ctx.seen.pop();","","  return reduceToSingleString(output, base, braces);","}","","","function formatPrimitive(ctx, value) {","  switch (typeof value) {","    case 'undefined':","      return ctx.stylize('undefined', 'undefined');","","    case 'string':","      var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')","                                               .replace(/'/g, \"\\\\'\")","                                               .replace(/\\\\\"/g, '\"') + '\\'';","      return ctx.stylize(simple, 'string');","","    case 'number':","      if (value === 0 && (1/value) === -Infinity) {","        return ctx.stylize('-0', 'number');","      }","      return ctx.stylize('' + value, 'number');","","    case 'boolean':","      return ctx.stylize('' + value, 'boolean');","  }","  // For some reason typeof null is \"object\", so special case here.","  if (value === null) {","    return ctx.stylize('null', 'null');","  }","}","","","function formatError(value) {","  return '[' + Error.prototype.toString.call(value) + ']';","}","","","function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {","  var output = [];","  for (var i = 0, l = value.length; i < l; ++i) {","    if (Object.prototype.hasOwnProperty.call(value, String(i))) {","      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,","          String(i), true));","    } else {","      output.push('');","    }","  }","  keys.forEach(function(key) {","    if (!key.match(/^\\d+$/)) {","      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,","          key, true));","    }","  });","  return output;","}","","","function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {","  var name, str;","  if (value.__lookupGetter__) {","    if (value.__lookupGetter__(key)) {","      if (value.__lookupSetter__(key)) {","        str = ctx.stylize('[Getter/Setter]', 'special');","      } else {","        str = ctx.stylize('[Getter]', 'special');","      }","    } else {","      if (value.__lookupSetter__(key)) {","        str = ctx.stylize('[Setter]', 'special');","      }","    }","  }","  if (visibleKeys.indexOf(key) < 0) {","    name = '[' + key + ']';","  }","  if (!str) {","    if (ctx.seen.indexOf(value[key]) < 0) {","      if (recurseTimes === null) {","        str = formatValue(ctx, value[key], null);","      } else {","        str = formatValue(ctx, value[key], recurseTimes - 1);","      }","      if (str.indexOf('\\n') > -1) {","        if (array) {","          str = str.split('\\n').map(function(line) {","            return '  ' + line;","          }).join('\\n').substr(2);","        } else {","          str = '\\n' + str.split('\\n').map(function(line) {","            return '   ' + line;","          }).join('\\n');","        }","      }","    } else {","      str = ctx.stylize('[Circular]', 'special');","    }","  }","  if (typeof name === 'undefined') {","    if (array && key.match(/^\\d+$/)) {","      return str;","    }","    name = JSON.stringify('' + key);","    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {","      name = name.substr(1, name.length - 2);","      name = ctx.stylize(name, 'name');","    } else {","      name = name.replace(/'/g, \"\\\\'\")","                 .replace(/\\\\\"/g, '\"')","                 .replace(/(^\"|\"$)/g, \"'\");","      name = ctx.stylize(name, 'string');","    }","  }","","  return name + ': ' + str;","}","","","function reduceToSingleString(output, base, braces) {","  var numLinesEst = 0;","  var length = output.reduce(function(prev, cur) {","    numLinesEst++;","    if (cur.indexOf('\\n') >= 0) numLinesEst++;","    return prev + cur.length + 1;","  }, 0);","","  if (length > 60) {","    return braces[0] +","           (base === '' ? '' : base + '\\n ') +","           ' ' +","           output.join(',\\n  ') +","           ' ' +","           braces[1];","  }","","  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];","}","","function isArray(ar) {","  return Array.isArray(ar) ||","         (typeof ar === 'object' && objectToString(ar) === '[object Array]');","}","","function isRegExp(re) {","  return typeof re === 'object' && objectToString(re) === '[object RegExp]';","}","","function isDate(d) {","  return typeof d === 'object' && objectToString(d) === '[object Date]';","}","","function isError(e) {","  return typeof e === 'object' && objectToString(e) === '[object Error]';","}","","function objectToString(o) {","  return Object.prototype.toString.call(o);","}",""],"l":{"4":1,"5":1,"6":1,"8":1,"23":1,"24":0,"27":0,"29":0,"33":1,"34":0,"35":0,"37":0,"44":1,"47":0,"52":0,"53":0,"54":0,"56":0,"60":0,"61":0,"62":0,"66":0,"67":0,"68":0,"73":0,"74":0,"75":0,"76":0,"81":0,"82":0,"84":0,"85":0,"87":0,"88":0,"99":0,"100":0,"105":0,"109":0,"110":0,"111":0,"112":0,"114":0,"115":0,"117":0,"118":0,"120":0,"121":0,"125":0,"128":0,"129":0,"130":0,"134":0,"135":0,"136":0,"137":0,"141":0,"142":0,"146":0,"147":0,"151":0,"152":0,"155":0,"156":0,"159":0,"160":0,"161":0,"163":0,"167":0,"169":0,"170":0,"171":0,"173":0,"174":0,"178":0,"180":0,"184":1,"185":0,"187":0,"190":0,"193":0,"196":0,"197":0,"199":0,"202":0,"205":0,"206":0,"211":1,"212":0,"216":1,"217":0,"218":0,"219":0,"220":0,"223":0,"226":0,"227":0,"228":0,"232":0,"236":1,"237":0,"238":0,"239":0,"240":0,"241":0,"243":0,"246":0,"247":0,"251":0,"252":0,"254":0,"255":0,"256":0,"257":0,"259":0,"261":0,"262":0,"263":0,"264":0,"267":0,"268":0,"273":0,"276":0,"277":0,"278":0,"280":0,"281":0,"282":0,"283":0,"285":0,"288":0,"292":0,"296":1,"297":0,"298":0,"299":0,"300":0,"301":0,"304":0,"305":0,"313":0,"316":1,"317":0,"321":1,"322":0,"325":1,"326":0,"329":1,"330":0,"333":1,"334":0}},"/home/travis/build/npmtest/node-npmtest-chai/chai/lib/chai/utils/getName.js":{"path":"/home/travis/build/npmtest/node-npmtest-chai/chai/lib/chai/utils/getName.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":17,"loc":{"start":{"line":17,"column":17},"end":{"line":17,"column":33}}}},"statementMap":{"1":{"start":{"line":17,"column":0},"end":{"line":22,"column":2}},"2":{"start":{"line":18,"column":2},"end":{"line":18,"column":34}},"3":{"start":{"line":18,"column":17},"end":{"line":18,"column":34}},"4":{"start":{"line":20,"column":2},"end":{"line":20,"column":50}},"5":{"start":{"line":21,"column":2},"end":{"line":21,"column":43}}},"branchMap":{"1":{"line":18,"type":"if","locations":[{"start":{"line":18,"column":2},"end":{"line":18,"column":2}},{"start":{"line":18,"column":2},"end":{"line":18,"column":2}}]},"2":{"line":21,"type":"cond-expr","locations":[{"start":{"line":21,"column":29},"end":{"line":21,"column":37}},{"start":{"line":21,"column":40},"end":{"line":21,"column":42}}]},"3":{"line":21,"type":"binary-expr","locations":[{"start":{"line":21,"column":9},"end":{"line":21,"column":14}},{"start":{"line":21,"column":18},"end":{"line":21,"column":26}}]}},"code":["/*!"," * Chai - getName utility"," * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>"," * MIT Licensed"," */","","/**"," * # getName(func)"," *"," * Gets the name of a function, in a cross-browser way."," *"," * @param {Function} a function (usually a constructor)"," * @namespace Utils"," * @name getName"," */","","module.exports = function (func) {","  if (func.name) return func.name;","","  var match = /^\\s?function ([^(]*)\\(/.exec(func);","  return match && match[1] ? match[1] : \"\";","};",""],"l":{"17":1,"18":0,"20":0,"21":0}},"/home/travis/build/npmtest/node-npmtest-chai/chai/lib/chai/utils/getProperties.js":{"path":"/home/travis/build/npmtest/node-npmtest-chai/chai/lib/chai/utils/getProperties.js","s":{"1":1,"2":0,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0},"b":{"1":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"getProperties","line":20,"loc":{"start":{"line":20,"column":17},"end":{"line":20,"column":48}}},"2":{"name":"addProperty","line":23,"loc":{"start":{"line":23,"column":2},"end":{"line":23,"column":33}}}},"statementMap":{"1":{"start":{"line":20,"column":0},"end":{"line":36,"column":2}},"2":{"start":{"line":21,"column":2},"end":{"line":21,"column":50}},"3":{"start":{"line":23,"column":2},"end":{"line":27,"column":3}},"4":{"start":{"line":24,"column":4},"end":{"line":26,"column":5}},"5":{"start":{"line":25,"column":6},"end":{"line":25,"column":28}},"6":{"start":{"line":29,"column":2},"end":{"line":29,"column":44}},"7":{"start":{"line":30,"column":2},"end":{"line":33,"column":3}},"8":{"start":{"line":31,"column":4},"end":{"line":31,"column":59}},"9":{"start":{"line":32,"column":4},"end":{"line":32,"column":41}},"10":{"start":{"line":35,"column":2},"end":{"line":35,"column":16}}},"branchMap":{"1":{"line":24,"type":"if","locations":[{"start":{"line":24,"column":4},"end":{"line":24,"column":4}},{"start":{"line":24,"column":4},"end":{"line":24,"column":4}}]}},"code":["/*!"," * Chai - getProperties utility"," * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>"," * MIT Licensed"," */","","/**"," * ### .getProperties(object)"," *"," * This allows the retrieval of property names of an object, enumerable or not,"," * inherited or not."," *"," * @param {Object} object"," * @returns {Array}"," * @namespace Utils"," * @name getProperties"," * @api public"," */","","module.exports = function getProperties(object) {","  var result = Object.getOwnPropertyNames(object);","","  function addProperty(property) {","    if (result.indexOf(property) === -1) {","      result.push(property);","    }","  }","","  var proto = Object.getPrototypeOf(object);","  while (proto !== null) {","    Object.getOwnPropertyNames(proto).forEach(addProperty);","    proto = Object.getPrototypeOf(proto);","  }","","  return result;","};",""],"l":{"20":1,"21":0,"23":1,"24":0,"25":0,"29":0,"30":0,"31":0,"32":0,"35":0}},"/home/travis/build/npmtest/node-npmtest-chai/chai/lib/chai/utils/getEnumerableProperties.js":{"path":"/home/travis/build/npmtest/node-npmtest-chai/chai/lib/chai/utils/getEnumerableProperties.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"getEnumerableProperties","line":20,"loc":{"start":{"line":20,"column":17},"end":{"line":20,"column":58}}}},"statementMap":{"1":{"start":{"line":20,"column":0},"end":{"line":26,"column":2}},"2":{"start":{"line":21,"column":2},"end":{"line":21,"column":18}},"3":{"start":{"line":22,"column":2},"end":{"line":24,"column":3}},"4":{"start":{"line":23,"column":4},"end":{"line":23,"column":22}},"5":{"start":{"line":25,"column":2},"end":{"line":25,"column":16}}},"branchMap":{},"code":["/*!"," * Chai - getEnumerableProperties utility"," * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>"," * MIT Licensed"," */","","/**"," * ### .getEnumerableProperties(object)"," *"," * This allows the retrieval of enumerable property names of an object,"," * inherited or not."," *"," * @param {Object} object"," * @returns {Array}"," * @namespace Utils"," * @name getEnumerableProperties"," * @api public"," */","","module.exports = function getEnumerableProperties(object) {","  var result = [];","  for (var name in object) {","    result.push(name);","  }","  return result;","};",""],"l":{"20":1,"21":0,"22":0,"23":0,"25":0}},"/home/travis/build/npmtest/node-npmtest-chai/chai/lib/chai/utils/objDisplay.js":{"path":"/home/travis/build/npmtest/node-npmtest-chai/chai/lib/chai/utils/objDisplay.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":27,"loc":{"start":{"line":27,"column":17},"end":{"line":27,"column":32}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":11,"column":35}},"2":{"start":{"line":12,"column":0},"end":{"line":12,"column":34}},"3":{"start":{"line":27,"column":0},"end":{"line":50,"column":2}},"4":{"start":{"line":28,"column":2},"end":{"line":29,"column":49}},"5":{"start":{"line":31,"column":2},"end":{"line":49,"column":3}},"6":{"start":{"line":32,"column":4},"end":{"line":46,"column":5}},"7":{"start":{"line":33,"column":6},"end":{"line":35,"column":41}},"8":{"start":{"line":36,"column":11},"end":{"line":46,"column":5}},"9":{"start":{"line":37,"column":6},"end":{"line":37,"column":45}},"10":{"start":{"line":38,"column":11},"end":{"line":46,"column":5}},"11":{"start":{"line":39,"column":6},"end":{"line":42,"column":28}},"12":{"start":{"line":43,"column":6},"end":{"line":43,"column":41}},"13":{"start":{"line":45,"column":6},"end":{"line":45,"column":17}},"14":{"start":{"line":48,"column":4},"end":{"line":48,"column":15}}},"branchMap":{"1":{"line":31,"type":"if","locations":[{"start":{"line":31,"column":2},"end":{"line":31,"column":2}},{"start":{"line":31,"column":2},"end":{"line":31,"column":2}}]},"2":{"line":31,"type":"binary-expr","locations":[{"start":{"line":31,"column":6},"end":{"line":31,"column":30}},{"start":{"line":31,"column":34},"end":{"line":31,"column":72}}]},"3":{"line":32,"type":"if","locations":[{"start":{"line":32,"column":4},"end":{"line":32,"column":4}},{"start":{"line":32,"column":4},"end":{"line":32,"column":4}}]},"4":{"line":33,"type":"cond-expr","locations":[{"start":{"line":34,"column":10},"end":{"line":34,"column":22}},{"start":{"line":35,"column":10},"end":{"line":35,"column":40}}]},"5":{"line":33,"type":"binary-expr","locations":[{"start":{"line":33,"column":13},"end":{"line":33,"column":22}},{"start":{"line":33,"column":26},"end":{"line":33,"column":41}}]},"6":{"line":36,"type":"if","locations":[{"start":{"line":36,"column":11},"end":{"line":36,"column":11}},{"start":{"line":36,"column":11},"end":{"line":36,"column":11}}]},"7":{"line":38,"type":"if","locations":[{"start":{"line":38,"column":11},"end":{"line":38,"column":11}},{"start":{"line":38,"column":11},"end":{"line":38,"column":11}}]},"8":{"line":40,"type":"cond-expr","locations":[{"start":{"line":41,"column":12},"end":{"line":41,"column":50}},{"start":{"line":42,"column":12},"end":{"line":42,"column":27}}]}},"code":["/*!"," * Chai - flag utility"," * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>"," * MIT Licensed"," */","","/*!"," * Module dependancies"," */","","var inspect = require('./inspect');","var config = require('../config');","","/**"," * ### .objDisplay (object)"," *"," * Determines if an object or an array matches"," * criteria to be inspected in-line for error"," * messages or should be truncated."," *"," * @param {Mixed} javascript object to inspect"," * @name objDisplay"," * @namespace Utils"," * @api public"," */","","module.exports = function (obj) {","  var str = inspect(obj)","    , type = Object.prototype.toString.call(obj);","","  if (config.truncateThreshold && str.length >= config.truncateThreshold) {","    if (type === '[object Function]') {","      return !obj.name || obj.name === ''","        ? '[Function]'","        : '[Function: ' + obj.name + ']';","    } else if (type === '[object Array]') {","      return '[ Array(' + obj.length + ') ]';","    } else if (type === '[object Object]') {","      var keys = Object.keys(obj)","        , kstr = keys.length > 2","          ? keys.splice(0, 2).join(', ') + ', ...'","          : keys.join(', ');","      return '{ Object (' + kstr + ') }';","    } else {","      return str;","    }","  } else {","    return str;","  }","};",""],"l":{"11":1,"12":1,"27":1,"28":0,"31":0,"32":0,"33":0,"36":0,"37":0,"38":0,"39":0,"43":0,"45":0,"48":0}},"/home/travis/build/npmtest/node-npmtest-chai/chai/lib/chai/config.js":{"path":"/home/travis/build/npmtest/node-npmtest-chai/chai/lib/chai/config.js","s":{"1":1},"b":{},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":55,"column":2}}},"branchMap":{},"code":["module.exports = {","","  /**","   * ### config.includeStack","   *","   * User configurable property, influences whether stack trace","   * is included in Assertion error message. Default of false","   * suppresses stack trace in the error message.","   *","   *     chai.config.includeStack = true;  // enable stack on error","   *","   * @param {Boolean}","   * @api public","   */","","   includeStack: false,","","  /**","   * ### config.showDiff","   *","   * User configurable property, influences whether or not","   * the `showDiff` flag should be included in the thrown","   * AssertionErrors. `false` will always be `false`; `true`","   * will be true when the assertion has requested a diff","   * be shown.","   *","   * @param {Boolean}","   * @api public","   */","","  showDiff: true,","","  /**","   * ### config.truncateThreshold","   *","   * User configurable property, sets length threshold for actual and","   * expected values in assertion errors. If this threshold is exceeded, for","   * example for large data structures, the value is replaced with something","   * like `[ Array(3) ]` or `{ Object (prop1, prop2) }`.","   *","   * Set it to zero if you want to disable truncating altogether.","   *","   * This is especially userful when doing assertions on arrays: having this","   * set to a reasonable large value makes the failure messages readily","   * inspectable.","   *","   *     chai.config.truncateThreshold = 0;  // disable truncating","   *","   * @param {Number}","   * @api public","   */","","  truncateThreshold: 40","","};",""],"l":{"1":1}},"/home/travis/build/npmtest/node-npmtest-chai/chai/lib/chai/utils/transferFlags.js":{"path":"/home/travis/build/npmtest/node-npmtest-chai/chai/lib/chai/utils/transferFlags.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0,0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":30,"loc":{"start":{"line":30,"column":17},"end":{"line":30,"column":58}}}},"statementMap":{"1":{"start":{"line":30,"column":0},"end":{"line":45,"column":2}},"2":{"start":{"line":31,"column":2},"end":{"line":31,"column":77}},"3":{"start":{"line":33,"column":2},"end":{"line":35,"column":3}},"4":{"start":{"line":34,"column":4},"end":{"line":34,"column":41}},"5":{"start":{"line":37,"column":2},"end":{"line":37,"column":58}},"6":{"start":{"line":39,"column":2},"end":{"line":44,"column":3}},"7":{"start":{"line":40,"column":4},"end":{"line":43,"column":5}},"8":{"start":{"line":42,"column":6},"end":{"line":42,"column":41}}},"branchMap":{"1":{"line":31,"type":"binary-expr","locations":[{"start":{"line":31,"column":14},"end":{"line":31,"column":31}},{"start":{"line":31,"column":36},"end":{"line":31,"column":75}}]},"2":{"line":33,"type":"if","locations":[{"start":{"line":33,"column":2},"end":{"line":33,"column":2}},{"start":{"line":33,"column":2},"end":{"line":33,"column":2}}]},"3":{"line":37,"type":"cond-expr","locations":[{"start":{"line":37,"column":40},"end":{"line":37,"column":50}},{"start":{"line":37,"column":53},"end":{"line":37,"column":57}}]},"4":{"line":40,"type":"if","locations":[{"start":{"line":40,"column":4},"end":{"line":40,"column":4}},{"start":{"line":40,"column":4},"end":{"line":40,"column":4}}]},"5":{"line":40,"type":"binary-expr","locations":[{"start":{"line":40,"column":8},"end":{"line":40,"column":18}},{"start":{"line":41,"column":9},"end":{"line":41,"column":26}},{"start":{"line":41,"column":30},"end":{"line":41,"column":45}},{"start":{"line":41,"column":49},"end":{"line":41,"column":66}}]}},"code":["/*!"," * Chai - transferFlags utility"," * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>"," * MIT Licensed"," */","","/**"," * ### transferFlags(assertion, object, includeAll = true)"," *"," * Transfer all the flags for `assertion` to `object`. If"," * `includeAll` is set to `false`, then the base Chai"," * assertion flags (namely `object`, `ssfi`, and `message`)"," * will not be transferred."," *"," *"," *     var newAssertion = new Assertion();"," *     utils.transferFlags(assertion, newAssertion);"," *"," *     var anotherAsseriton = new Assertion(myObj);"," *     utils.transferFlags(assertion, anotherAssertion, false);"," *"," * @param {Assertion} assertion the assertion to transfer the flags from"," * @param {Object} object the object to transfer the flags to; usually a new assertion"," * @param {Boolean} includeAll"," * @namespace Utils"," * @name transferFlags"," * @api private"," */","","module.exports = function (assertion, object, includeAll) {","  var flags = assertion.__flags || (assertion.__flags = Object.create(null));","","  if (!object.__flags) {","    object.__flags = Object.create(null);","  }","","  includeAll = arguments.length === 3 ? includeAll : true;","","  for (var flag in flags) {","    if (includeAll ||","        (flag !== 'object' && flag !== 'ssfi' && flag != 'message')) {","      object.__flags[flag] = flags[flag];","    }","  }","};",""],"l":{"30":1,"31":0,"33":0,"34":0,"37":0,"39":0,"40":0,"42":0}},"/home/travis/build/npmtest/node-npmtest-chai/chai/lib/chai/utils/getPathValue.js":{"path":"/home/travis/build/npmtest/node-npmtest-chai/chai/lib/chai/utils/getPathValue.js","s":{"1":1,"2":1,"3":0,"4":0},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":40,"loc":{"start":{"line":40,"column":17},"end":{"line":40,"column":37}}}},"statementMap":{"1":{"start":{"line":8,"column":0},"end":{"line":8,"column":43}},"2":{"start":{"line":40,"column":0},"end":{"line":43,"column":2}},"3":{"start":{"line":41,"column":2},"end":{"line":41,"column":36}},"4":{"start":{"line":42,"column":2},"end":{"line":42,"column":20}}},"branchMap":{},"code":["/*!"," * Chai - getPathValue utility"," * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>"," * @see https://github.com/logicalparadox/filtr"," * MIT Licensed"," */","","var getPathInfo = require('./getPathInfo');","","/**"," * ### .getPathValue(path, object)"," *"," * This allows the retrieval of values in an"," * object given a string path."," *"," *     var obj = {"," *         prop1: {"," *             arr: ['a', 'b', 'c']"," *           , str: 'Hello'"," *         }"," *       , prop2: {"," *             arr: [ { nested: 'Universe' } ]"," *           , str: 'Hello again!'"," *         }"," *     }"," *"," * The following would be the results."," *"," *     getPathValue('prop1.str', obj); // Hello"," *     getPathValue('prop1.att[2]', obj); // b"," *     getPathValue('prop2.arr[0].nested', obj); // Universe"," *"," * @param {String} path"," * @param {Object} object"," * @returns {Object} value or `undefined`"," * @namespace Utils"," * @name getPathValue"," * @api public"," */","module.exports = function(path, obj) {","  var info = getPathInfo(path, obj);","  return info.value;","};",""],"l":{"8":1,"40":1,"41":0,"42":0}},"/home/travis/build/npmtest/node-npmtest-chai/chai/lib/chai/utils/getPathInfo.js":{"path":"/home/travis/build/npmtest/node-npmtest-chai/chai/lib/chai/utils/getPathInfo.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":1,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":1,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"getPathInfo","line":31,"loc":{"start":{"line":31,"column":17},"end":{"line":31,"column":49}}},"2":{"name":"parsePath","line":65,"loc":{"start":{"line":65,"column":0},"end":{"line":65,"column":26}}},"3":{"name":"(anonymous_3)","line":68,"loc":{"start":{"line":68,"column":19},"end":{"line":68,"column":36}}},"4":{"name":"_getPathValue","line":92,"loc":{"start":{"line":92,"column":0},"end":{"line":92,"column":44}}}},"statementMap":{"1":{"start":{"line":7,"column":0},"end":{"line":7,"column":43}},"2":{"start":{"line":31,"column":0},"end":{"line":43,"column":2}},"3":{"start":{"line":32,"column":2},"end":{"line":33,"column":39}},"4":{"start":{"line":35,"column":2},"end":{"line":39,"column":4}},"5":{"start":{"line":40,"column":2},"end":{"line":40,"column":52}},"6":{"start":{"line":42,"column":2},"end":{"line":42,"column":14}},"7":{"start":{"line":65,"column":0},"end":{"line":74,"column":1}},"8":{"start":{"line":66,"column":2},"end":{"line":67,"column":43}},"9":{"start":{"line":68,"column":2},"end":{"line":73,"column":5}},"10":{"start":{"line":69,"column":4},"end":{"line":70,"column":30}},"11":{"start":{"line":71,"column":4},"end":{"line":72,"column":59}},"12":{"start":{"line":71,"column":14},"end":{"line":71,"column":48}},"13":{"start":{"line":72,"column":9},"end":{"line":72,"column":59}},"14":{"start":{"line":92,"column":0},"end":{"line":111,"column":1}},"15":{"start":{"line":93,"column":2},"end":{"line":94,"column":10}},"16":{"start":{"line":96,"column":2},"end":{"line":96,"column":56}},"17":{"start":{"line":98,"column":2},"end":{"line":109,"column":3}},"18":{"start":{"line":99,"column":4},"end":{"line":99,"column":25}},"19":{"start":{"line":100,"column":4},"end":{"line":108,"column":5}},"20":{"start":{"line":101,"column":6},"end":{"line":104,"column":26}},"21":{"start":{"line":102,"column":8},"end":{"line":102,"column":26}},"22":{"start":{"line":103,"column":11},"end":{"line":104,"column":26}},"23":{"start":{"line":104,"column":8},"end":{"line":104,"column":26}},"24":{"start":{"line":105,"column":6},"end":{"line":105,"column":34}},"25":{"start":{"line":105,"column":24},"end":{"line":105,"column":34}},"26":{"start":{"line":107,"column":6},"end":{"line":107,"column":22}},"27":{"start":{"line":110,"column":2},"end":{"line":110,"column":13}}},"branchMap":{"1":{"line":36,"type":"cond-expr","locations":[{"start":{"line":36,"column":32},"end":{"line":36,"column":77}},{"start":{"line":36,"column":80},"end":{"line":36,"column":83}}]},"2":{"line":37,"type":"binary-expr","locations":[{"start":{"line":37,"column":10},"end":{"line":37,"column":16}},{"start":{"line":37,"column":20},"end":{"line":37,"column":26}}]},"3":{"line":71,"type":"if","locations":[{"start":{"line":71,"column":4},"end":{"line":71,"column":4}},{"start":{"line":71,"column":4},"end":{"line":71,"column":4}}]},"4":{"line":96,"type":"cond-expr","locations":[{"start":{"line":96,"column":33},"end":{"line":96,"column":46}},{"start":{"line":96,"column":49},"end":{"line":96,"column":54}}]},"5":{"line":100,"type":"if","locations":[{"start":{"line":100,"column":4},"end":{"line":100,"column":4}},{"start":{"line":100,"column":4},"end":{"line":100,"column":4}}]},"6":{"line":101,"type":"if","locations":[{"start":{"line":101,"column":6},"end":{"line":101,"column":6}},{"start":{"line":101,"column":6},"end":{"line":101,"column":6}}]},"7":{"line":103,"type":"if","locations":[{"start":{"line":103,"column":11},"end":{"line":103,"column":11}},{"start":{"line":103,"column":11},"end":{"line":103,"column":11}}]},"8":{"line":105,"type":"if","locations":[{"start":{"line":105,"column":6},"end":{"line":105,"column":6}},{"start":{"line":105,"column":6},"end":{"line":105,"column":6}}]}},"code":["/*!"," * Chai - getPathInfo utility"," * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>"," * MIT Licensed"," */","","var hasProperty = require('./hasProperty');","","/**"," * ### .getPathInfo(path, object)"," *"," * This allows the retrieval of property info in an"," * object given a string path."," *"," * The path info consists of an object with the"," * following properties:"," *"," * * parent - The parent object of the property referenced by `path`"," * * name - The name of the final property, a number if it was an array indexer"," * * value - The value of the property, if it exists, otherwise `undefined`"," * * exists - Whether the property exists or not"," *"," * @param {String} path"," * @param {Object} object"," * @returns {Object} info"," * @namespace Utils"," * @name getPathInfo"," * @api public"," */","","module.exports = function getPathInfo(path, obj) {","  var parsed = parsePath(path),","      last = parsed[parsed.length - 1];","","  var info = {","    parent: parsed.length > 1 ? _getPathValue(parsed, obj, parsed.length - 1) : obj,","    name: last.p || last.i,","    value: _getPathValue(parsed, obj)","  };","  info.exists = hasProperty(info.name, info.parent);","","  return info;","};","","","/*!"," * ## parsePath(path)"," *"," * Helper function used to parse string object"," * paths. Use in conjunction with `_getPathValue`."," *"," *      var parsed = parsePath('myobject.property.subprop');"," *"," * ### Paths:"," *"," * * Can be as near infinitely deep and nested"," * * Arrays are also valid using the formal `myobject.document[3].property`."," * * Literal dots and brackets (not delimiter) must be backslash-escaped."," *"," * @param {String} path"," * @returns {Object} parsed"," * @api private"," */","","function parsePath (path) {","  var str = path.replace(/([^\\\\])\\[/g, '$1.[')","    , parts = str.match(/(\\\\\\.|[^.]+?)+/g);","  return parts.map(function (value) {","    var re = /^\\[(\\d+)\\]$/","      , mArr = re.exec(value);","    if (mArr) return { i: parseFloat(mArr[1]) };","    else return { p: value.replace(/\\\\([.\\[\\]])/g, '$1') };","  });","}","","","/*!"," * ## _getPathValue(parsed, obj)"," *"," * Helper companion function for `.parsePath` that returns"," * the value located at the parsed address."," *"," *      var value = getPathValue(parsed, obj);"," *"," * @param {Object} parsed definition from `parsePath`."," * @param {Object} object to search against"," * @param {Number} object to search against"," * @returns {Object|Undefined} value"," * @api private"," */","","function _getPathValue (parsed, obj, index) {","  var tmp = obj","    , res;","","  index = (index === undefined ? parsed.length : index);","","  for (var i = 0, l = index; i < l; i++) {","    var part = parsed[i];","    if (tmp) {","      if ('undefined' !== typeof part.p)","        tmp = tmp[part.p];","      else if ('undefined' !== typeof part.i)","        tmp = tmp[part.i];","      if (i == (l - 1)) res = tmp;","    } else {","      res = undefined;","    }","  }","  return res;","}",""],"l":{"7":1,"31":1,"32":0,"35":0,"40":0,"42":0,"65":1,"66":0,"68":0,"69":0,"71":0,"72":0,"92":1,"93":0,"96":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"107":0,"110":0}},"/home/travis/build/npmtest/node-npmtest-chai/chai/lib/chai/utils/hasProperty.js":{"path":"/home/travis/build/npmtest/node-npmtest-chai/chai/lib/chai/utils/hasProperty.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"hasProperty","line":51,"loc":{"start":{"line":51,"column":17},"end":{"line":51,"column":49}}}},"statementMap":{"1":{"start":{"line":7,"column":0},"end":{"line":7,"column":34}},"2":{"start":{"line":46,"column":0},"end":{"line":49,"column":2}},"3":{"start":{"line":51,"column":0},"end":{"line":64,"column":2}},"4":{"start":{"line":52,"column":2},"end":{"line":52,"column":21}},"5":{"start":{"line":55,"column":2},"end":{"line":56,"column":17}},"6":{"start":{"line":56,"column":4},"end":{"line":56,"column":17}},"7":{"start":{"line":60,"column":2},"end":{"line":61,"column":32}},"8":{"start":{"line":61,"column":4},"end":{"line":61,"column":32}},"9":{"start":{"line":63,"column":2},"end":{"line":63,"column":21}}},"branchMap":{"1":{"line":55,"type":"if","locations":[{"start":{"line":55,"column":2},"end":{"line":55,"column":2}},{"start":{"line":55,"column":2},"end":{"line":55,"column":2}}]},"2":{"line":55,"type":"binary-expr","locations":[{"start":{"line":55,"column":5},"end":{"line":55,"column":18}},{"start":{"line":55,"column":22},"end":{"line":55,"column":40}}]},"3":{"line":60,"type":"if","locations":[{"start":{"line":60,"column":2},"end":{"line":60,"column":2}},{"start":{"line":60,"column":2},"end":{"line":60,"column":2}}]},"4":{"line":60,"type":"binary-expr","locations":[{"start":{"line":60,"column":5},"end":{"line":60,"column":17}},{"start":{"line":60,"column":21},"end":{"line":60,"column":44}}]}},"code":["/*!"," * Chai - hasProperty utility"," * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>"," * MIT Licensed"," */","","var type = require('type-detect');","","/**"," * ### .hasProperty(object, name)"," *"," * This allows checking whether an object has"," * named property or numeric array index."," *"," * Basically does the same thing as the `in`"," * operator but works properly with natives"," * and null/undefined values."," *"," *     var obj = {"," *         arr: ['a', 'b', 'c']"," *       , str: 'Hello'"," *     }"," *"," * The following would be the results."," *"," *     hasProperty('str', obj);  // true"," *     hasProperty('constructor', obj);  // true"," *     hasProperty('bar', obj);  // false"," *"," *     hasProperty('length', obj.str); // true"," *     hasProperty(1, obj.str);  // true"," *     hasProperty(5, obj.str);  // false"," *"," *     hasProperty('length', obj.arr);  // true"," *     hasProperty(2, obj.arr);  // true"," *     hasProperty(3, obj.arr);  // false"," *"," * @param {Objuect} object"," * @param {String|Number} name"," * @returns {Boolean} whether it exists"," * @namespace Utils"," * @name getPathInfo"," * @api public"," */","","var literals = {","    'number': Number","  , 'string': String","};","","module.exports = function hasProperty(name, obj) {","  var ot = type(obj);","","  // Bad Object, obviously no props at all","  if(ot === 'null' || ot === 'undefined')","    return false;","","  // The `in` operator does not work with certain literals","  // box these before the check","  if(literals[ot] && typeof obj !== 'object')","    obj = new literals[ot](obj);","","  return name in obj;","};",""],"l":{"7":1,"46":1,"51":1,"52":0,"55":0,"56":0,"60":0,"61":0,"63":0}},"/home/travis/build/npmtest/node-npmtest-chai/chai/lib/chai/utils/addProperty.js":{"path":"/home/travis/build/npmtest/node-npmtest-chai/chai/lib/chai/utils/addProperty.js","s":{"1":1,"2":1,"3":1,"4":31,"5":0,"6":0,"7":0,"8":0,"9":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":31,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":36,"loc":{"start":{"line":36,"column":17},"end":{"line":36,"column":46}}},"2":{"name":"addProperty","line":38,"loc":{"start":{"line":38,"column":11},"end":{"line":38,"column":34}}}},"statementMap":{"1":{"start":{"line":7,"column":0},"end":{"line":7,"column":34}},"2":{"start":{"line":8,"column":0},"end":{"line":8,"column":29}},"3":{"start":{"line":36,"column":0},"end":{"line":48,"column":2}},"4":{"start":{"line":37,"column":2},"end":{"line":47,"column":5}},"5":{"start":{"line":39,"column":8},"end":{"line":39,"column":42}},"6":{"start":{"line":40,"column":8},"end":{"line":41,"column":42}},"7":{"start":{"line":41,"column":10},"end":{"line":41,"column":42}},"8":{"start":{"line":43,"column":8},"end":{"line":43,"column":39}},"9":{"start":{"line":44,"column":8},"end":{"line":44,"column":52}}},"branchMap":{"1":{"line":40,"type":"if","locations":[{"start":{"line":40,"column":8},"end":{"line":40,"column":8}},{"start":{"line":40,"column":8},"end":{"line":40,"column":8}}]},"2":{"line":40,"type":"binary-expr","locations":[{"start":{"line":40,"column":12},"end":{"line":40,"column":20}},{"start":{"line":40,"column":24},"end":{"line":40,"column":53}}]},"3":{"line":44,"type":"cond-expr","locations":[{"start":{"line":44,"column":38},"end":{"line":44,"column":42}},{"start":{"line":44,"column":45},"end":{"line":44,"column":51}}]}},"code":["/*!"," * Chai - addProperty utility"," * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>"," * MIT Licensed"," */","","var config = require('../config');","var flag = require('./flag');","","/**"," * ### addProperty (ctx, name, getter)"," *"," * Adds a property to the prototype of an object."," *"," *     utils.addProperty(chai.Assertion.prototype, 'foo', function () {"," *       var obj = utils.flag(this, 'object');"," *       new chai.Assertion(obj).to.be.instanceof(Foo);"," *     });"," *"," * Can also be accessed directly from `chai.Assertion`."," *"," *     chai.Assertion.addProperty('foo', fn);"," *"," * Then can be used as any other assertion."," *"," *     expect(myFoo).to.be.foo;"," *"," * @param {Object} ctx object to which the property is added"," * @param {String} name of property to add"," * @param {Function} getter function to be used for name"," * @namespace Utils"," * @name addProperty"," * @api public"," */","","module.exports = function (ctx, name, getter) {","  Object.defineProperty(ctx, name,","    { get: function addProperty() {","        var old_ssfi = flag(this, 'ssfi');","        if (old_ssfi && config.includeStack === false)","          flag(this, 'ssfi', addProperty);","","        var result = getter.call(this);","        return result === undefined ? this : result;","      }","    , configurable: true","  });","};",""],"l":{"7":1,"8":1,"36":1,"37":31,"39":0,"40":0,"41":0,"43":0,"44":0}},"/home/travis/build/npmtest/node-npmtest-chai/chai/lib/chai/utils/addMethod.js":{"path":"/home/travis/build/npmtest/node-npmtest-chai/chai/lib/chai/utils/addMethod.js","s":{"1":1,"2":1,"3":1,"4":40,"5":0,"6":0,"7":0,"8":0,"9":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":40,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":36,"loc":{"start":{"line":36,"column":17},"end":{"line":36,"column":46}}},"2":{"name":"(anonymous_2)","line":37,"loc":{"start":{"line":37,"column":14},"end":{"line":37,"column":26}}}},"statementMap":{"1":{"start":{"line":7,"column":0},"end":{"line":7,"column":34}},"2":{"start":{"line":34,"column":0},"end":{"line":34,"column":29}},"3":{"start":{"line":36,"column":0},"end":{"line":44,"column":2}},"4":{"start":{"line":37,"column":2},"end":{"line":43,"column":4}},"5":{"start":{"line":38,"column":4},"end":{"line":38,"column":38}},"6":{"start":{"line":39,"column":4},"end":{"line":40,"column":36}},"7":{"start":{"line":40,"column":6},"end":{"line":40,"column":36}},"8":{"start":{"line":41,"column":4},"end":{"line":41,"column":47}},"9":{"start":{"line":42,"column":4},"end":{"line":42,"column":48}}},"branchMap":{"1":{"line":39,"type":"if","locations":[{"start":{"line":39,"column":4},"end":{"line":39,"column":4}},{"start":{"line":39,"column":4},"end":{"line":39,"column":4}}]},"2":{"line":39,"type":"binary-expr","locations":[{"start":{"line":39,"column":8},"end":{"line":39,"column":16}},{"start":{"line":39,"column":20},"end":{"line":39,"column":49}}]},"3":{"line":42,"type":"cond-expr","locations":[{"start":{"line":42,"column":34},"end":{"line":42,"column":38}},{"start":{"line":42,"column":41},"end":{"line":42,"column":47}}]}},"code":["/*!"," * Chai - addMethod utility"," * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>"," * MIT Licensed"," */","","var config = require('../config');","","/**"," * ### .addMethod (ctx, name, method)"," *"," * Adds a method to the prototype of an object."," *"," *     utils.addMethod(chai.Assertion.prototype, 'foo', function (str) {"," *       var obj = utils.flag(this, 'object');"," *       new chai.Assertion(obj).to.be.equal(str);"," *     });"," *"," * Can also be accessed directly from `chai.Assertion`."," *"," *     chai.Assertion.addMethod('foo', fn);"," *"," * Then can be used as any other assertion."," *"," *     expect(fooStr).to.be.foo('bar');"," *"," * @param {Object} ctx object to which the method is added"," * @param {String} name of method to add"," * @param {Function} method function to be used for name"," * @namespace Utils"," * @name addMethod"," * @api public"," */","var flag = require('./flag');","","module.exports = function (ctx, name, method) {","  ctx[name] = function () {","    var old_ssfi = flag(this, 'ssfi');","    if (old_ssfi && config.includeStack === false)","      flag(this, 'ssfi', ctx[name]);","    var result = method.apply(this, arguments);","    return result === undefined ? this : result;","  };","};",""],"l":{"7":1,"34":1,"36":1,"37":40,"38":0,"39":0,"40":0,"41":0,"42":0}},"/home/travis/build/npmtest/node-npmtest-chai/chai/lib/chai/utils/overwriteProperty.js":{"path":"/home/travis/build/npmtest/node-npmtest-chai/chai/lib/chai/utils/overwriteProperty.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"(anonymous_1)","line":41,"loc":{"start":{"line":41,"column":17},"end":{"line":41,"column":46}}},"2":{"name":"(anonymous_2)","line":43,"loc":{"start":{"line":43,"column":15},"end":{"line":43,"column":27}}},"3":{"name":"(anonymous_3)","line":49,"loc":{"start":{"line":49,"column":11},"end":{"line":49,"column":23}}}},"statementMap":{"1":{"start":{"line":41,"column":0},"end":{"line":55,"column":2}},"2":{"start":{"line":42,"column":2},"end":{"line":43,"column":30}},"3":{"start":{"line":45,"column":2},"end":{"line":46,"column":21}},"4":{"start":{"line":46,"column":4},"end":{"line":46,"column":21}},"5":{"start":{"line":48,"column":2},"end":{"line":54,"column":5}},"6":{"start":{"line":50,"column":8},"end":{"line":50,"column":47}},"7":{"start":{"line":51,"column":8},"end":{"line":51,"column":52}}},"branchMap":{"1":{"line":45,"type":"if","locations":[{"start":{"line":45,"column":2},"end":{"line":45,"column":2}},{"start":{"line":45,"column":2},"end":{"line":45,"column":2}}]},"2":{"line":45,"type":"binary-expr","locations":[{"start":{"line":45,"column":6},"end":{"line":45,"column":10}},{"start":{"line":45,"column":14},"end":{"line":45,"column":44}}]},"3":{"line":51,"type":"cond-expr","locations":[{"start":{"line":51,"column":38},"end":{"line":51,"column":42}},{"start":{"line":51,"column":45},"end":{"line":51,"column":51}}]}},"code":["/*!"," * Chai - overwriteProperty utility"," * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>"," * MIT Licensed"," */","","/**"," * ### overwriteProperty (ctx, name, fn)"," *"," * Overwites an already existing property getter and provides"," * access to previous value. Must return function to use as getter."," *"," *     utils.overwriteProperty(chai.Assertion.prototype, 'ok', function (_super) {"," *       return function () {"," *         var obj = utils.flag(this, 'object');"," *         if (obj instanceof Foo) {"," *           new chai.Assertion(obj.name).to.equal('bar');"," *         } else {"," *           _super.call(this);"," *         }"," *       }"," *     });"," *"," *"," * Can also be accessed directly from `chai.Assertion`."," *"," *     chai.Assertion.overwriteProperty('foo', fn);"," *"," * Then can be used as any other assertion."," *"," *     expect(myFoo).to.be.ok;"," *"," * @param {Object} ctx object whose property is to be overwritten"," * @param {String} name of property to overwrite"," * @param {Function} getter function that returns a getter function to be used for name"," * @namespace Utils"," * @name overwriteProperty"," * @api public"," */","","module.exports = function (ctx, name, getter) {","  var _get = Object.getOwnPropertyDescriptor(ctx, name)","    , _super = function () {};","","  if (_get && 'function' === typeof _get.get)","    _super = _get.get","","  Object.defineProperty(ctx, name,","    { get: function () {","        var result = getter(_super).call(this);","        return result === undefined ? this : result;","      }","    , configurable: true","  });","};",""],"l":{"41":1,"42":0,"45":0,"46":0,"48":0,"50":0,"51":0}},"/home/travis/build/npmtest/node-npmtest-chai/chai/lib/chai/utils/overwriteMethod.js":{"path":"/home/travis/build/npmtest/node-npmtest-chai/chai/lib/chai/utils/overwriteMethod.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"(anonymous_1)","line":41,"loc":{"start":{"line":41,"column":17},"end":{"line":41,"column":46}}},"2":{"name":"(anonymous_2)","line":43,"loc":{"start":{"line":43,"column":15},"end":{"line":43,"column":27}}},"3":{"name":"(anonymous_3)","line":48,"loc":{"start":{"line":48,"column":14},"end":{"line":48,"column":26}}}},"statementMap":{"1":{"start":{"line":41,"column":0},"end":{"line":52,"column":2}},"2":{"start":{"line":42,"column":2},"end":{"line":43,"column":44}},"3":{"start":{"line":43,"column":29},"end":{"line":43,"column":41}},"4":{"start":{"line":45,"column":2},"end":{"line":46,"column":21}},"5":{"start":{"line":46,"column":4},"end":{"line":46,"column":21}},"6":{"start":{"line":48,"column":2},"end":{"line":51,"column":3}},"7":{"start":{"line":49,"column":4},"end":{"line":49,"column":55}},"8":{"start":{"line":50,"column":4},"end":{"line":50,"column":48}}},"branchMap":{"1":{"line":45,"type":"if","locations":[{"start":{"line":45,"column":2},"end":{"line":45,"column":2}},{"start":{"line":45,"column":2},"end":{"line":45,"column":2}}]},"2":{"line":45,"type":"binary-expr","locations":[{"start":{"line":45,"column":6},"end":{"line":45,"column":13}},{"start":{"line":45,"column":17},"end":{"line":45,"column":46}}]},"3":{"line":50,"type":"cond-expr","locations":[{"start":{"line":50,"column":34},"end":{"line":50,"column":38}},{"start":{"line":50,"column":41},"end":{"line":50,"column":47}}]}},"code":["/*!"," * Chai - overwriteMethod utility"," * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>"," * MIT Licensed"," */","","/**"," * ### overwriteMethod (ctx, name, fn)"," *"," * Overwites an already existing method and provides"," * access to previous function. Must return function"," * to be used for name."," *"," *     utils.overwriteMethod(chai.Assertion.prototype, 'equal', function (_super) {"," *       return function (str) {"," *         var obj = utils.flag(this, 'object');"," *         if (obj instanceof Foo) {"," *           new chai.Assertion(obj.value).to.equal(str);"," *         } else {"," *           _super.apply(this, arguments);"," *         }"," *       }"," *     });"," *"," * Can also be accessed directly from `chai.Assertion`."," *"," *     chai.Assertion.overwriteMethod('foo', fn);"," *"," * Then can be used as any other assertion."," *"," *     expect(myFoo).to.equal('bar');"," *"," * @param {Object} ctx object whose method is to be overwritten"," * @param {String} name of method to overwrite"," * @param {Function} method function that returns a function to be used for name"," * @namespace Utils"," * @name overwriteMethod"," * @api public"," */","","module.exports = function (ctx, name, method) {","  var _method = ctx[name]","    , _super = function () { return this; };","","  if (_method && 'function' === typeof _method)","    _super = _method;","","  ctx[name] = function () {","    var result = method(_super).apply(this, arguments);","    return result === undefined ? this : result;","  }","};",""],"l":{"41":1,"42":0,"43":0,"45":0,"46":0,"48":0,"49":0,"50":0}},"/home/travis/build/npmtest/node-npmtest-chai/chai/lib/chai/utils/addChainableMethod.js":{"path":"/home/travis/build/npmtest/node-npmtest-chai/chai/lib/chai/utils/addChainableMethod.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":13,"9":8,"10":13,"11":13,"12":1,"13":13,"14":13,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0},"b":{"1":[8,5],"2":[1,12],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0]},"f":{"1":13,"2":0,"3":0,"4":0,"5":0},"fnMap":{"1":{"name":"(anonymous_1)","line":60,"loc":{"start":{"line":60,"column":17},"end":{"line":60,"column":64}}},"2":{"name":"(anonymous_2)","line":62,"loc":{"start":{"line":62,"column":23},"end":{"line":62,"column":35}}},"3":{"name":"(anonymous_3)","line":77,"loc":{"start":{"line":77,"column":11},"end":{"line":77,"column":23}}},"4":{"name":"assert","line":80,"loc":{"start":{"line":80,"column":21},"end":{"line":80,"column":39}}},"5":{"name":"(anonymous_5)","line":99,"loc":{"start":{"line":99,"column":32},"end":{"line":99,"column":56}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":11,"column":47}},"2":{"start":{"line":12,"column":0},"end":{"line":12,"column":29}},"3":{"start":{"line":13,"column":0},"end":{"line":13,"column":34}},"4":{"start":{"line":20,"column":0},"end":{"line":20,"column":44}},"5":{"start":{"line":25,"column":0},"end":{"line":25,"column":56}},"6":{"start":{"line":28,"column":0},"end":{"line":29,"column":37}},"7":{"start":{"line":60,"column":0},"end":{"line":112,"column":2}},"8":{"start":{"line":61,"column":2},"end":{"line":63,"column":3}},"9":{"start":{"line":62,"column":4},"end":{"line":62,"column":39}},"10":{"start":{"line":65,"column":2},"end":{"line":68,"column":4}},"11":{"start":{"line":71,"column":2},"end":{"line":73,"column":3}},"12":{"start":{"line":72,"column":4},"end":{"line":72,"column":23}},"13":{"start":{"line":74,"column":2},"end":{"line":74,"column":42}},"14":{"start":{"line":76,"column":2},"end":{"line":111,"column":5}},"15":{"start":{"line":78,"column":8},"end":{"line":78,"column":54}},"16":{"start":{"line":80,"column":8},"end":{"line":86,"column":10}},"17":{"start":{"line":81,"column":10},"end":{"line":81,"column":44}},"18":{"start":{"line":82,"column":10},"end":{"line":83,"column":39}},"19":{"start":{"line":83,"column":12},"end":{"line":83,"column":39}},"20":{"start":{"line":84,"column":10},"end":{"line":84,"column":71}},"21":{"start":{"line":85,"column":10},"end":{"line":85,"column":54}},"22":{"start":{"line":89,"column":8},"end":{"line":105,"column":9}},"23":{"start":{"line":91,"column":10},"end":{"line":91,"column":65}},"24":{"start":{"line":93,"column":10},"end":{"line":93,"column":32}},"25":{"start":{"line":94,"column":10},"end":{"line":94,"column":34}},"26":{"start":{"line":98,"column":10},"end":{"line":98,"column":62}},"27":{"start":{"line":99,"column":10},"end":{"line":104,"column":13}},"28":{"start":{"line":100,"column":12},"end":{"line":103,"column":13}},"29":{"start":{"line":101,"column":14},"end":{"line":101,"column":74}},"30":{"start":{"line":102,"column":14},"end":{"line":102,"column":62}},"31":{"start":{"line":107,"column":8},"end":{"line":107,"column":36}},"32":{"start":{"line":108,"column":8},"end":{"line":108,"column":22}}},"branchMap":{"1":{"line":61,"type":"if","locations":[{"start":{"line":61,"column":2},"end":{"line":61,"column":2}},{"start":{"line":61,"column":2},"end":{"line":61,"column":2}}]},"2":{"line":71,"type":"if","locations":[{"start":{"line":71,"column":2},"end":{"line":71,"column":2}},{"start":{"line":71,"column":2},"end":{"line":71,"column":2}}]},"3":{"line":82,"type":"if","locations":[{"start":{"line":82,"column":10},"end":{"line":82,"column":10}},{"start":{"line":82,"column":10},"end":{"line":82,"column":10}}]},"4":{"line":82,"type":"binary-expr","locations":[{"start":{"line":82,"column":14},"end":{"line":82,"column":22}},{"start":{"line":82,"column":26},"end":{"line":82,"column":55}}]},"5":{"line":85,"type":"cond-expr","locations":[{"start":{"line":85,"column":40},"end":{"line":85,"column":44}},{"start":{"line":85,"column":47},"end":{"line":85,"column":53}}]},"6":{"line":89,"type":"if","locations":[{"start":{"line":89,"column":8},"end":{"line":89,"column":8}},{"start":{"line":89,"column":8},"end":{"line":89,"column":8}}]},"7":{"line":100,"type":"if","locations":[{"start":{"line":100,"column":12},"end":{"line":100,"column":12}},{"start":{"line":100,"column":12},"end":{"line":100,"column":12}}]}},"code":["/*!"," * Chai - addChainingMethod utility"," * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>"," * MIT Licensed"," */","","/*!"," * Module dependencies"," */","","var transferFlags = require('./transferFlags');","var flag = require('./flag');","var config = require('../config');","","/*!"," * Module variables"," */","","// Check whether `__proto__` is supported","var hasProtoSupport = '__proto__' in Object;","","// Without `__proto__` support, this module will need to add properties to a function.","// However, some Function.prototype methods cannot be overwritten,","// and there seems no easy cross-platform way to detect them (@see chaijs/chai/issues/69).","var excludeNames = /^(?:length|name|arguments|caller)$/;","","// Cache `Function` properties","var call  = Function.prototype.call,","    apply = Function.prototype.apply;","","/**"," * ### addChainableMethod (ctx, name, method, chainingBehavior)"," *"," * Adds a method to an object, such that the method can also be chained."," *"," *     utils.addChainableMethod(chai.Assertion.prototype, 'foo', function (str) {"," *       var obj = utils.flag(this, 'object');"," *       new chai.Assertion(obj).to.be.equal(str);"," *     });"," *"," * Can also be accessed directly from `chai.Assertion`."," *"," *     chai.Assertion.addChainableMethod('foo', fn, chainingBehavior);"," *"," * The result can then be used as both a method assertion, executing both `method` and"," * `chainingBehavior`, or as a language chain, which only executes `chainingBehavior`."," *"," *     expect(fooStr).to.be.foo('bar');"," *     expect(fooStr).to.be.foo.equal('foo');"," *"," * @param {Object} ctx object to which the method is added"," * @param {String} name of method to add"," * @param {Function} method function to be used for `name`, when called"," * @param {Function} chainingBehavior function to be called every time the property is accessed"," * @namespace Utils"," * @name addChainableMethod"," * @api public"," */","","module.exports = function (ctx, name, method, chainingBehavior) {","  if (typeof chainingBehavior !== 'function') {","    chainingBehavior = function () { };","  }","","  var chainableBehavior = {","      method: method","    , chainingBehavior: chainingBehavior","  };","","  // save the methods so we can overwrite them later, if we need to.","  if (!ctx.__methods) {","    ctx.__methods = {};","  }","  ctx.__methods[name] = chainableBehavior;","","  Object.defineProperty(ctx, name,","    { get: function () {","        chainableBehavior.chainingBehavior.call(this);","","        var assert = function assert() {","          var old_ssfi = flag(this, 'ssfi');","          if (old_ssfi && config.includeStack === false)","            flag(this, 'ssfi', assert);","          var result = chainableBehavior.method.apply(this, arguments);","          return result === undefined ? this : result;","        };","","        // Use `__proto__` if available","        if (hasProtoSupport) {","          // Inherit all properties from the object by replacing the `Function` prototype","          var prototype = assert.__proto__ = Object.create(this);","          // Restore the `call` and `apply` methods from `Function`","          prototype.call = call;","          prototype.apply = apply;","        }","        // Otherwise, redefine all properties (slow!)","        else {","          var asserterNames = Object.getOwnPropertyNames(ctx);","          asserterNames.forEach(function (asserterName) {","            if (!excludeNames.test(asserterName)) {","              var pd = Object.getOwnPropertyDescriptor(ctx, asserterName);","              Object.defineProperty(assert, asserterName, pd);","            }","          });","        }","","        transferFlags(this, assert);","        return assert;","      }","    , configurable: true","  });","};",""],"l":{"11":1,"12":1,"13":1,"20":1,"25":1,"28":1,"60":1,"61":13,"62":8,"65":13,"71":13,"72":1,"74":13,"76":13,"78":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"89":0,"91":0,"93":0,"94":0,"98":0,"99":0,"100":0,"101":0,"102":0,"107":0,"108":0}},"/home/travis/build/npmtest/node-npmtest-chai/chai/lib/chai/utils/overwriteChainableMethod.js":{"path":"/home/travis/build/npmtest/node-npmtest-chai/chai/lib/chai/utils/overwriteChainableMethod.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"(anonymous_1)","line":40,"loc":{"start":{"line":40,"column":17},"end":{"line":40,"column":64}}},"2":{"name":"(anonymous_2)","line":44,"loc":{"start":{"line":44,"column":39},"end":{"line":44,"column":51}}},"3":{"name":"(anonymous_3)","line":50,"loc":{"start":{"line":50,"column":29},"end":{"line":50,"column":41}}}},"statementMap":{"1":{"start":{"line":40,"column":0},"end":{"line":54,"column":2}},"2":{"start":{"line":41,"column":2},"end":{"line":41,"column":46}},"3":{"start":{"line":43,"column":2},"end":{"line":43,"column":61}},"4":{"start":{"line":44,"column":2},"end":{"line":47,"column":4}},"5":{"start":{"line":45,"column":4},"end":{"line":45,"column":64}},"6":{"start":{"line":46,"column":4},"end":{"line":46,"column":48}},"7":{"start":{"line":49,"column":2},"end":{"line":49,"column":41}},"8":{"start":{"line":50,"column":2},"end":{"line":53,"column":4}},"9":{"start":{"line":51,"column":4},"end":{"line":51,"column":56}},"10":{"start":{"line":52,"column":4},"end":{"line":52,"column":48}}},"branchMap":{"1":{"line":46,"type":"cond-expr","locations":[{"start":{"line":46,"column":34},"end":{"line":46,"column":38}},{"start":{"line":46,"column":41},"end":{"line":46,"column":47}}]},"2":{"line":52,"type":"cond-expr","locations":[{"start":{"line":52,"column":34},"end":{"line":52,"column":38}},{"start":{"line":52,"column":41},"end":{"line":52,"column":47}}]}},"code":["/*!"," * Chai - overwriteChainableMethod utility"," * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>"," * MIT Licensed"," */","","/**"," * ### overwriteChainableMethod (ctx, name, method, chainingBehavior)"," *"," * Overwites an already existing chainable method"," * and provides access to the previous function or"," * property.  Must return functions to be used for"," * name."," *"," *     utils.overwriteChainableMethod(chai.Assertion.prototype, 'length',"," *       function (_super) {"," *       }"," *     , function (_super) {"," *       }"," *     );"," *"," * Can also be accessed directly from `chai.Assertion`."," *"," *     chai.Assertion.overwriteChainableMethod('foo', fn, fn);"," *"," * Then can be used as any other assertion."," *"," *     expect(myFoo).to.have.length(3);"," *     expect(myFoo).to.have.length.above(3);"," *"," * @param {Object} ctx object whose method / property is to be overwritten"," * @param {String} name of method / property to overwrite"," * @param {Function} method function that returns a function to be used for name"," * @param {Function} chainingBehavior function that returns a function to be used for property"," * @namespace Utils"," * @name overwriteChainableMethod"," * @api public"," */","","module.exports = function (ctx, name, method, chainingBehavior) {","  var chainableBehavior = ctx.__methods[name];","","  var _chainingBehavior = chainableBehavior.chainingBehavior;","  chainableBehavior.chainingBehavior = function () {","    var result = chainingBehavior(_chainingBehavior).call(this);","    return result === undefined ? this : result;","  };","","  var _method = chainableBehavior.method;","  chainableBehavior.method = function () {","    var result = method(_method).apply(this, arguments);","    return result === undefined ? this : result;","  };","};",""],"l":{"40":1,"41":0,"43":0,"44":0,"45":0,"46":0,"49":0,"50":0,"51":0,"52":0}},"/home/travis/build/npmtest/node-npmtest-chai/chai/lib/chai/assertion.js":{"path":"/home/travis/build/npmtest/node-npmtest-chai/chai/lib/chai/assertion.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":0,"7":0,"8":0,"9":1,"10":0,"11":0,"12":0,"13":0,"14":1,"15":0,"16":0,"17":0,"18":0,"19":1,"20":31,"21":1,"22":40,"23":1,"24":13,"25":1,"26":0,"27":1,"28":0,"29":1,"30":0,"31":1,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":1,"41":0,"42":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0]},"f":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":31,"8":40,"9":13,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0},"fnMap":{"1":{"name":"(anonymous_1)","line":10,"loc":{"start":{"line":10,"column":17},"end":{"line":10,"column":40}}},"2":{"name":"Assertion","line":32,"loc":{"start":{"line":32,"column":2},"end":{"line":32,"column":39}}},"3":{"name":"(anonymous_3)","line":39,"loc":{"start":{"line":39,"column":9},"end":{"line":39,"column":20}}},"4":{"name":"(anonymous_4)","line":43,"loc":{"start":{"line":43,"column":9},"end":{"line":43,"column":25}}},"5":{"name":"(anonymous_5)","line":50,"loc":{"start":{"line":50,"column":9},"end":{"line":50,"column":20}}},"6":{"name":"(anonymous_6)","line":54,"loc":{"start":{"line":54,"column":9},"end":{"line":54,"column":25}}},"7":{"name":"(anonymous_7)","line":60,"loc":{"start":{"line":60,"column":26},"end":{"line":60,"column":46}}},"8":{"name":"(anonymous_8)","line":64,"loc":{"start":{"line":64,"column":24},"end":{"line":64,"column":44}}},"9":{"name":"(anonymous_9)","line":68,"loc":{"start":{"line":68,"column":33},"end":{"line":68,"column":71}}},"10":{"name":"(anonymous_10)","line":72,"loc":{"start":{"line":72,"column":32},"end":{"line":72,"column":52}}},"11":{"name":"(anonymous_11)","line":76,"loc":{"start":{"line":76,"column":30},"end":{"line":76,"column":50}}},"12":{"name":"(anonymous_12)","line":80,"loc":{"start":{"line":80,"column":39},"end":{"line":80,"column":77}}},"13":{"name":"(anonymous_13)","line":99,"loc":{"start":{"line":99,"column":31},"end":{"line":99,"column":92}}},"14":{"name":"(anonymous_14)","line":124,"loc":{"start":{"line":124,"column":11},"end":{"line":124,"column":23}}},"15":{"name":"(anonymous_15)","line":127,"loc":{"start":{"line":127,"column":11},"end":{"line":127,"column":26}}}},"statementMap":{"1":{"start":{"line":8,"column":0},"end":{"line":8,"column":33}},"2":{"start":{"line":10,"column":0},"end":{"line":131,"column":2}},"3":{"start":{"line":15,"column":2},"end":{"line":16,"column":23}},"4":{"start":{"line":22,"column":2},"end":{"line":22,"column":30}},"5":{"start":{"line":32,"column":2},"end":{"line":36,"column":3}},"6":{"start":{"line":33,"column":4},"end":{"line":33,"column":50}},"7":{"start":{"line":34,"column":4},"end":{"line":34,"column":30}},"8":{"start":{"line":35,"column":4},"end":{"line":35,"column":31}},"9":{"start":{"line":38,"column":2},"end":{"line":47,"column":5}},"10":{"start":{"line":40,"column":6},"end":{"line":40,"column":98}},"11":{"start":{"line":41,"column":6},"end":{"line":41,"column":33}},"12":{"start":{"line":44,"column":6},"end":{"line":44,"column":98}},"13":{"start":{"line":45,"column":6},"end":{"line":45,"column":34}},"14":{"start":{"line":49,"column":2},"end":{"line":58,"column":5}},"15":{"start":{"line":51,"column":6},"end":{"line":51,"column":90}},"16":{"start":{"line":52,"column":6},"end":{"line":52,"column":29}},"17":{"start":{"line":55,"column":6},"end":{"line":55,"column":90}},"18":{"start":{"line":56,"column":6},"end":{"line":56,"column":30}},"19":{"start":{"line":60,"column":2},"end":{"line":62,"column":4}},"20":{"start":{"line":61,"column":4},"end":{"line":61,"column":47}},"21":{"start":{"line":64,"column":2},"end":{"line":66,"column":4}},"22":{"start":{"line":65,"column":4},"end":{"line":65,"column":45}},"23":{"start":{"line":68,"column":2},"end":{"line":70,"column":4}},"24":{"start":{"line":69,"column":4},"end":{"line":69,"column":72}},"25":{"start":{"line":72,"column":2},"end":{"line":74,"column":4}},"26":{"start":{"line":73,"column":4},"end":{"line":73,"column":53}},"27":{"start":{"line":76,"column":2},"end":{"line":78,"column":4}},"28":{"start":{"line":77,"column":4},"end":{"line":77,"column":51}},"29":{"start":{"line":80,"column":2},"end":{"line":82,"column":4}},"30":{"start":{"line":81,"column":4},"end":{"line":81,"column":78}},"31":{"start":{"line":99,"column":2},"end":{"line":113,"column":4}},"32":{"start":{"line":100,"column":4},"end":{"line":100,"column":40}},"33":{"start":{"line":101,"column":4},"end":{"line":101,"column":44}},"34":{"start":{"line":101,"column":27},"end":{"line":101,"column":44}},"35":{"start":{"line":102,"column":4},"end":{"line":102,"column":51}},"36":{"start":{"line":102,"column":34},"end":{"line":102,"column":51}},"37":{"start":{"line":104,"column":4},"end":{"line":112,"column":5}},"38":{"start":{"line":105,"column":6},"end":{"line":106,"column":51}},"39":{"start":{"line":107,"column":6},"end":{"line":111,"column":67}},"40":{"start":{"line":123,"column":2},"end":{"line":130,"column":5}},"41":{"start":{"line":125,"column":8},"end":{"line":125,"column":36}},"42":{"start":{"line":128,"column":8},"end":{"line":128,"column":34}}},"branchMap":{"1":{"line":33,"type":"binary-expr","locations":[{"start":{"line":33,"column":23},"end":{"line":33,"column":28}},{"start":{"line":33,"column":32},"end":{"line":33,"column":48}}]},"2":{"line":101,"type":"if","locations":[{"start":{"line":101,"column":4},"end":{"line":101,"column":4}},{"start":{"line":101,"column":4},"end":{"line":101,"column":4}}]},"3":{"line":102,"type":"if","locations":[{"start":{"line":102,"column":4},"end":{"line":102,"column":4}},{"start":{"line":102,"column":4},"end":{"line":102,"column":4}}]},"4":{"line":104,"type":"if","locations":[{"start":{"line":104,"column":4},"end":{"line":104,"column":4}},{"start":{"line":104,"column":4},"end":{"line":104,"column":4}}]},"5":{"line":111,"type":"cond-expr","locations":[{"start":{"line":111,"column":33},"end":{"line":111,"column":44}},{"start":{"line":111,"column":47},"end":{"line":111,"column":65}}]}},"code":["/*!"," * chai"," * http://chaijs.com"," * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>"," * MIT Licensed"," */","","var config = require('./config');","","module.exports = function (_chai, util) {","  /*!","   * Module dependencies.","   */","","  var AssertionError = _chai.AssertionError","    , flag = util.flag;","","  /*!","   * Module export.","   */","","  _chai.Assertion = Assertion;","","  /*!","   * Assertion Constructor","   *","   * Creates object for chaining.","   *","   * @api private","   */","","  function Assertion (obj, msg, stack) {","    flag(this, 'ssfi', stack || arguments.callee);","    flag(this, 'object', obj);","    flag(this, 'message', msg);","  }","","  Object.defineProperty(Assertion, 'includeStack', {","    get: function() {","      console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');","      return config.includeStack;","    },","    set: function(value) {","      console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');","      config.includeStack = value;","    }","  });","","  Object.defineProperty(Assertion, 'showDiff', {","    get: function() {","      console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');","      return config.showDiff;","    },","    set: function(value) {","      console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');","      config.showDiff = value;","    }","  });","","  Assertion.addProperty = function (name, fn) {","    util.addProperty(this.prototype, name, fn);","  };","","  Assertion.addMethod = function (name, fn) {","    util.addMethod(this.prototype, name, fn);","  };","","  Assertion.addChainableMethod = function (name, fn, chainingBehavior) {","    util.addChainableMethod(this.prototype, name, fn, chainingBehavior);","  };","","  Assertion.overwriteProperty = function (name, fn) {","    util.overwriteProperty(this.prototype, name, fn);","  };","","  Assertion.overwriteMethod = function (name, fn) {","    util.overwriteMethod(this.prototype, name, fn);","  };","","  Assertion.overwriteChainableMethod = function (name, fn, chainingBehavior) {","    util.overwriteChainableMethod(this.prototype, name, fn, chainingBehavior);","  };","","  /**","   * ### .assert(expression, message, negateMessage, expected, actual, showDiff)","   *","   * Executes an expression and check expectations. Throws AssertionError for reporting if test doesn't pass.","   *","   * @name assert","   * @param {Philosophical} expression to be tested","   * @param {String|Function} message or function that returns message to display if expression fails","   * @param {String|Function} negatedMessage or function that returns negatedMessage to display if negated expression fails","   * @param {Mixed} expected value (remember to check for negation)","   * @param {Mixed} actual (optional) will default to `this.obj`","   * @param {Boolean} showDiff (optional) when set to `true`, assert will display a diff in addition to the message if expression fails","   * @api private","   */","","  Assertion.prototype.assert = function (expr, msg, negateMsg, expected, _actual, showDiff) {","    var ok = util.test(this, arguments);","    if (true !== showDiff) showDiff = false;","    if (true !== config.showDiff) showDiff = false;","","    if (!ok) {","      var msg = util.getMessage(this, arguments)","        , actual = util.getActual(this, arguments);","      throw new AssertionError(msg, {","          actual: actual","        , expected: expected","        , showDiff: showDiff","      }, (config.includeStack) ? this.assert : flag(this, 'ssfi'));","    }","  };","","  /*!","   * ### ._obj","   *","   * Quick reference to stored `actual` value for plugin developers.","   *","   * @api private","   */","","  Object.defineProperty(Assertion.prototype, '_obj',","    { get: function () {","        return flag(this, 'object');","      }","    , set: function (val) {","        flag(this, 'object', val);","      }","  });","};",""],"l":{"8":1,"10":1,"15":1,"22":1,"32":1,"33":0,"34":0,"35":0,"38":1,"40":0,"41":0,"44":0,"45":0,"49":1,"51":0,"52":0,"55":0,"56":0,"60":1,"61":31,"64":1,"65":40,"68":1,"69":13,"72":1,"73":0,"76":1,"77":0,"80":1,"81":0,"99":1,"100":0,"101":0,"102":0,"104":0,"105":0,"107":0,"123":1,"125":0,"128":0}},"/home/travis/build/npmtest/node-npmtest-chai/chai/lib/chai/core/assertions.js":{"path":"/home/travis/build/npmtest/node-npmtest-chai/chai/lib/chai/core/assertions.js","s":{"1":1,"2":1,"3":1,"4":13,"5":0,"6":1,"7":0,"8":1,"9":0,"10":1,"11":0,"12":0,"13":1,"14":0,"15":0,"16":1,"17":0,"18":0,"19":0,"20":0,"21":0,"22":1,"23":1,"24":1,"25":0,"26":1,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":1,"49":1,"50":1,"51":1,"52":1,"53":0,"54":1,"55":0,"56":1,"57":0,"58":1,"59":0,"60":1,"61":0,"62":1,"63":0,"64":1,"65":0,"66":1,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":1,"74":0,"75":0,"76":1,"77":1,"78":1,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":1,"86":1,"87":1,"88":1,"89":0,"90":0,"91":0,"92":1,"93":1,"94":1,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":1,"104":1,"105":1,"106":1,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":1,"116":1,"117":1,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":1,"127":1,"128":1,"129":1,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":1,"139":1,"140":1,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":1,"150":0,"151":0,"152":0,"153":0,"154":1,"155":1,"156":1,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0,"165":0,"166":0,"167":0,"168":1,"169":0,"170":0,"171":0,"172":0,"173":1,"174":1,"175":1,"176":0,"177":0,"178":0,"179":0,"180":0,"181":0,"182":0,"183":0,"184":0,"185":0,"186":0,"187":1,"188":1,"189":1,"190":0,"191":1,"192":0,"193":0,"194":0,"195":0,"196":0,"197":0,"198":1,"199":1,"200":1,"201":0,"202":0,"203":0,"204":0,"205":1,"206":1,"207":1,"208":0,"209":0,"210":0,"211":0,"212":0,"213":1,"214":0,"215":0,"216":0,"217":0,"218":0,"219":0,"220":0,"221":0,"222":0,"223":0,"224":0,"225":0,"226":0,"227":0,"228":0,"229":0,"230":0,"231":0,"232":0,"233":0,"234":0,"235":0,"236":0,"237":0,"238":0,"239":0,"240":0,"241":0,"242":0,"243":0,"244":0,"245":0,"246":0,"247":0,"248":0,"249":0,"250":1,"251":1,"252":1,"253":0,"254":0,"255":0,"256":0,"257":0,"258":0,"259":0,"260":0,"261":0,"262":0,"263":0,"264":0,"265":0,"266":0,"267":0,"268":0,"269":0,"270":0,"271":0,"272":0,"273":0,"274":0,"275":0,"276":0,"277":0,"278":0,"279":0,"280":0,"281":0,"282":0,"283":0,"284":0,"285":0,"286":0,"287":0,"288":0,"289":0,"290":0,"291":0,"292":0,"293":0,"294":0,"295":0,"296":0,"297":0,"298":0,"299":0,"300":1,"301":1,"302":1,"303":1,"304":0,"305":0,"306":0,"307":0,"308":1,"309":1,"310":1,"311":0,"312":1,"313":0,"314":0,"315":0,"316":0,"317":0,"318":1,"319":1,"320":1,"321":0,"322":0,"323":0,"324":0,"325":0,"326":0,"327":0,"328":1,"329":1,"330":1,"331":0,"332":0,"333":0,"334":0,"335":0,"336":1,"337":0,"338":0,"339":0,"340":0,"341":0,"342":0,"343":0,"344":0,"345":0,"346":1,"347":0,"348":0,"349":0,"350":0,"351":0,"352":1,"353":1,"354":0,"355":0,"356":0,"357":0,"358":0,"359":0,"360":0,"361":0,"362":1,"363":1,"364":1,"365":0,"366":0,"367":0,"368":0,"369":0,"370":0,"371":0,"372":0,"373":1,"374":1,"375":1,"376":0,"377":0,"378":0,"379":0,"380":0,"381":0,"382":0,"383":0,"384":1,"385":1,"386":1,"387":0,"388":0,"389":0,"390":0,"391":0,"392":0,"393":0,"394":0,"395":1,"396":0,"397":0,"398":0,"399":0,"400":0,"401":0,"402":0,"403":0,"404":1,"405":0,"406":0,"407":0,"408":0,"409":0,"410":0,"411":0,"412":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0],"44":[0,0],"45":[0,0],"46":[0,0],"47":[0,0],"48":[0,0],"49":[0,0,0],"50":[0,0],"51":[0,0],"52":[0,0],"53":[0,0],"54":[0,0],"55":[0,0],"56":[0,0],"57":[0,0],"58":[0,0],"59":[0,0],"60":[0,0],"61":[0,0],"62":[0,0],"63":[0,0],"64":[0,0],"65":[0,0],"66":[0,0],"67":[0,0],"68":[0,0,0],"69":[0,0],"70":[0,0],"71":[0,0],"72":[0,0],"73":[0,0,0],"74":[0,0],"75":[0,0],"76":[0,0],"77":[0,0],"78":[0,0],"79":[0,0],"80":[0,0],"81":[0,0],"82":[0,0],"83":[0,0],"84":[0,0,0],"85":[0,0],"86":[0,0,0],"87":[0,0],"88":[0,0],"89":[0,0],"90":[0,0],"91":[0,0],"92":[0,0],"93":[0,0],"94":[0,0],"95":[0,0],"96":[0,0],"97":[0,0],"98":[0,0],"99":[0,0],"100":[0,0],"101":[0,0],"102":[0,0],"103":[0,0],"104":[0,0],"105":[0,0],"106":[0,0],"107":[0,0],"108":[0,0],"109":[0,0],"110":[0,0],"111":[0,0]},"f":{"1":1,"2":13,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0},"fnMap":{"1":{"name":"(anonymous_1)","line":8,"loc":{"start":{"line":8,"column":17},"end":{"line":8,"column":36}}},"2":{"name":"(anonymous_2)","line":45,"loc":{"start":{"line":45,"column":27},"end":{"line":45,"column":44}}},"3":{"name":"(anonymous_3)","line":46,"loc":{"start":{"line":46,"column":33},"end":{"line":46,"column":45}}},"4":{"name":"(anonymous_4)","line":66,"loc":{"start":{"line":66,"column":31},"end":{"line":66,"column":43}}},"5":{"name":"(anonymous_5)","line":91,"loc":{"start":{"line":91,"column":32},"end":{"line":91,"column":44}}},"6":{"name":"(anonymous_6)","line":108,"loc":{"start":{"line":108,"column":31},"end":{"line":108,"column":43}}},"7":{"name":"(anonymous_7)","line":127,"loc":{"start":{"line":127,"column":31},"end":{"line":127,"column":43}}},"8":{"name":"an","line":163,"loc":{"start":{"line":163,"column":2},"end":{"line":163,"column":26}}},"9":{"name":"includeChainingBehavior","line":201,"loc":{"start":{"line":201,"column":2},"end":{"line":201,"column":38}}},"10":{"name":"include","line":205,"loc":{"start":{"line":205,"column":2},"end":{"line":205,"column":30}}},"11":{"name":"(anonymous_11)","line":257,"loc":{"start":{"line":257,"column":30},"end":{"line":257,"column":42}}},"12":{"name":"(anonymous_12)","line":277,"loc":{"start":{"line":277,"column":32},"end":{"line":277,"column":44}}},"13":{"name":"(anonymous_13)","line":299,"loc":{"start":{"line":299,"column":33},"end":{"line":299,"column":45}}},"14":{"name":"(anonymous_14)","line":321,"loc":{"start":{"line":321,"column":32},"end":{"line":321,"column":44}}},"15":{"name":"(anonymous_15)","line":342,"loc":{"start":{"line":342,"column":37},"end":{"line":342,"column":49}}},"16":{"name":"(anonymous_16)","line":362,"loc":{"start":{"line":362,"column":31},"end":{"line":362,"column":43}}},"17":{"name":"(anonymous_17)","line":388,"loc":{"start":{"line":388,"column":33},"end":{"line":388,"column":45}}},"18":{"name":"(anonymous_18)","line":413,"loc":{"start":{"line":413,"column":33},"end":{"line":413,"column":45}}},"19":{"name":"checkArguments","line":445,"loc":{"start":{"line":445,"column":2},"end":{"line":445,"column":29}}},"20":{"name":"assertEqual","line":481,"loc":{"start":{"line":481,"column":2},"end":{"line":481,"column":34}}},"21":{"name":"assertEql","line":518,"loc":{"start":{"line":518,"column":2},"end":{"line":518,"column":31}}},"22":{"name":"assertAbove","line":557,"loc":{"start":{"line":557,"column":2},"end":{"line":557,"column":32}}},"23":{"name":"assertLeast","line":606,"loc":{"start":{"line":606,"column":2},"end":{"line":606,"column":32}}},"24":{"name":"assertBelow","line":655,"loc":{"start":{"line":655,"column":2},"end":{"line":655,"column":32}}},"25":{"name":"assertMost","line":704,"loc":{"start":{"line":704,"column":2},"end":{"line":704,"column":31}}},"26":{"name":"(anonymous_26)","line":752,"loc":{"start":{"line":752,"column":32},"end":{"line":752,"column":62}}},"27":{"name":"assertInstanceOf","line":792,"loc":{"start":{"line":792,"column":2},"end":{"line":792,"column":47}}},"28":{"name":"(anonymous_28)","line":877,"loc":{"start":{"line":877,"column":34},"end":{"line":877,"column":60}}},"29":{"name":"assertOwnProperty","line":933,"loc":{"start":{"line":933,"column":2},"end":{"line":933,"column":41}}},"30":{"name":"assertOwnPropertyDescriptor","line":966,"loc":{"start":{"line":966,"column":2},"end":{"line":966,"column":63}}},"31":{"name":"assertLengthChain","line":1035,"loc":{"start":{"line":1035,"column":2},"end":{"line":1035,"column":32}}},"32":{"name":"assertLength","line":1039,"loc":{"start":{"line":1039,"column":2},"end":{"line":1039,"column":33}}},"33":{"name":"assertMatch","line":1071,"loc":{"start":{"line":1071,"column":2},"end":{"line":1071,"column":32}}},"34":{"name":"(anonymous_34)","line":1098,"loc":{"start":{"line":1098,"column":32},"end":{"line":1098,"column":52}}},"35":{"name":"assertKeys","line":1150,"loc":{"start":{"line":1150,"column":2},"end":{"line":1150,"column":29}}},"36":{"name":"(anonymous_36)","line":1182,"loc":{"start":{"line":1182,"column":41},"end":{"line":1182,"column":55}}},"37":{"name":"(anonymous_37)","line":1190,"loc":{"start":{"line":1190,"column":22},"end":{"line":1190,"column":35}}},"38":{"name":"(anonymous_38)","line":1200,"loc":{"start":{"line":1200,"column":22},"end":{"line":1200,"column":35}}},"39":{"name":"assertThrows","line":1270,"loc":{"start":{"line":1270,"column":2},"end":{"line":1270,"column":51}}},"40":{"name":"respondTo","line":1414,"loc":{"start":{"line":1414,"column":2},"end":{"line":1414,"column":35}}},"41":{"name":"(anonymous_41)","line":1449,"loc":{"start":{"line":1449,"column":34},"end":{"line":1449,"column":46}}},"42":{"name":"satisfy","line":1468,"loc":{"start":{"line":1468,"column":2},"end":{"line":1468,"column":34}}},"43":{"name":"closeTo","line":1500,"loc":{"start":{"line":1500,"column":2},"end":{"line":1500,"column":41}}},"44":{"name":"isSubsetOf","line":1519,"loc":{"start":{"line":1519,"column":2},"end":{"line":1519,"column":45}}},"45":{"name":"(anonymous_45)","line":1520,"loc":{"start":{"line":1520,"column":24},"end":{"line":1520,"column":39}}},"46":{"name":"(anonymous_46)","line":1523,"loc":{"start":{"line":1523,"column":27},"end":{"line":1523,"column":43}}},"47":{"name":"(anonymous_47)","line":1552,"loc":{"start":{"line":1552,"column":33},"end":{"line":1552,"column":56}}},"48":{"name":"oneOf","line":1602,"loc":{"start":{"line":1602,"column":2},"end":{"line":1602,"column":29}}},"49":{"name":"assertChanges","line":1640,"loc":{"start":{"line":1640,"column":2},"end":{"line":1640,"column":45}}},"50":{"name":"assertIncreases","line":1678,"loc":{"start":{"line":1678,"column":2},"end":{"line":1678,"column":47}}},"51":{"name":"assertDecreases","line":1716,"loc":{"start":{"line":1716,"column":2},"end":{"line":1716,"column":47}}},"52":{"name":"(anonymous_52)","line":1755,"loc":{"start":{"line":1755,"column":38},"end":{"line":1755,"column":49}}},"53":{"name":"(anonymous_53)","line":1797,"loc":{"start":{"line":1797,"column":34},"end":{"line":1797,"column":45}}},"54":{"name":"(anonymous_54)","line":1837,"loc":{"start":{"line":1837,"column":34},"end":{"line":1837,"column":45}}}},"statementMap":{"1":{"start":{"line":8,"column":0},"end":{"line":1860,"column":2}},"2":{"start":{"line":9,"column":2},"end":{"line":11,"column":20}},"3":{"start":{"line":42,"column":2},"end":{"line":49,"column":5}},"4":{"start":{"line":46,"column":4},"end":{"line":48,"column":7}},"5":{"start":{"line":47,"column":6},"end":{"line":47,"column":18}},"6":{"start":{"line":66,"column":2},"end":{"line":68,"column":5}},"7":{"start":{"line":67,"column":4},"end":{"line":67,"column":31}},"8":{"start":{"line":91,"column":2},"end":{"line":93,"column":5}},"9":{"start":{"line":92,"column":4},"end":{"line":92,"column":29}},"10":{"start":{"line":108,"column":2},"end":{"line":111,"column":5}},"11":{"start":{"line":109,"column":4},"end":{"line":109,"column":28}},"12":{"start":{"line":110,"column":4},"end":{"line":110,"column":28}},"13":{"start":{"line":127,"column":2},"end":{"line":130,"column":5}},"14":{"start":{"line":128,"column":4},"end":{"line":128,"column":28}},"15":{"start":{"line":129,"column":4},"end":{"line":129,"column":29}},"16":{"start":{"line":163,"column":2},"end":{"line":174,"column":3}},"17":{"start":{"line":164,"column":4},"end":{"line":164,"column":40}},"18":{"start":{"line":164,"column":13},"end":{"line":164,"column":40}},"19":{"start":{"line":165,"column":4},"end":{"line":165,"column":30}},"20":{"start":{"line":166,"column":4},"end":{"line":167,"column":86}},"21":{"start":{"line":169,"column":4},"end":{"line":173,"column":6}},"22":{"start":{"line":176,"column":2},"end":{"line":176,"column":41}},"23":{"start":{"line":177,"column":2},"end":{"line":177,"column":40}},"24":{"start":{"line":201,"column":2},"end":{"line":203,"column":3}},"25":{"start":{"line":202,"column":4},"end":{"line":202,"column":33}},"26":{"start":{"line":205,"column":2},"end":{"line":234,"column":3}},"27":{"start":{"line":206,"column":4},"end":{"line":206,"column":55}},"28":{"start":{"line":208,"column":4},"end":{"line":208,"column":40}},"29":{"start":{"line":208,"column":13},"end":{"line":208,"column":40}},"30":{"start":{"line":209,"column":4},"end":{"line":209,"column":35}},"31":{"start":{"line":210,"column":4},"end":{"line":210,"column":25}},"32":{"start":{"line":212,"column":4},"end":{"line":229,"column":5}},"33":{"start":{"line":213,"column":6},"end":{"line":218,"column":7}},"34":{"start":{"line":214,"column":8},"end":{"line":217,"column":9}},"35":{"start":{"line":215,"column":10},"end":{"line":215,"column":26}},"36":{"start":{"line":216,"column":10},"end":{"line":216,"column":16}},"37":{"start":{"line":219,"column":11},"end":{"line":229,"column":5}},"38":{"start":{"line":220,"column":6},"end":{"line":223,"column":7}},"39":{"start":{"line":221,"column":8},"end":{"line":221,"column":66}},"40":{"start":{"line":221,"column":27},"end":{"line":221,"column":66}},"41":{"start":{"line":222,"column":8},"end":{"line":222,"column":15}},"42":{"start":{"line":224,"column":6},"end":{"line":224,"column":22}},"43":{"start":{"line":225,"column":6},"end":{"line":225,"column":44}},"44":{"start":{"line":225,"column":25},"end":{"line":225,"column":44}},"45":{"start":{"line":226,"column":6},"end":{"line":226,"column":36}},"46":{"start":{"line":228,"column":6},"end":{"line":228,"column":57}},"47":{"start":{"line":230,"column":4},"end":{"line":233,"column":61}},"48":{"start":{"line":236,"column":2},"end":{"line":236,"column":76}},"49":{"start":{"line":237,"column":2},"end":{"line":237,"column":76}},"50":{"start":{"line":238,"column":2},"end":{"line":238,"column":77}},"51":{"start":{"line":239,"column":2},"end":{"line":239,"column":77}},"52":{"start":{"line":257,"column":2},"end":{"line":262,"column":5}},"53":{"start":{"line":258,"column":4},"end":{"line":261,"column":40}},"54":{"start":{"line":277,"column":2},"end":{"line":284,"column":5}},"55":{"start":{"line":278,"column":4},"end":{"line":283,"column":6}},"56":{"start":{"line":299,"column":2},"end":{"line":306,"column":5}},"57":{"start":{"line":300,"column":4},"end":{"line":305,"column":6}},"58":{"start":{"line":321,"column":2},"end":{"line":327,"column":5}},"59":{"start":{"line":322,"column":4},"end":{"line":326,"column":6}},"60":{"start":{"line":342,"column":2},"end":{"line":348,"column":5}},"61":{"start":{"line":343,"column":4},"end":{"line":347,"column":6}},"62":{"start":{"line":362,"column":2},"end":{"line":368,"column":5}},"63":{"start":{"line":363,"column":4},"end":{"line":367,"column":6}},"64":{"start":{"line":388,"column":2},"end":{"line":394,"column":5}},"65":{"start":{"line":389,"column":4},"end":{"line":393,"column":6}},"66":{"start":{"line":413,"column":2},"end":{"line":428,"column":5}},"67":{"start":{"line":414,"column":4},"end":{"line":415,"column":23}},"68":{"start":{"line":417,"column":4},"end":{"line":421,"column":5}},"69":{"start":{"line":418,"column":6},"end":{"line":418,"column":28}},"70":{"start":{"line":419,"column":11},"end":{"line":421,"column":5}},"71":{"start":{"line":420,"column":6},"end":{"line":420,"column":41}},"72":{"start":{"line":423,"column":4},"end":{"line":427,"column":6}},"73":{"start":{"line":445,"column":2},"end":{"line":453,"column":3}},"74":{"start":{"line":446,"column":4},"end":{"line":447,"column":51}},"75":{"start":{"line":448,"column":4},"end":{"line":452,"column":6}},"76":{"start":{"line":455,"column":2},"end":{"line":455,"column":53}},"77":{"start":{"line":456,"column":2},"end":{"line":456,"column":53}},"78":{"start":{"line":481,"column":2},"end":{"line":496,"column":3}},"79":{"start":{"line":482,"column":4},"end":{"line":482,"column":40}},"80":{"start":{"line":482,"column":13},"end":{"line":482,"column":40}},"81":{"start":{"line":483,"column":4},"end":{"line":483,"column":35}},"82":{"start":{"line":484,"column":4},"end":{"line":495,"column":5}},"83":{"start":{"line":485,"column":6},"end":{"line":485,"column":27}},"84":{"start":{"line":487,"column":6},"end":{"line":494,"column":8}},"85":{"start":{"line":498,"column":2},"end":{"line":498,"column":44}},"86":{"start":{"line":499,"column":2},"end":{"line":499,"column":45}},"87":{"start":{"line":500,"column":2},"end":{"line":500,"column":41}},"88":{"start":{"line":518,"column":2},"end":{"line":528,"column":3}},"89":{"start":{"line":519,"column":4},"end":{"line":519,"column":40}},"90":{"start":{"line":519,"column":13},"end":{"line":519,"column":40}},"91":{"start":{"line":520,"column":4},"end":{"line":527,"column":6}},"92":{"start":{"line":530,"column":2},"end":{"line":530,"column":40}},"93":{"start":{"line":531,"column":2},"end":{"line":531,"column":41}},"94":{"start":{"line":557,"column":2},"end":{"line":577,"column":3}},"95":{"start":{"line":558,"column":4},"end":{"line":558,"column":40}},"96":{"start":{"line":558,"column":13},"end":{"line":558,"column":40}},"97":{"start":{"line":559,"column":4},"end":{"line":559,"column":35}},"98":{"start":{"line":560,"column":4},"end":{"line":576,"column":5}},"99":{"start":{"line":561,"column":6},"end":{"line":561,"column":57}},"100":{"start":{"line":562,"column":6},"end":{"line":562,"column":27}},"101":{"start":{"line":563,"column":6},"end":{"line":569,"column":8}},"102":{"start":{"line":571,"column":6},"end":{"line":575,"column":8}},"103":{"start":{"line":579,"column":2},"end":{"line":579,"column":44}},"104":{"start":{"line":580,"column":2},"end":{"line":580,"column":41}},"105":{"start":{"line":581,"column":2},"end":{"line":581,"column":50}},"106":{"start":{"line":606,"column":2},"end":{"line":626,"column":3}},"107":{"start":{"line":607,"column":4},"end":{"line":607,"column":40}},"108":{"start":{"line":607,"column":13},"end":{"line":607,"column":40}},"109":{"start":{"line":608,"column":4},"end":{"line":608,"column":35}},"110":{"start":{"line":609,"column":4},"end":{"line":625,"column":5}},"111":{"start":{"line":610,"column":6},"end":{"line":610,"column":57}},"112":{"start":{"line":611,"column":6},"end":{"line":611,"column":27}},"113":{"start":{"line":612,"column":6},"end":{"line":618,"column":8}},"114":{"start":{"line":620,"column":6},"end":{"line":624,"column":8}},"115":{"start":{"line":628,"column":2},"end":{"line":628,"column":44}},"116":{"start":{"line":629,"column":2},"end":{"line":629,"column":42}},"117":{"start":{"line":655,"column":2},"end":{"line":675,"column":3}},"118":{"start":{"line":656,"column":4},"end":{"line":656,"column":40}},"119":{"start":{"line":656,"column":13},"end":{"line":656,"column":40}},"120":{"start":{"line":657,"column":4},"end":{"line":657,"column":35}},"121":{"start":{"line":658,"column":4},"end":{"line":674,"column":5}},"122":{"start":{"line":659,"column":6},"end":{"line":659,"column":57}},"123":{"start":{"line":660,"column":6},"end":{"line":660,"column":27}},"124":{"start":{"line":661,"column":6},"end":{"line":667,"column":8}},"125":{"start":{"line":669,"column":6},"end":{"line":673,"column":8}},"126":{"start":{"line":677,"column":2},"end":{"line":677,"column":44}},"127":{"start":{"line":678,"column":2},"end":{"line":678,"column":41}},"128":{"start":{"line":679,"column":2},"end":{"line":679,"column":47}},"129":{"start":{"line":704,"column":2},"end":{"line":724,"column":3}},"130":{"start":{"line":705,"column":4},"end":{"line":705,"column":40}},"131":{"start":{"line":705,"column":13},"end":{"line":705,"column":40}},"132":{"start":{"line":706,"column":4},"end":{"line":706,"column":35}},"133":{"start":{"line":707,"column":4},"end":{"line":723,"column":5}},"134":{"start":{"line":708,"column":6},"end":{"line":708,"column":57}},"135":{"start":{"line":709,"column":6},"end":{"line":709,"column":27}},"136":{"start":{"line":710,"column":6},"end":{"line":716,"column":8}},"137":{"start":{"line":718,"column":6},"end":{"line":722,"column":8}},"138":{"start":{"line":726,"column":2},"end":{"line":726,"column":42}},"139":{"start":{"line":727,"column":2},"end":{"line":727,"column":41}},"140":{"start":{"line":752,"column":2},"end":{"line":771,"column":5}},"141":{"start":{"line":753,"column":4},"end":{"line":753,"column":40}},"142":{"start":{"line":753,"column":13},"end":{"line":753,"column":40}},"143":{"start":{"line":754,"column":4},"end":{"line":755,"column":38}},"144":{"start":{"line":756,"column":4},"end":{"line":770,"column":5}},"145":{"start":{"line":757,"column":6},"end":{"line":757,"column":57}},"146":{"start":{"line":758,"column":6},"end":{"line":758,"column":27}},"147":{"start":{"line":759,"column":6},"end":{"line":763,"column":8}},"148":{"start":{"line":765,"column":6},"end":{"line":769,"column":8}},"149":{"start":{"line":792,"column":2},"end":{"line":800,"column":3}},"150":{"start":{"line":793,"column":4},"end":{"line":793,"column":40}},"151":{"start":{"line":793,"column":13},"end":{"line":793,"column":40}},"152":{"start":{"line":794,"column":4},"end":{"line":794,"column":38}},"153":{"start":{"line":795,"column":4},"end":{"line":799,"column":6}},"154":{"start":{"line":802,"column":2},"end":{"line":802,"column":54}},"155":{"start":{"line":803,"column":2},"end":{"line":803,"column":54}},"156":{"start":{"line":877,"column":2},"end":{"line":915,"column":5}},"157":{"start":{"line":878,"column":4},"end":{"line":878,"column":40}},"158":{"start":{"line":878,"column":13},"end":{"line":878,"column":40}},"159":{"start":{"line":880,"column":4},"end":{"line":890,"column":20}},"160":{"start":{"line":892,"column":4},"end":{"line":902,"column":5}},"161":{"start":{"line":893,"column":6},"end":{"line":896,"column":7}},"162":{"start":{"line":894,"column":8},"end":{"line":894,"column":46}},"163":{"start":{"line":895,"column":8},"end":{"line":895,"column":90}},"164":{"start":{"line":898,"column":6},"end":{"line":901,"column":74}},"165":{"start":{"line":904,"column":4},"end":{"line":912,"column":5}},"166":{"start":{"line":905,"column":6},"end":{"line":911,"column":8}},"167":{"start":{"line":914,"column":4},"end":{"line":914,"column":32}},"168":{"start":{"line":933,"column":2},"end":{"line":941,"column":3}},"169":{"start":{"line":934,"column":4},"end":{"line":934,"column":40}},"170":{"start":{"line":934,"column":13},"end":{"line":934,"column":40}},"171":{"start":{"line":935,"column":4},"end":{"line":935,"column":35}},"172":{"start":{"line":936,"column":4},"end":{"line":940,"column":6}},"173":{"start":{"line":943,"column":2},"end":{"line":943,"column":56}},"174":{"start":{"line":944,"column":2},"end":{"line":944,"column":60}},"175":{"start":{"line":966,"column":2},"end":{"line":991,"column":3}},"176":{"start":{"line":967,"column":4},"end":{"line":970,"column":5}},"177":{"start":{"line":968,"column":6},"end":{"line":968,"column":23}},"178":{"start":{"line":969,"column":6},"end":{"line":969,"column":24}},"179":{"start":{"line":971,"column":4},"end":{"line":971,"column":40}},"180":{"start":{"line":971,"column":13},"end":{"line":971,"column":40}},"181":{"start":{"line":972,"column":4},"end":{"line":972,"column":35}},"182":{"start":{"line":973,"column":4},"end":{"line":973,"column":78}},"183":{"start":{"line":974,"column":4},"end":{"line":989,"column":5}},"184":{"start":{"line":975,"column":6},"end":{"line":982,"column":8}},"185":{"start":{"line":984,"column":6},"end":{"line":988,"column":8}},"186":{"start":{"line":990,"column":4},"end":{"line":990,"column":43}},"187":{"start":{"line":993,"column":2},"end":{"line":993,"column":76}},"188":{"start":{"line":994,"column":2},"end":{"line":994,"column":80}},"189":{"start":{"line":1035,"column":2},"end":{"line":1037,"column":3}},"190":{"start":{"line":1036,"column":4},"end":{"line":1036,"column":33}},"191":{"start":{"line":1039,"column":2},"end":{"line":1052,"column":3}},"192":{"start":{"line":1040,"column":4},"end":{"line":1040,"column":40}},"193":{"start":{"line":1040,"column":13},"end":{"line":1040,"column":40}},"194":{"start":{"line":1041,"column":4},"end":{"line":1041,"column":35}},"195":{"start":{"line":1042,"column":4},"end":{"line":1042,"column":55}},"196":{"start":{"line":1043,"column":4},"end":{"line":1043,"column":25}},"197":{"start":{"line":1045,"column":4},"end":{"line":1051,"column":6}},"198":{"start":{"line":1054,"column":2},"end":{"line":1054,"column":74}},"199":{"start":{"line":1055,"column":2},"end":{"line":1055,"column":48}},"200":{"start":{"line":1071,"column":2},"end":{"line":1079,"column":3}},"201":{"start":{"line":1072,"column":4},"end":{"line":1072,"column":40}},"202":{"start":{"line":1072,"column":13},"end":{"line":1072,"column":40}},"203":{"start":{"line":1073,"column":4},"end":{"line":1073,"column":35}},"204":{"start":{"line":1074,"column":4},"end":{"line":1078,"column":6}},"205":{"start":{"line":1081,"column":2},"end":{"line":1081,"column":44}},"206":{"start":{"line":1082,"column":2},"end":{"line":1082,"column":46}},"207":{"start":{"line":1098,"column":2},"end":{"line":1108,"column":5}},"208":{"start":{"line":1099,"column":4},"end":{"line":1099,"column":40}},"209":{"start":{"line":1099,"column":13},"end":{"line":1099,"column":40}},"210":{"start":{"line":1100,"column":4},"end":{"line":1100,"column":35}},"211":{"start":{"line":1101,"column":4},"end":{"line":1101,"column":43}},"212":{"start":{"line":1103,"column":4},"end":{"line":1107,"column":6}},"213":{"start":{"line":1150,"column":2},"end":{"line":1229,"column":3}},"214":{"start":{"line":1151,"column":4},"end":{"line":1154,"column":113}},"215":{"start":{"line":1156,"column":4},"end":{"line":1166,"column":5}},"216":{"start":{"line":1158,"column":8},"end":{"line":1158,"column":66}},"217":{"start":{"line":1158,"column":34},"end":{"line":1158,"column":66}},"218":{"start":{"line":1159,"column":8},"end":{"line":1159,"column":14}},"219":{"start":{"line":1161,"column":8},"end":{"line":1161,"column":66}},"220":{"start":{"line":1161,"column":34},"end":{"line":1161,"column":66}},"221":{"start":{"line":1162,"column":8},"end":{"line":1162,"column":33}},"222":{"start":{"line":1163,"column":8},"end":{"line":1163,"column":14}},"223":{"start":{"line":1165,"column":8},"end":{"line":1165,"column":53}},"224":{"start":{"line":1168,"column":4},"end":{"line":1168,"column":55}},"225":{"start":{"line":1168,"column":22},"end":{"line":1168,"column":55}},"226":{"start":{"line":1170,"column":4},"end":{"line":1174,"column":32}},"227":{"start":{"line":1176,"column":4},"end":{"line":1178,"column":5}},"228":{"start":{"line":1177,"column":6},"end":{"line":1177,"column":17}},"229":{"start":{"line":1181,"column":4},"end":{"line":1186,"column":5}},"230":{"start":{"line":1182,"column":6},"end":{"line":1184,"column":9}},"231":{"start":{"line":1183,"column":8},"end":{"line":1183,"column":36}},"232":{"start":{"line":1185,"column":6},"end":{"line":1185,"column":35}},"233":{"start":{"line":1189,"column":4},"end":{"line":1196,"column":5}},"234":{"start":{"line":1190,"column":6},"end":{"line":1192,"column":9}},"235":{"start":{"line":1191,"column":8},"end":{"line":1191,"column":36}},"236":{"start":{"line":1193,"column":6},"end":{"line":1195,"column":7}},"237":{"start":{"line":1194,"column":8},"end":{"line":1194,"column":48}},"238":{"start":{"line":1199,"column":4},"end":{"line":1212,"column":5}},"239":{"start":{"line":1200,"column":6},"end":{"line":1202,"column":9}},"240":{"start":{"line":1201,"column":8},"end":{"line":1201,"column":30}},"241":{"start":{"line":1203,"column":6},"end":{"line":1203,"column":28}},"242":{"start":{"line":1204,"column":6},"end":{"line":1206,"column":7}},"243":{"start":{"line":1205,"column":8},"end":{"line":1205,"column":48}},"244":{"start":{"line":1207,"column":6},"end":{"line":1209,"column":7}},"245":{"start":{"line":1208,"column":8},"end":{"line":1208,"column":47}},"246":{"start":{"line":1211,"column":6},"end":{"line":1211,"column":31}},"247":{"start":{"line":1215,"column":4},"end":{"line":1215,"column":45}},"248":{"start":{"line":1218,"column":4},"end":{"line":1218,"column":64}},"249":{"start":{"line":1221,"column":4},"end":{"line":1228,"column":6}},"250":{"start":{"line":1231,"column":2},"end":{"line":1231,"column":42}},"251":{"start":{"line":1232,"column":2},"end":{"line":1232,"column":41}},"252":{"start":{"line":1270,"column":2},"end":{"line":1385,"column":3}},"253":{"start":{"line":1271,"column":4},"end":{"line":1271,"column":40}},"254":{"start":{"line":1271,"column":13},"end":{"line":1271,"column":40}},"255":{"start":{"line":1272,"column":4},"end":{"line":1272,"column":35}},"256":{"start":{"line":1273,"column":4},"end":{"line":1273,"column":45}},"257":{"start":{"line":1275,"column":4},"end":{"line":1278,"column":27}},"258":{"start":{"line":1280,"column":4},"end":{"line":1297,"column":5}},"259":{"start":{"line":1281,"column":6},"end":{"line":1281,"column":20}},"260":{"start":{"line":1282,"column":6},"end":{"line":1282,"column":25}},"261":{"start":{"line":1283,"column":11},"end":{"line":1297,"column":5}},"262":{"start":{"line":1284,"column":6},"end":{"line":1284,"column":27}},"263":{"start":{"line":1285,"column":6},"end":{"line":1285,"column":25}},"264":{"start":{"line":1286,"column":11},"end":{"line":1297,"column":5}},"265":{"start":{"line":1287,"column":6},"end":{"line":1287,"column":33}},"266":{"start":{"line":1288,"column":6},"end":{"line":1288,"column":25}},"267":{"start":{"line":1289,"column":6},"end":{"line":1289,"column":20}},"268":{"start":{"line":1290,"column":11},"end":{"line":1297,"column":5}},"269":{"start":{"line":1291,"column":6},"end":{"line":1291,"column":40}},"270":{"start":{"line":1292,"column":6},"end":{"line":1294,"column":7}},"271":{"start":{"line":1293,"column":8},"end":{"line":1293,"column":60}},"272":{"start":{"line":1296,"column":6},"end":{"line":1296,"column":25}},"273":{"start":{"line":1299,"column":4},"end":{"line":1363,"column":5}},"274":{"start":{"line":1300,"column":6},"end":{"line":1300,"column":12}},"275":{"start":{"line":1303,"column":6},"end":{"line":1314,"column":7}},"276":{"start":{"line":1304,"column":8},"end":{"line":1310,"column":10}},"277":{"start":{"line":1312,"column":8},"end":{"line":1312,"column":34}},"278":{"start":{"line":1313,"column":8},"end":{"line":1313,"column":20}},"279":{"start":{"line":1317,"column":6},"end":{"line":1330,"column":7}},"280":{"start":{"line":1318,"column":8},"end":{"line":1324,"column":10}},"281":{"start":{"line":1326,"column":8},"end":{"line":1329,"column":9}},"282":{"start":{"line":1327,"column":10},"end":{"line":1327,"column":36}},"283":{"start":{"line":1328,"column":10},"end":{"line":1328,"column":22}},"284":{"start":{"line":1333,"column":6},"end":{"line":1335,"column":19}},"285":{"start":{"line":1337,"column":6},"end":{"line":1362,"column":7}},"286":{"start":{"line":1338,"column":8},"end":{"line":1344,"column":10}},"287":{"start":{"line":1346,"column":8},"end":{"line":1346,"column":34}},"288":{"start":{"line":1347,"column":8},"end":{"line":1347,"column":20}},"289":{"start":{"line":1348,"column":13},"end":{"line":1362,"column":7}},"290":{"start":{"line":1349,"column":8},"end":{"line":1355,"column":10}},"291":{"start":{"line":1357,"column":8},"end":{"line":1357,"column":34}},"292":{"start":{"line":1358,"column":8},"end":{"line":1358,"column":20}},"293":{"start":{"line":1360,"column":8},"end":{"line":1360,"column":22}},"294":{"start":{"line":1361,"column":8},"end":{"line":1361,"column":26}},"295":{"start":{"line":1365,"column":4},"end":{"line":1370,"column":23}},"296":{"start":{"line":1372,"column":4},"end":{"line":1374,"column":5}},"297":{"start":{"line":1373,"column":6},"end":{"line":1373,"column":44}},"298":{"start":{"line":1376,"column":4},"end":{"line":1382,"column":6}},"299":{"start":{"line":1384,"column":4},"end":{"line":1384,"column":38}},"300":{"start":{"line":1387,"column":2},"end":{"line":1387,"column":45}},"301":{"start":{"line":1388,"column":2},"end":{"line":1388,"column":46}},"302":{"start":{"line":1389,"column":2},"end":{"line":1389,"column":45}},"303":{"start":{"line":1414,"column":2},"end":{"line":1427,"column":3}},"304":{"start":{"line":1415,"column":4},"end":{"line":1415,"column":40}},"305":{"start":{"line":1415,"column":13},"end":{"line":1415,"column":40}},"306":{"start":{"line":1416,"column":4},"end":{"line":1420,"column":22}},"307":{"start":{"line":1422,"column":4},"end":{"line":1426,"column":6}},"308":{"start":{"line":1429,"column":2},"end":{"line":1429,"column":46}},"309":{"start":{"line":1430,"column":2},"end":{"line":1430,"column":47}},"310":{"start":{"line":1449,"column":2},"end":{"line":1451,"column":5}},"311":{"start":{"line":1450,"column":4},"end":{"line":1450,"column":31}},"312":{"start":{"line":1468,"column":2},"end":{"line":1479,"column":3}},"313":{"start":{"line":1469,"column":4},"end":{"line":1469,"column":40}},"314":{"start":{"line":1469,"column":13},"end":{"line":1469,"column":40}},"315":{"start":{"line":1470,"column":4},"end":{"line":1470,"column":35}},"316":{"start":{"line":1471,"column":4},"end":{"line":1471,"column":30}},"317":{"start":{"line":1472,"column":4},"end":{"line":1478,"column":6}},"318":{"start":{"line":1481,"column":2},"end":{"line":1481,"column":42}},"319":{"start":{"line":1482,"column":2},"end":{"line":1482,"column":44}},"320":{"start":{"line":1500,"column":2},"end":{"line":1514,"column":3}},"321":{"start":{"line":1501,"column":4},"end":{"line":1501,"column":40}},"322":{"start":{"line":1501,"column":13},"end":{"line":1501,"column":40}},"323":{"start":{"line":1502,"column":4},"end":{"line":1502,"column":35}},"324":{"start":{"line":1504,"column":4},"end":{"line":1504,"column":43}},"325":{"start":{"line":1505,"column":4},"end":{"line":1507,"column":5}},"326":{"start":{"line":1506,"column":6},"end":{"line":1506,"column":83}},"327":{"start":{"line":1509,"column":4},"end":{"line":1513,"column":6}},"328":{"start":{"line":1516,"column":2},"end":{"line":1516,"column":42}},"329":{"start":{"line":1517,"column":2},"end":{"line":1517,"column":48}},"330":{"start":{"line":1519,"column":2},"end":{"line":1527,"column":3}},"331":{"start":{"line":1520,"column":4},"end":{"line":1526,"column":6}},"332":{"start":{"line":1521,"column":6},"end":{"line":1521,"column":53}},"333":{"start":{"line":1521,"column":16},"end":{"line":1521,"column":53}},"334":{"start":{"line":1523,"column":6},"end":{"line":1525,"column":9}},"335":{"start":{"line":1524,"column":8},"end":{"line":1524,"column":32}},"336":{"start":{"line":1552,"column":2},"end":{"line":1578,"column":5}},"337":{"start":{"line":1553,"column":4},"end":{"line":1553,"column":40}},"338":{"start":{"line":1553,"column":13},"end":{"line":1553,"column":40}},"339":{"start":{"line":1554,"column":4},"end":{"line":1554,"column":35}},"340":{"start":{"line":1556,"column":4},"end":{"line":1556,"column":41}},"341":{"start":{"line":1557,"column":4},"end":{"line":1557,"column":44}},"342":{"start":{"line":1559,"column":4},"end":{"line":1559,"column":53}},"343":{"start":{"line":1561,"column":4},"end":{"line":1569,"column":5}},"344":{"start":{"line":1562,"column":6},"end":{"line":1568,"column":8}},"345":{"start":{"line":1571,"column":4},"end":{"line":1577,"column":6}},"346":{"start":{"line":1602,"column":2},"end":{"line":1614,"column":3}},"347":{"start":{"line":1603,"column":4},"end":{"line":1603,"column":40}},"348":{"start":{"line":1603,"column":13},"end":{"line":1603,"column":40}},"349":{"start":{"line":1604,"column":4},"end":{"line":1604,"column":40}},"350":{"start":{"line":1605,"column":4},"end":{"line":1605,"column":42}},"351":{"start":{"line":1607,"column":4},"end":{"line":1613,"column":6}},"352":{"start":{"line":1616,"column":2},"end":{"line":1616,"column":38}},"353":{"start":{"line":1640,"column":2},"end":{"line":1654,"column":3}},"354":{"start":{"line":1641,"column":4},"end":{"line":1641,"column":40}},"355":{"start":{"line":1641,"column":13},"end":{"line":1641,"column":40}},"356":{"start":{"line":1642,"column":4},"end":{"line":1642,"column":34}},"357":{"start":{"line":1643,"column":4},"end":{"line":1643,"column":54}},"358":{"start":{"line":1644,"column":4},"end":{"line":1644,"column":39}},"359":{"start":{"line":1646,"column":4},"end":{"line":1646,"column":31}},"360":{"start":{"line":1647,"column":4},"end":{"line":1647,"column":9}},"361":{"start":{"line":1649,"column":4},"end":{"line":1653,"column":6}},"362":{"start":{"line":1656,"column":2},"end":{"line":1656,"column":56}},"363":{"start":{"line":1657,"column":2},"end":{"line":1657,"column":57}},"364":{"start":{"line":1678,"column":2},"end":{"line":1692,"column":3}},"365":{"start":{"line":1679,"column":4},"end":{"line":1679,"column":40}},"366":{"start":{"line":1679,"column":13},"end":{"line":1679,"column":40}},"367":{"start":{"line":1680,"column":4},"end":{"line":1680,"column":34}},"368":{"start":{"line":1681,"column":4},"end":{"line":1681,"column":54}},"369":{"start":{"line":1682,"column":4},"end":{"line":1682,"column":39}},"370":{"start":{"line":1684,"column":4},"end":{"line":1684,"column":31}},"371":{"start":{"line":1685,"column":4},"end":{"line":1685,"column":9}},"372":{"start":{"line":1687,"column":4},"end":{"line":1691,"column":6}},"373":{"start":{"line":1694,"column":2},"end":{"line":1694,"column":60}},"374":{"start":{"line":1695,"column":2},"end":{"line":1695,"column":61}},"375":{"start":{"line":1716,"column":2},"end":{"line":1730,"column":3}},"376":{"start":{"line":1717,"column":4},"end":{"line":1717,"column":40}},"377":{"start":{"line":1717,"column":13},"end":{"line":1717,"column":40}},"378":{"start":{"line":1718,"column":4},"end":{"line":1718,"column":34}},"379":{"start":{"line":1719,"column":4},"end":{"line":1719,"column":54}},"380":{"start":{"line":1720,"column":4},"end":{"line":1720,"column":39}},"381":{"start":{"line":1722,"column":4},"end":{"line":1722,"column":31}},"382":{"start":{"line":1723,"column":4},"end":{"line":1723,"column":9}},"383":{"start":{"line":1725,"column":4},"end":{"line":1729,"column":6}},"384":{"start":{"line":1732,"column":2},"end":{"line":1732,"column":60}},"385":{"start":{"line":1733,"column":2},"end":{"line":1733,"column":61}},"386":{"start":{"line":1755,"column":2},"end":{"line":1777,"column":5}},"387":{"start":{"line":1756,"column":4},"end":{"line":1756,"column":35}},"388":{"start":{"line":1763,"column":4},"end":{"line":1763,"column":21}},"389":{"start":{"line":1765,"column":4},"end":{"line":1770,"column":5}},"390":{"start":{"line":1766,"column":6},"end":{"line":1766,"column":46}},"391":{"start":{"line":1768,"column":6},"end":{"line":1769,"column":21}},"392":{"start":{"line":1768,"column":36},"end":{"line":1768,"column":57}},"393":{"start":{"line":1769,"column":11},"end":{"line":1769,"column":21}},"394":{"start":{"line":1772,"column":4},"end":{"line":1776,"column":6}},"395":{"start":{"line":1797,"column":2},"end":{"line":1819,"column":5}},"396":{"start":{"line":1798,"column":4},"end":{"line":1798,"column":35}},"397":{"start":{"line":1805,"column":4},"end":{"line":1805,"column":17}},"398":{"start":{"line":1807,"column":4},"end":{"line":1812,"column":5}},"399":{"start":{"line":1808,"column":6},"end":{"line":1808,"column":38}},"400":{"start":{"line":1810,"column":6},"end":{"line":1811,"column":21}},"401":{"start":{"line":1810,"column":36},"end":{"line":1810,"column":52}},"402":{"start":{"line":1811,"column":11},"end":{"line":1811,"column":21}},"403":{"start":{"line":1814,"column":4},"end":{"line":1818,"column":6}},"404":{"start":{"line":1837,"column":2},"end":{"line":1859,"column":5}},"405":{"start":{"line":1838,"column":4},"end":{"line":1838,"column":35}},"406":{"start":{"line":1845,"column":4},"end":{"line":1845,"column":17}},"407":{"start":{"line":1847,"column":4},"end":{"line":1852,"column":5}},"408":{"start":{"line":1848,"column":6},"end":{"line":1848,"column":38}},"409":{"start":{"line":1850,"column":6},"end":{"line":1851,"column":21}},"410":{"start":{"line":1850,"column":36},"end":{"line":1850,"column":52}},"411":{"start":{"line":1851,"column":11},"end":{"line":1851,"column":21}},"412":{"start":{"line":1854,"column":4},"end":{"line":1858,"column":6}}},"branchMap":{"1":{"line":164,"type":"if","locations":[{"start":{"line":164,"column":4},"end":{"line":164,"column":4}},{"start":{"line":164,"column":4},"end":{"line":164,"column":4}}]},"2":{"line":167,"type":"cond-expr","locations":[{"start":{"line":167,"column":73},"end":{"line":167,"column":78}},{"start":{"line":167,"column":81},"end":{"line":167,"column":85}}]},"3":{"line":208,"type":"if","locations":[{"start":{"line":208,"column":4},"end":{"line":208,"column":4}},{"start":{"line":208,"column":4},"end":{"line":208,"column":4}}]},"4":{"line":212,"type":"if","locations":[{"start":{"line":212,"column":4},"end":{"line":212,"column":4}},{"start":{"line":212,"column":4},"end":{"line":212,"column":4}}]},"5":{"line":212,"type":"binary-expr","locations":[{"start":{"line":212,"column":8},"end":{"line":212,"column":31}},{"start":{"line":212,"column":35},"end":{"line":212,"column":59}}]},"6":{"line":214,"type":"if","locations":[{"start":{"line":214,"column":8},"end":{"line":214,"column":8}},{"start":{"line":214,"column":8},"end":{"line":214,"column":8}}]},"7":{"line":219,"type":"if","locations":[{"start":{"line":219,"column":11},"end":{"line":219,"column":11}},{"start":{"line":219,"column":11},"end":{"line":219,"column":11}}]},"8":{"line":220,"type":"if","locations":[{"start":{"line":220,"column":6},"end":{"line":220,"column":6}},{"start":{"line":220,"column":6},"end":{"line":220,"column":6}}]},"9":{"line":228,"type":"binary-expr","locations":[{"start":{"line":228,"column":18},"end":{"line":228,"column":34}},{"start":{"line":228,"column":39},"end":{"line":228,"column":56}}]},"10":{"line":282,"type":"cond-expr","locations":[{"start":{"line":282,"column":22},"end":{"line":282,"column":27}},{"start":{"line":282,"column":30},"end":{"line":282,"column":34}}]},"11":{"line":304,"type":"cond-expr","locations":[{"start":{"line":304,"column":22},"end":{"line":304,"column":26}},{"start":{"line":304,"column":29},"end":{"line":304,"column":34}}]},"12":{"line":417,"type":"if","locations":[{"start":{"line":417,"column":4},"end":{"line":417,"column":4}},{"start":{"line":417,"column":4},"end":{"line":417,"column":4}}]},"13":{"line":417,"type":"binary-expr","locations":[{"start":{"line":417,"column":8},"end":{"line":417,"column":26}},{"start":{"line":417,"column":30},"end":{"line":417,"column":56}}]},"14":{"line":419,"type":"if","locations":[{"start":{"line":419,"column":11},"end":{"line":419,"column":11}},{"start":{"line":419,"column":11},"end":{"line":419,"column":11}}]},"15":{"line":482,"type":"if","locations":[{"start":{"line":482,"column":4},"end":{"line":482,"column":4}},{"start":{"line":482,"column":4},"end":{"line":482,"column":4}}]},"16":{"line":484,"type":"if","locations":[{"start":{"line":484,"column":4},"end":{"line":484,"column":4}},{"start":{"line":484,"column":4},"end":{"line":484,"column":4}}]},"17":{"line":519,"type":"if","locations":[{"start":{"line":519,"column":4},"end":{"line":519,"column":4}},{"start":{"line":519,"column":4},"end":{"line":519,"column":4}}]},"18":{"line":558,"type":"if","locations":[{"start":{"line":558,"column":4},"end":{"line":558,"column":4}},{"start":{"line":558,"column":4},"end":{"line":558,"column":4}}]},"19":{"line":560,"type":"if","locations":[{"start":{"line":560,"column":4},"end":{"line":560,"column":4}},{"start":{"line":560,"column":4},"end":{"line":560,"column":4}}]},"20":{"line":607,"type":"if","locations":[{"start":{"line":607,"column":4},"end":{"line":607,"column":4}},{"start":{"line":607,"column":4},"end":{"line":607,"column":4}}]},"21":{"line":609,"type":"if","locations":[{"start":{"line":609,"column":4},"end":{"line":609,"column":4}},{"start":{"line":609,"column":4},"end":{"line":609,"column":4}}]},"22":{"line":656,"type":"if","locations":[{"start":{"line":656,"column":4},"end":{"line":656,"column":4}},{"start":{"line":656,"column":4},"end":{"line":656,"column":4}}]},"23":{"line":658,"type":"if","locations":[{"start":{"line":658,"column":4},"end":{"line":658,"column":4}},{"start":{"line":658,"column":4},"end":{"line":658,"column":4}}]},"24":{"line":705,"type":"if","locations":[{"start":{"line":705,"column":4},"end":{"line":705,"column":4}},{"start":{"line":705,"column":4},"end":{"line":705,"column":4}}]},"25":{"line":707,"type":"if","locations":[{"start":{"line":707,"column":4},"end":{"line":707,"column":4}},{"start":{"line":707,"column":4},"end":{"line":707,"column":4}}]},"26":{"line":753,"type":"if","locations":[{"start":{"line":753,"column":4},"end":{"line":753,"column":4}},{"start":{"line":753,"column":4},"end":{"line":753,"column":4}}]},"27":{"line":756,"type":"if","locations":[{"start":{"line":756,"column":4},"end":{"line":756,"column":4}},{"start":{"line":756,"column":4},"end":{"line":756,"column":4}}]},"28":{"line":760,"type":"binary-expr","locations":[{"start":{"line":760,"column":10},"end":{"line":760,"column":22}},{"start":{"line":760,"column":26},"end":{"line":760,"column":39}}]},"29":{"line":766,"type":"binary-expr","locations":[{"start":{"line":766,"column":10},"end":{"line":766,"column":22}},{"start":{"line":766,"column":26},"end":{"line":766,"column":39}}]},"30":{"line":793,"type":"if","locations":[{"start":{"line":793,"column":4},"end":{"line":793,"column":4}},{"start":{"line":793,"column":4},"end":{"line":793,"column":4}}]},"31":{"line":878,"type":"if","locations":[{"start":{"line":878,"column":4},"end":{"line":878,"column":4}},{"start":{"line":878,"column":4},"end":{"line":878,"column":4}}]},"32":{"line":881,"type":"cond-expr","locations":[{"start":{"line":881,"column":30},"end":{"line":881,"column":46}},{"start":{"line":881,"column":49},"end":{"line":881,"column":60}}]},"33":{"line":884,"type":"cond-expr","locations":[{"start":{"line":884,"column":28},"end":{"line":884,"column":52}},{"start":{"line":884,"column":55},"end":{"line":884,"column":59}}]},"34":{"line":885,"type":"cond-expr","locations":[{"start":{"line":886,"column":10},"end":{"line":886,"column":25}},{"start":{"line":887,"column":10},"end":{"line":887,"column":34}}]},"35":{"line":888,"type":"cond-expr","locations":[{"start":{"line":889,"column":10},"end":{"line":889,"column":24}},{"start":{"line":890,"column":10},"end":{"line":890,"column":19}}]},"36":{"line":892,"type":"if","locations":[{"start":{"line":892,"column":4},"end":{"line":892,"column":4}},{"start":{"line":892,"column":4},"end":{"line":892,"column":4}}]},"37":{"line":892,"type":"binary-expr","locations":[{"start":{"line":892,"column":8},"end":{"line":892,"column":14}},{"start":{"line":892,"column":18},"end":{"line":892,"column":38}}]},"38":{"line":893,"type":"if","locations":[{"start":{"line":893,"column":6},"end":{"line":893,"column":6}},{"start":{"line":893,"column":6},"end":{"line":893,"column":6}}]},"39":{"line":894,"type":"cond-expr","locations":[{"start":{"line":894,"column":30},"end":{"line":894,"column":40}},{"start":{"line":894,"column":43},"end":{"line":894,"column":45}}]},"40":{"line":904,"type":"if","locations":[{"start":{"line":904,"column":4},"end":{"line":904,"column":4}},{"start":{"line":904,"column":4},"end":{"line":904,"column":4}}]},"41":{"line":934,"type":"if","locations":[{"start":{"line":934,"column":4},"end":{"line":934,"column":4}},{"start":{"line":934,"column":4},"end":{"line":934,"column":4}}]},"42":{"line":967,"type":"if","locations":[{"start":{"line":967,"column":4},"end":{"line":967,"column":4}},{"start":{"line":967,"column":4},"end":{"line":967,"column":4}}]},"43":{"line":971,"type":"if","locations":[{"start":{"line":971,"column":4},"end":{"line":971,"column":4}},{"start":{"line":971,"column":4},"end":{"line":971,"column":4}}]},"44":{"line":974,"type":"if","locations":[{"start":{"line":974,"column":4},"end":{"line":974,"column":4}},{"start":{"line":974,"column":4},"end":{"line":974,"column":4}}]},"45":{"line":974,"type":"binary-expr","locations":[{"start":{"line":974,"column":8},"end":{"line":974,"column":24}},{"start":{"line":974,"column":28},"end":{"line":974,"column":38}}]},"46":{"line":1040,"type":"if","locations":[{"start":{"line":1040,"column":4},"end":{"line":1040,"column":4}},{"start":{"line":1040,"column":4},"end":{"line":1040,"column":4}}]},"47":{"line":1072,"type":"if","locations":[{"start":{"line":1072,"column":4},"end":{"line":1072,"column":4}},{"start":{"line":1072,"column":4},"end":{"line":1072,"column":4}}]},"48":{"line":1099,"type":"if","locations":[{"start":{"line":1099,"column":4},"end":{"line":1099,"column":4}},{"start":{"line":1099,"column":4},"end":{"line":1099,"column":4}}]},"49":{"line":1156,"type":"switch","locations":[{"start":{"line":1157,"column":6},"end":{"line":1159,"column":14}},{"start":{"line":1160,"column":6},"end":{"line":1163,"column":14}},{"start":{"line":1164,"column":6},"end":{"line":1165,"column":53}}]},"50":{"line":1158,"type":"if","locations":[{"start":{"line":1158,"column":8},"end":{"line":1158,"column":8}},{"start":{"line":1158,"column":8},"end":{"line":1158,"column":8}}]},"51":{"line":1161,"type":"if","locations":[{"start":{"line":1161,"column":8},"end":{"line":1161,"column":8}},{"start":{"line":1161,"column":8},"end":{"line":1161,"column":8}}]},"52":{"line":1168,"type":"if","locations":[{"start":{"line":1168,"column":4},"end":{"line":1168,"column":4}},{"start":{"line":1168,"column":4},"end":{"line":1168,"column":4}}]},"53":{"line":1176,"type":"if","locations":[{"start":{"line":1176,"column":4},"end":{"line":1176,"column":4}},{"start":{"line":1176,"column":4},"end":{"line":1176,"column":4}}]},"54":{"line":1176,"type":"binary-expr","locations":[{"start":{"line":1176,"column":8},"end":{"line":1176,"column":12}},{"start":{"line":1176,"column":16},"end":{"line":1176,"column":20}}]},"55":{"line":1181,"type":"if","locations":[{"start":{"line":1181,"column":4},"end":{"line":1181,"column":4}},{"start":{"line":1181,"column":4},"end":{"line":1181,"column":4}}]},"56":{"line":1189,"type":"if","locations":[{"start":{"line":1189,"column":4},"end":{"line":1189,"column":4}},{"start":{"line":1189,"column":4},"end":{"line":1189,"column":4}}]},"57":{"line":1193,"type":"if","locations":[{"start":{"line":1193,"column":6},"end":{"line":1193,"column":6}},{"start":{"line":1193,"column":6},"end":{"line":1193,"column":6}}]},"58":{"line":1193,"type":"binary-expr","locations":[{"start":{"line":1193,"column":10},"end":{"line":1193,"column":31}},{"start":{"line":1193,"column":35},"end":{"line":1193,"column":58}}]},"59":{"line":1194,"type":"binary-expr","locations":[{"start":{"line":1194,"column":13},"end":{"line":1194,"column":15}},{"start":{"line":1194,"column":19},"end":{"line":1194,"column":47}}]},"60":{"line":1199,"type":"if","locations":[{"start":{"line":1199,"column":4},"end":{"line":1199,"column":4}},{"start":{"line":1199,"column":4},"end":{"line":1199,"column":4}}]},"61":{"line":1204,"type":"if","locations":[{"start":{"line":1204,"column":6},"end":{"line":1204,"column":6}},{"start":{"line":1204,"column":6},"end":{"line":1204,"column":6}}]},"62":{"line":1207,"type":"if","locations":[{"start":{"line":1207,"column":6},"end":{"line":1207,"column":6}},{"start":{"line":1207,"column":6},"end":{"line":1207,"column":6}}]},"63":{"line":1215,"type":"cond-expr","locations":[{"start":{"line":1215,"column":21},"end":{"line":1215,"column":28}},{"start":{"line":1215,"column":31},"end":{"line":1215,"column":37}}]},"64":{"line":1218,"type":"cond-expr","locations":[{"start":{"line":1218,"column":36},"end":{"line":1218,"column":46}},{"start":{"line":1218,"column":49},"end":{"line":1218,"column":56}}]},"65":{"line":1271,"type":"if","locations":[{"start":{"line":1271,"column":4},"end":{"line":1271,"column":4}},{"start":{"line":1271,"column":4},"end":{"line":1271,"column":4}}]},"66":{"line":1280,"type":"if","locations":[{"start":{"line":1280,"column":4},"end":{"line":1280,"column":4}},{"start":{"line":1280,"column":4},"end":{"line":1280,"column":4}}]},"67":{"line":1283,"type":"if","locations":[{"start":{"line":1283,"column":11},"end":{"line":1283,"column":11}},{"start":{"line":1283,"column":11},"end":{"line":1283,"column":11}}]},"68":{"line":1283,"type":"binary-expr","locations":[{"start":{"line":1283,"column":15},"end":{"line":1283,"column":26}},{"start":{"line":1283,"column":31},"end":{"line":1283,"column":60}},{"start":{"line":1283,"column":64},"end":{"line":1283,"column":95}}]},"69":{"line":1286,"type":"if","locations":[{"start":{"line":1286,"column":11},"end":{"line":1286,"column":11}},{"start":{"line":1286,"column":11},"end":{"line":1286,"column":11}}]},"70":{"line":1286,"type":"binary-expr","locations":[{"start":{"line":1286,"column":15},"end":{"line":1286,"column":26}},{"start":{"line":1286,"column":30},"end":{"line":1286,"column":58}}]},"71":{"line":1290,"type":"if","locations":[{"start":{"line":1290,"column":11},"end":{"line":1290,"column":11}},{"start":{"line":1290,"column":11},"end":{"line":1290,"column":11}}]},"72":{"line":1292,"type":"if","locations":[{"start":{"line":1292,"column":6},"end":{"line":1292,"column":6}},{"start":{"line":1292,"column":6},"end":{"line":1292,"column":6}}]},"73":{"line":1292,"type":"binary-expr","locations":[{"start":{"line":1292,"column":10},"end":{"line":1292,"column":15}},{"start":{"line":1292,"column":20},"end":{"line":1292,"column":36}},{"start":{"line":1292,"column":40},"end":{"line":1292,"column":61}}]},"74":{"line":1293,"type":"binary-expr","locations":[{"start":{"line":1293,"column":15},"end":{"line":1293,"column":31}},{"start":{"line":1293,"column":35},"end":{"line":1293,"column":59}}]},"75":{"line":1303,"type":"if","locations":[{"start":{"line":1303,"column":6},"end":{"line":1303,"column":6}},{"start":{"line":1303,"column":6},"end":{"line":1303,"column":6}}]},"76":{"line":1308,"type":"cond-expr","locations":[{"start":{"line":1308,"column":45},"end":{"line":1308,"column":68}},{"start":{"line":1308,"column":71},"end":{"line":1308,"column":83}}]},"77":{"line":1309,"type":"cond-expr","locations":[{"start":{"line":1309,"column":36},"end":{"line":1309,"column":50}},{"start":{"line":1309,"column":53},"end":{"line":1309,"column":56}}]},"78":{"line":1317,"type":"if","locations":[{"start":{"line":1317,"column":6},"end":{"line":1317,"column":6}},{"start":{"line":1317,"column":6},"end":{"line":1317,"column":6}}]},"79":{"line":1323,"type":"cond-expr","locations":[{"start":{"line":1323,"column":36},"end":{"line":1323,"column":50}},{"start":{"line":1323,"column":53},"end":{"line":1323,"column":56}}]},"80":{"line":1326,"type":"if","locations":[{"start":{"line":1326,"column":8},"end":{"line":1326,"column":8}},{"start":{"line":1326,"column":8},"end":{"line":1326,"column":8}}]},"81":{"line":1333,"type":"cond-expr","locations":[{"start":{"line":1334,"column":10},"end":{"line":1334,"column":21}},{"start":{"line":1335,"column":10},"end":{"line":1335,"column":18}}]},"82":{"line":1333,"type":"binary-expr","locations":[{"start":{"line":1333,"column":20},"end":{"line":1333,"column":43}},{"start":{"line":1333,"column":47},"end":{"line":1333,"column":63}}]},"83":{"line":1337,"type":"if","locations":[{"start":{"line":1337,"column":6},"end":{"line":1337,"column":6}},{"start":{"line":1337,"column":6},"end":{"line":1337,"column":6}}]},"84":{"line":1337,"type":"binary-expr","locations":[{"start":{"line":1337,"column":11},"end":{"line":1337,"column":26}},{"start":{"line":1337,"column":31},"end":{"line":1337,"column":37}},{"start":{"line":1337,"column":41},"end":{"line":1337,"column":65}}]},"85":{"line":1348,"type":"if","locations":[{"start":{"line":1348,"column":13},"end":{"line":1348,"column":13}},{"start":{"line":1348,"column":13},"end":{"line":1348,"column":13}}]},"86":{"line":1348,"type":"binary-expr","locations":[{"start":{"line":1348,"column":18},"end":{"line":1348,"column":33}},{"start":{"line":1348,"column":38},"end":{"line":1348,"column":44}},{"start":{"line":1348,"column":48},"end":{"line":1348,"column":74}}]},"87":{"line":1366,"type":"cond-expr","locations":[{"start":{"line":1367,"column":10},"end":{"line":1367,"column":14}},{"start":{"line":1368,"column":10},"end":{"line":1370,"column":22}}]},"88":{"line":1368,"type":"cond-expr","locations":[{"start":{"line":1369,"column":12},"end":{"line":1369,"column":20}},{"start":{"line":1370,"column":12},"end":{"line":1370,"column":22}}]},"89":{"line":1372,"type":"if","locations":[{"start":{"line":1372,"column":4},"end":{"line":1372,"column":4}},{"start":{"line":1372,"column":4},"end":{"line":1372,"column":4}}]},"90":{"line":1380,"type":"cond-expr","locations":[{"start":{"line":1380,"column":41},"end":{"line":1380,"column":64}},{"start":{"line":1380,"column":67},"end":{"line":1380,"column":79}}]},"91":{"line":1381,"type":"cond-expr","locations":[{"start":{"line":1381,"column":40},"end":{"line":1381,"column":62}},{"start":{"line":1381,"column":65},"end":{"line":1381,"column":76}}]},"92":{"line":1415,"type":"if","locations":[{"start":{"line":1415,"column":4},"end":{"line":1415,"column":4}},{"start":{"line":1415,"column":4},"end":{"line":1415,"column":4}}]},"93":{"line":1418,"type":"cond-expr","locations":[{"start":{"line":1419,"column":10},"end":{"line":1419,"column":31}},{"start":{"line":1420,"column":10},"end":{"line":1420,"column":21}}]},"94":{"line":1418,"type":"binary-expr","locations":[{"start":{"line":1418,"column":19},"end":{"line":1418,"column":45}},{"start":{"line":1418,"column":49},"end":{"line":1418,"column":56}}]},"95":{"line":1469,"type":"if","locations":[{"start":{"line":1469,"column":4},"end":{"line":1469,"column":4}},{"start":{"line":1469,"column":4},"end":{"line":1469,"column":4}}]},"96":{"line":1476,"type":"cond-expr","locations":[{"start":{"line":1476,"column":22},"end":{"line":1476,"column":27}},{"start":{"line":1476,"column":30},"end":{"line":1476,"column":34}}]},"97":{"line":1501,"type":"if","locations":[{"start":{"line":1501,"column":4},"end":{"line":1501,"column":4}},{"start":{"line":1501,"column":4},"end":{"line":1501,"column":4}}]},"98":{"line":1505,"type":"if","locations":[{"start":{"line":1505,"column":4},"end":{"line":1505,"column":4}},{"start":{"line":1505,"column":4},"end":{"line":1505,"column":4}}]},"99":{"line":1505,"type":"binary-expr","locations":[{"start":{"line":1505,"column":8},"end":{"line":1505,"column":37}},{"start":{"line":1505,"column":41},"end":{"line":1505,"column":67}}]},"100":{"line":1521,"type":"if","locations":[{"start":{"line":1521,"column":6},"end":{"line":1521,"column":6}},{"start":{"line":1521,"column":6},"end":{"line":1521,"column":6}}]},"101":{"line":1553,"type":"if","locations":[{"start":{"line":1553,"column":4},"end":{"line":1553,"column":4}},{"start":{"line":1553,"column":4},"end":{"line":1553,"column":4}}]},"102":{"line":1559,"type":"cond-expr","locations":[{"start":{"line":1559,"column":35},"end":{"line":1559,"column":40}},{"start":{"line":1559,"column":43},"end":{"line":1559,"column":52}}]},"103":{"line":1561,"type":"if","locations":[{"start":{"line":1561,"column":4},"end":{"line":1561,"column":4}},{"start":{"line":1561,"column":4},"end":{"line":1561,"column":4}}]},"104":{"line":1572,"type":"binary-expr","locations":[{"start":{"line":1572,"column":8},"end":{"line":1572,"column":36}},{"start":{"line":1572,"column":40},"end":{"line":1572,"column":68}}]},"105":{"line":1603,"type":"if","locations":[{"start":{"line":1603,"column":4},"end":{"line":1603,"column":4}},{"start":{"line":1603,"column":4},"end":{"line":1603,"column":4}}]},"106":{"line":1641,"type":"if","locations":[{"start":{"line":1641,"column":4},"end":{"line":1641,"column":4}},{"start":{"line":1641,"column":4},"end":{"line":1641,"column":4}}]},"107":{"line":1679,"type":"if","locations":[{"start":{"line":1679,"column":4},"end":{"line":1679,"column":4}},{"start":{"line":1679,"column":4},"end":{"line":1679,"column":4}}]},"108":{"line":1717,"type":"if","locations":[{"start":{"line":1717,"column":4},"end":{"line":1717,"column":4}},{"start":{"line":1717,"column":4},"end":{"line":1717,"column":4}}]},"109":{"line":1768,"type":"if","locations":[{"start":{"line":1768,"column":6},"end":{"line":1768,"column":6}},{"start":{"line":1768,"column":6},"end":{"line":1768,"column":6}}]},"110":{"line":1810,"type":"if","locations":[{"start":{"line":1810,"column":6},"end":{"line":1810,"column":6}},{"start":{"line":1810,"column":6},"end":{"line":1810,"column":6}}]},"111":{"line":1850,"type":"if","locations":[{"start":{"line":1850,"column":6},"end":{"line":1850,"column":6}},{"start":{"line":1850,"column":6},"end":{"line":1850,"column":6}}]}},"code":["/*!"," * chai"," * http://chaijs.com"," * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>"," * MIT Licensed"," */","","module.exports = function (chai, _) {","  var Assertion = chai.Assertion","    , toString = Object.prototype.toString","    , flag = _.flag;","","  /**","   * ### Language Chains","   *","   * The following are provided as chainable getters to","   * improve the readability of your assertions. They","   * do not provide testing capabilities unless they","   * have been overwritten by a plugin.","   *","   * **Chains**","   *","   * - to","   * - be","   * - been","   * - is","   * - that","   * - which","   * - and","   * - has","   * - have","   * - with","   * - at","   * - of","   * - same","   *","   * @name language chains","   * @namespace BDD","   * @api public","   */","","  [ 'to', 'be', 'been'","  , 'is', 'and', 'has', 'have'","  , 'with', 'that', 'which', 'at'","  , 'of', 'same' ].forEach(function (chain) {","    Assertion.addProperty(chain, function () {","      return this;","    });","  });","","  /**","   * ### .not","   *","   * Negates any of assertions following in the chain.","   *","   *     expect(foo).to.not.equal('bar');","   *     expect(goodFn).to.not.throw(Error);","   *     expect({ foo: 'baz' }).to.have.property('foo')","   *       .and.not.equal('bar');","   *","   * @name not","   * @namespace BDD","   * @api public","   */","","  Assertion.addProperty('not', function () {","    flag(this, 'negate', true);","  });","","  /**","   * ### .deep","   *","   * Sets the `deep` flag, later used by the `equal` and","   * `property` assertions.","   *","   *     expect(foo).to.deep.equal({ bar: 'baz' });","   *     expect({ foo: { bar: { baz: 'quux' } } })","   *       .to.have.deep.property('foo.bar.baz', 'quux');","   *","   * `.deep.property` special characters can be escaped","   * by adding two slashes before the `.` or `[]`.","   *","   *     var deepCss = { '.link': { '[target]': 42 }};","   *     expect(deepCss).to.have.deep.property('\\\\.link.\\\\[target\\\\]', 42);","   *","   * @name deep","   * @namespace BDD","   * @api public","   */","","  Assertion.addProperty('deep', function () {","    flag(this, 'deep', true);","  });","","  /**","   * ### .any","   *","   * Sets the `any` flag, (opposite of the `all` flag)","   * later used in the `keys` assertion.","   *","   *     expect(foo).to.have.any.keys('bar', 'baz');","   *","   * @name any","   * @namespace BDD","   * @api public","   */","","  Assertion.addProperty('any', function () {","    flag(this, 'any', true);","    flag(this, 'all', false)","  });","","","  /**","   * ### .all","   *","   * Sets the `all` flag (opposite of the `any` flag)","   * later used by the `keys` assertion.","   *","   *     expect(foo).to.have.all.keys('bar', 'baz');","   *","   * @name all","   * @namespace BDD","   * @api public","   */","","  Assertion.addProperty('all', function () {","    flag(this, 'all', true);","    flag(this, 'any', false);","  });","","  /**","   * ### .a(type)","   *","   * The `a` and `an` assertions are aliases that can be","   * used either as language chains or to assert a value's","   * type.","   *","   *     // typeof","   *     expect('test').to.be.a('string');","   *     expect({ foo: 'bar' }).to.be.an('object');","   *     expect(null).to.be.a('null');","   *     expect(undefined).to.be.an('undefined');","   *     expect(new Error).to.be.an('error');","   *     expect(new Promise).to.be.a('promise');","   *     expect(new Float32Array()).to.be.a('float32array');","   *     expect(Symbol()).to.be.a('symbol');","   *","   *     // es6 overrides","   *     expect({[Symbol.toStringTag]:()=>'foo'}).to.be.a('foo');","   *","   *     // language chain","   *     expect(foo).to.be.an.instanceof(Foo);","   *","   * @name a","   * @alias an","   * @param {String} type","   * @param {String} message _optional_","   * @namespace BDD","   * @api public","   */","","  function an (type, msg) {","    if (msg) flag(this, 'message', msg);","    type = type.toLowerCase();","    var obj = flag(this, 'object')","      , article = ~[ 'a', 'e', 'i', 'o', 'u' ].indexOf(type.charAt(0)) ? 'an ' : 'a ';","","    this.assert(","        type === _.type(obj)","      , 'expected #{this} to be ' + article + type","      , 'expected #{this} not to be ' + article + type","    );","  }","","  Assertion.addChainableMethod('an', an);","  Assertion.addChainableMethod('a', an);","","  /**","   * ### .include(value)","   *","   * The `include` and `contain` assertions can be used as either property","   * based language chains or as methods to assert the inclusion of an object","   * in an array or a substring in a string. When used as language chains,","   * they toggle the `contains` flag for the `keys` assertion.","   *","   *     expect([1,2,3]).to.include(2);","   *     expect('foobar').to.contain('foo');","   *     expect({ foo: 'bar', hello: 'universe' }).to.include.keys('foo');","   *","   * @name include","   * @alias contain","   * @alias includes","   * @alias contains","   * @param {Object|String|Number} obj","   * @param {String} message _optional_","   * @namespace BDD","   * @api public","   */","","  function includeChainingBehavior () {","    flag(this, 'contains', true);","  }","","  function include (val, msg) {","    _.expectTypes(this, ['array', 'object', 'string']);","","    if (msg) flag(this, 'message', msg);","    var obj = flag(this, 'object');","    var expected = false;","","    if (_.type(obj) === 'array' && _.type(val) === 'object') {","      for (var i in obj) {","        if (_.eql(obj[i], val)) {","          expected = true;","          break;","        }","      }","    } else if (_.type(val) === 'object') {","      if (!flag(this, 'negate')) {","        for (var k in val) new Assertion(obj).property(k, val[k]);","        return;","      }","      var subset = {};","      for (var k in val) subset[k] = obj[k];","      expected = _.eql(subset, val);","    } else {","      expected = (obj != undefined) && ~obj.indexOf(val);","    }","    this.assert(","        expected","      , 'expected #{this} to include ' + _.inspect(val)","      , 'expected #{this} to not include ' + _.inspect(val));","  }","","  Assertion.addChainableMethod('include', include, includeChainingBehavior);","  Assertion.addChainableMethod('contain', include, includeChainingBehavior);","  Assertion.addChainableMethod('contains', include, includeChainingBehavior);","  Assertion.addChainableMethod('includes', include, includeChainingBehavior);","","  /**","   * ### .ok","   *","   * Asserts that the target is truthy.","   *","   *     expect('everything').to.be.ok;","   *     expect(1).to.be.ok;","   *     expect(false).to.not.be.ok;","   *     expect(undefined).to.not.be.ok;","   *     expect(null).to.not.be.ok;","   *","   * @name ok","   * @namespace BDD","   * @api public","   */","","  Assertion.addProperty('ok', function () {","    this.assert(","        flag(this, 'object')","      , 'expected #{this} to be truthy'","      , 'expected #{this} to be falsy');","  });","","  /**","   * ### .true","   *","   * Asserts that the target is `true`.","   *","   *     expect(true).to.be.true;","   *     expect(1).to.not.be.true;","   *","   * @name true","   * @namespace BDD","   * @api public","   */","","  Assertion.addProperty('true', function () {","    this.assert(","        true === flag(this, 'object')","      , 'expected #{this} to be true'","      , 'expected #{this} to be false'","      , this.negate ? false : true","    );","  });","","  /**","   * ### .false","   *","   * Asserts that the target is `false`.","   *","   *     expect(false).to.be.false;","   *     expect(0).to.not.be.false;","   *","   * @name false","   * @namespace BDD","   * @api public","   */","","  Assertion.addProperty('false', function () {","    this.assert(","        false === flag(this, 'object')","      , 'expected #{this} to be false'","      , 'expected #{this} to be true'","      , this.negate ? true : false","    );","  });","","  /**","   * ### .null","   *","   * Asserts that the target is `null`.","   *","   *     expect(null).to.be.null;","   *     expect(undefined).to.not.be.null;","   *","   * @name null","   * @namespace BDD","   * @api public","   */","","  Assertion.addProperty('null', function () {","    this.assert(","        null === flag(this, 'object')","      , 'expected #{this} to be null'","      , 'expected #{this} not to be null'","    );","  });","","  /**","   * ### .undefined","   *","   * Asserts that the target is `undefined`.","   *","   *     expect(undefined).to.be.undefined;","   *     expect(null).to.not.be.undefined;","   *","   * @name undefined","   * @namespace BDD","   * @api public","   */","","  Assertion.addProperty('undefined', function () {","    this.assert(","        undefined === flag(this, 'object')","      , 'expected #{this} to be undefined'","      , 'expected #{this} not to be undefined'","    );","  });","","  /**","   * ### .NaN","   * Asserts that the target is `NaN`.","   *","   *     expect('foo').to.be.NaN;","   *     expect(4).not.to.be.NaN;","   *","   * @name NaN","   * @namespace BDD","   * @api public","   */","","  Assertion.addProperty('NaN', function () {","    this.assert(","        isNaN(flag(this, 'object'))","        , 'expected #{this} to be NaN'","        , 'expected #{this} not to be NaN'","    );","  });","","  /**","   * ### .exist","   *","   * Asserts that the target is neither `null` nor `undefined`.","   *","   *     var foo = 'hi'","   *       , bar = null","   *       , baz;","   *","   *     expect(foo).to.exist;","   *     expect(bar).to.not.exist;","   *     expect(baz).to.not.exist;","   *","   * @name exist","   * @namespace BDD","   * @api public","   */","","  Assertion.addProperty('exist', function () {","    this.assert(","        null != flag(this, 'object')","      , 'expected #{this} to exist'","      , 'expected #{this} to not exist'","    );","  });","","","  /**","   * ### .empty","   *","   * Asserts that the target's length is `0`. For arrays and strings, it checks","   * the `length` property. For objects, it gets the count of","   * enumerable keys.","   *","   *     expect([]).to.be.empty;","   *     expect('').to.be.empty;","   *     expect({}).to.be.empty;","   *","   * @name empty","   * @namespace BDD","   * @api public","   */","","  Assertion.addProperty('empty', function () {","    var obj = flag(this, 'object')","      , expected = obj;","","    if (Array.isArray(obj) || 'string' === typeof object) {","      expected = obj.length;","    } else if (typeof obj === 'object') {","      expected = Object.keys(obj).length;","    }","","    this.assert(","        !expected","      , 'expected #{this} to be empty'","      , 'expected #{this} not to be empty'","    );","  });","","  /**","   * ### .arguments","   *","   * Asserts that the target is an arguments object.","   *","   *     function test () {","   *       expect(arguments).to.be.arguments;","   *     }","   *","   * @name arguments","   * @alias Arguments","   * @namespace BDD","   * @api public","   */","","  function checkArguments () {","    var obj = flag(this, 'object')","      , type = Object.prototype.toString.call(obj);","    this.assert(","        '[object Arguments]' === type","      , 'expected #{this} to be arguments but got ' + type","      , 'expected #{this} to not be arguments'","    );","  }","","  Assertion.addProperty('arguments', checkArguments);","  Assertion.addProperty('Arguments', checkArguments);","","  /**","   * ### .equal(value)","   *","   * Asserts that the target is strictly equal (`===`) to `value`.","   * Alternately, if the `deep` flag is set, asserts that","   * the target is deeply equal to `value`.","   *","   *     expect('hello').to.equal('hello');","   *     expect(42).to.equal(42);","   *     expect(1).to.not.equal(true);","   *     expect({ foo: 'bar' }).to.not.equal({ foo: 'bar' });","   *     expect({ foo: 'bar' }).to.deep.equal({ foo: 'bar' });","   *","   * @name equal","   * @alias equals","   * @alias eq","   * @alias deep.equal","   * @param {Mixed} value","   * @param {String} message _optional_","   * @namespace BDD","   * @api public","   */","","  function assertEqual (val, msg) {","    if (msg) flag(this, 'message', msg);","    var obj = flag(this, 'object');","    if (flag(this, 'deep')) {","      return this.eql(val);","    } else {","      this.assert(","          val === obj","        , 'expected #{this} to equal #{exp}'","        , 'expected #{this} to not equal #{exp}'","        , val","        , this._obj","        , true","      );","    }","  }","","  Assertion.addMethod('equal', assertEqual);","  Assertion.addMethod('equals', assertEqual);","  Assertion.addMethod('eq', assertEqual);","","  /**","   * ### .eql(value)","   *","   * Asserts that the target is deeply equal to `value`.","   *","   *     expect({ foo: 'bar' }).to.eql({ foo: 'bar' });","   *     expect([ 1, 2, 3 ]).to.eql([ 1, 2, 3 ]);","   *","   * @name eql","   * @alias eqls","   * @param {Mixed} value","   * @param {String} message _optional_","   * @namespace BDD","   * @api public","   */","","  function assertEql(obj, msg) {","    if (msg) flag(this, 'message', msg);","    this.assert(","        _.eql(obj, flag(this, 'object'))","      , 'expected #{this} to deeply equal #{exp}'","      , 'expected #{this} to not deeply equal #{exp}'","      , obj","      , this._obj","      , true","    );","  }","","  Assertion.addMethod('eql', assertEql);","  Assertion.addMethod('eqls', assertEql);","","  /**","   * ### .above(value)","   *","   * Asserts that the target is greater than `value`.","   *","   *     expect(10).to.be.above(5);","   *","   * Can also be used in conjunction with `length` to","   * assert a minimum length. The benefit being a","   * more informative error message than if the length","   * was supplied directly.","   *","   *     expect('foo').to.have.length.above(2);","   *     expect([ 1, 2, 3 ]).to.have.length.above(2);","   *","   * @name above","   * @alias gt","   * @alias greaterThan","   * @param {Number} value","   * @param {String} message _optional_","   * @namespace BDD","   * @api public","   */","","  function assertAbove (n, msg) {","    if (msg) flag(this, 'message', msg);","    var obj = flag(this, 'object');","    if (flag(this, 'doLength')) {","      new Assertion(obj, msg).to.have.property('length');","      var len = obj.length;","      this.assert(","          len > n","        , 'expected #{this} to have a length above #{exp} but got #{act}'","        , 'expected #{this} to not have a length above #{exp}'","        , n","        , len","      );","    } else {","      this.assert(","          obj > n","        , 'expected #{this} to be above ' + n","        , 'expected #{this} to be at most ' + n","      );","    }","  }","","  Assertion.addMethod('above', assertAbove);","  Assertion.addMethod('gt', assertAbove);","  Assertion.addMethod('greaterThan', assertAbove);","","  /**","   * ### .least(value)","   *","   * Asserts that the target is greater than or equal to `value`.","   *","   *     expect(10).to.be.at.least(10);","   *","   * Can also be used in conjunction with `length` to","   * assert a minimum length. The benefit being a","   * more informative error message than if the length","   * was supplied directly.","   *","   *     expect('foo').to.have.length.of.at.least(2);","   *     expect([ 1, 2, 3 ]).to.have.length.of.at.least(3);","   *","   * @name least","   * @alias gte","   * @param {Number} value","   * @param {String} message _optional_","   * @namespace BDD","   * @api public","   */","","  function assertLeast (n, msg) {","    if (msg) flag(this, 'message', msg);","    var obj = flag(this, 'object');","    if (flag(this, 'doLength')) {","      new Assertion(obj, msg).to.have.property('length');","      var len = obj.length;","      this.assert(","          len >= n","        , 'expected #{this} to have a length at least #{exp} but got #{act}'","        , 'expected #{this} to have a length below #{exp}'","        , n","        , len","      );","    } else {","      this.assert(","          obj >= n","        , 'expected #{this} to be at least ' + n","        , 'expected #{this} to be below ' + n","      );","    }","  }","","  Assertion.addMethod('least', assertLeast);","  Assertion.addMethod('gte', assertLeast);","","  /**","   * ### .below(value)","   *","   * Asserts that the target is less than `value`.","   *","   *     expect(5).to.be.below(10);","   *","   * Can also be used in conjunction with `length` to","   * assert a maximum length. The benefit being a","   * more informative error message than if the length","   * was supplied directly.","   *","   *     expect('foo').to.have.length.below(4);","   *     expect([ 1, 2, 3 ]).to.have.length.below(4);","   *","   * @name below","   * @alias lt","   * @alias lessThan","   * @param {Number} value","   * @param {String} message _optional_","   * @namespace BDD","   * @api public","   */","","  function assertBelow (n, msg) {","    if (msg) flag(this, 'message', msg);","    var obj = flag(this, 'object');","    if (flag(this, 'doLength')) {","      new Assertion(obj, msg).to.have.property('length');","      var len = obj.length;","      this.assert(","          len < n","        , 'expected #{this} to have a length below #{exp} but got #{act}'","        , 'expected #{this} to not have a length below #{exp}'","        , n","        , len","      );","    } else {","      this.assert(","          obj < n","        , 'expected #{this} to be below ' + n","        , 'expected #{this} to be at least ' + n","      );","    }","  }","","  Assertion.addMethod('below', assertBelow);","  Assertion.addMethod('lt', assertBelow);","  Assertion.addMethod('lessThan', assertBelow);","","  /**","   * ### .most(value)","   *","   * Asserts that the target is less than or equal to `value`.","   *","   *     expect(5).to.be.at.most(5);","   *","   * Can also be used in conjunction with `length` to","   * assert a maximum length. The benefit being a","   * more informative error message than if the length","   * was supplied directly.","   *","   *     expect('foo').to.have.length.of.at.most(4);","   *     expect([ 1, 2, 3 ]).to.have.length.of.at.most(3);","   *","   * @name most","   * @alias lte","   * @param {Number} value","   * @param {String} message _optional_","   * @namespace BDD","   * @api public","   */","","  function assertMost (n, msg) {","    if (msg) flag(this, 'message', msg);","    var obj = flag(this, 'object');","    if (flag(this, 'doLength')) {","      new Assertion(obj, msg).to.have.property('length');","      var len = obj.length;","      this.assert(","          len <= n","        , 'expected #{this} to have a length at most #{exp} but got #{act}'","        , 'expected #{this} to have a length above #{exp}'","        , n","        , len","      );","    } else {","      this.assert(","          obj <= n","        , 'expected #{this} to be at most ' + n","        , 'expected #{this} to be above ' + n","      );","    }","  }","","  Assertion.addMethod('most', assertMost);","  Assertion.addMethod('lte', assertMost);","","  /**","   * ### .within(start, finish)","   *","   * Asserts that the target is within a range.","   *","   *     expect(7).to.be.within(5,10);","   *","   * Can also be used in conjunction with `length` to","   * assert a length range. The benefit being a","   * more informative error message than if the length","   * was supplied directly.","   *","   *     expect('foo').to.have.length.within(2,4);","   *     expect([ 1, 2, 3 ]).to.have.length.within(2,4);","   *","   * @name within","   * @param {Number} start lowerbound inclusive","   * @param {Number} finish upperbound inclusive","   * @param {String} message _optional_","   * @namespace BDD","   * @api public","   */","","  Assertion.addMethod('within', function (start, finish, msg) {","    if (msg) flag(this, 'message', msg);","    var obj = flag(this, 'object')","      , range = start + '..' + finish;","    if (flag(this, 'doLength')) {","      new Assertion(obj, msg).to.have.property('length');","      var len = obj.length;","      this.assert(","          len >= start && len <= finish","        , 'expected #{this} to have a length within ' + range","        , 'expected #{this} to not have a length within ' + range","      );","    } else {","      this.assert(","          obj >= start && obj <= finish","        , 'expected #{this} to be within ' + range","        , 'expected #{this} to not be within ' + range","      );","    }","  });","","  /**","   * ### .instanceof(constructor)","   *","   * Asserts that the target is an instance of `constructor`.","   *","   *     var Tea = function (name) { this.name = name; }","   *       , Chai = new Tea('chai');","   *","   *     expect(Chai).to.be.an.instanceof(Tea);","   *     expect([ 1, 2, 3 ]).to.be.instanceof(Array);","   *","   * @name instanceof","   * @param {Constructor} constructor","   * @param {String} message _optional_","   * @alias instanceOf","   * @namespace BDD","   * @api public","   */","","  function assertInstanceOf (constructor, msg) {","    if (msg) flag(this, 'message', msg);","    var name = _.getName(constructor);","    this.assert(","        flag(this, 'object') instanceof constructor","      , 'expected #{this} to be an instance of ' + name","      , 'expected #{this} to not be an instance of ' + name","    );","  };","","  Assertion.addMethod('instanceof', assertInstanceOf);","  Assertion.addMethod('instanceOf', assertInstanceOf);","","  /**","   * ### .property(name, [value])","   *","   * Asserts that the target has a property `name`, optionally asserting that","   * the value of that property is strictly equal to  `value`.","   * If the `deep` flag is set, you can use dot- and bracket-notation for deep","   * references into objects and arrays.","   *","   *     // simple referencing","   *     var obj = { foo: 'bar' };","   *     expect(obj).to.have.property('foo');","   *     expect(obj).to.have.property('foo', 'bar');","   *","   *     // deep referencing","   *     var deepObj = {","   *         green: { tea: 'matcha' }","   *       , teas: [ 'chai', 'matcha', { tea: 'konacha' } ]","   *     };","   *","   *     expect(deepObj).to.have.deep.property('green.tea', 'matcha');","   *     expect(deepObj).to.have.deep.property('teas[1]', 'matcha');","   *     expect(deepObj).to.have.deep.property('teas[2].tea', 'konacha');","   *","   * You can also use an array as the starting point of a `deep.property`","   * assertion, or traverse nested arrays.","   *","   *     var arr = [","   *         [ 'chai', 'matcha', 'konacha' ]","   *       , [ { tea: 'chai' }","   *         , { tea: 'matcha' }","   *         , { tea: 'konacha' } ]","   *     ];","   *","   *     expect(arr).to.have.deep.property('[0][1]', 'matcha');","   *     expect(arr).to.have.deep.property('[1][2].tea', 'konacha');","   *","   * Furthermore, `property` changes the subject of the assertion","   * to be the value of that property from the original object. This","   * permits for further chainable assertions on that property.","   *","   *     expect(obj).to.have.property('foo')","   *       .that.is.a('string');","   *     expect(deepObj).to.have.property('green')","   *       .that.is.an('object')","   *       .that.deep.equals({ tea: 'matcha' });","   *     expect(deepObj).to.have.property('teas')","   *       .that.is.an('array')","   *       .with.deep.property('[2]')","   *         .that.deep.equals({ tea: 'konacha' });","   *","   * Note that dots and bracket in `name` must be backslash-escaped when","   * the `deep` flag is set, while they must NOT be escaped when the `deep`","   * flag is not set.","   *","   *     // simple referencing","   *     var css = { '.link[target]': 42 };","   *     expect(css).to.have.property('.link[target]', 42);","   *","   *     // deep referencing","   *     var deepCss = { '.link': { '[target]': 42 }};","   *     expect(deepCss).to.have.deep.property('\\\\.link.\\\\[target\\\\]', 42);","   *","   * @name property","   * @alias deep.property","   * @param {String} name","   * @param {Mixed} value (optional)","   * @param {String} message _optional_","   * @returns value of property for chaining","   * @namespace BDD","   * @api public","   */","","  Assertion.addMethod('property', function (name, val, msg) {","    if (msg) flag(this, 'message', msg);","","    var isDeep = !!flag(this, 'deep')","      , descriptor = isDeep ? 'deep property ' : 'property '","      , negate = flag(this, 'negate')","      , obj = flag(this, 'object')","      , pathInfo = isDeep ? _.getPathInfo(name, obj) : null","      , hasProperty = isDeep","        ? pathInfo.exists","        : _.hasProperty(name, obj)","      , value = isDeep","        ? pathInfo.value","        : obj[name];","","    if (negate && arguments.length > 1) {","      if (undefined === value) {","        msg = (msg != null) ? msg + ': ' : '';","        throw new Error(msg + _.inspect(obj) + ' has no ' + descriptor + _.inspect(name));","      }","    } else {","      this.assert(","          hasProperty","        , 'expected #{this} to have a ' + descriptor + _.inspect(name)","        , 'expected #{this} to not have ' + descriptor + _.inspect(name));","    }","","    if (arguments.length > 1) {","      this.assert(","          val === value","        , 'expected #{this} to have a ' + descriptor + _.inspect(name) + ' of #{exp}, but got #{act}'","        , 'expected #{this} to not have a ' + descriptor + _.inspect(name) + ' of #{act}'","        , val","        , value","      );","    }","","    flag(this, 'object', value);","  });","","","  /**","   * ### .ownProperty(name)","   *","   * Asserts that the target has an own property `name`.","   *","   *     expect('test').to.have.ownProperty('length');","   *","   * @name ownProperty","   * @alias haveOwnProperty","   * @param {String} name","   * @param {String} message _optional_","   * @namespace BDD","   * @api public","   */","","  function assertOwnProperty (name, msg) {","    if (msg) flag(this, 'message', msg);","    var obj = flag(this, 'object');","    this.assert(","        obj.hasOwnProperty(name)","      , 'expected #{this} to have own property ' + _.inspect(name)","      , 'expected #{this} to not have own property ' + _.inspect(name)","    );","  }","","  Assertion.addMethod('ownProperty', assertOwnProperty);","  Assertion.addMethod('haveOwnProperty', assertOwnProperty);","","  /**","   * ### .ownPropertyDescriptor(name[, descriptor[, message]])","   *","   * Asserts that the target has an own property descriptor `name`, that optionally matches `descriptor`.","   *","   *     expect('test').to.have.ownPropertyDescriptor('length');","   *     expect('test').to.have.ownPropertyDescriptor('length', { enumerable: false, configurable: false, writable: false, value: 4 });","   *     expect('test').not.to.have.ownPropertyDescriptor('length', { enumerable: false, configurable: false, writable: false, value: 3 });","   *     expect('test').ownPropertyDescriptor('length').to.have.property('enumerable', false);","   *     expect('test').ownPropertyDescriptor('length').to.have.keys('value');","   *","   * @name ownPropertyDescriptor","   * @alias haveOwnPropertyDescriptor","   * @param {String} name","   * @param {Object} descriptor _optional_","   * @param {String} message _optional_","   * @namespace BDD","   * @api public","   */","","  function assertOwnPropertyDescriptor (name, descriptor, msg) {","    if (typeof descriptor === 'string') {","      msg = descriptor;","      descriptor = null;","    }","    if (msg) flag(this, 'message', msg);","    var obj = flag(this, 'object');","    var actualDescriptor = Object.getOwnPropertyDescriptor(Object(obj), name);","    if (actualDescriptor && descriptor) {","      this.assert(","          _.eql(descriptor, actualDescriptor)","        , 'expected the own property descriptor for ' + _.inspect(name) + ' on #{this} to match ' + _.inspect(descriptor) + ', got ' + _.inspect(actualDescriptor)","        , 'expected the own property descriptor for ' + _.inspect(name) + ' on #{this} to not match ' + _.inspect(descriptor)","        , descriptor","        , actualDescriptor","        , true","      );","    } else {","      this.assert(","          actualDescriptor","        , 'expected #{this} to have an own property descriptor for ' + _.inspect(name)","        , 'expected #{this} to not have an own property descriptor for ' + _.inspect(name)","      );","    }","    flag(this, 'object', actualDescriptor);","  }","","  Assertion.addMethod('ownPropertyDescriptor', assertOwnPropertyDescriptor);","  Assertion.addMethod('haveOwnPropertyDescriptor', assertOwnPropertyDescriptor);","","  /**","   * ### .length","   *","   * Sets the `doLength` flag later used as a chain precursor to a value","   * comparison for the `length` property.","   *","   *     expect('foo').to.have.length.above(2);","   *     expect([ 1, 2, 3 ]).to.have.length.above(2);","   *     expect('foo').to.have.length.below(4);","   *     expect([ 1, 2, 3 ]).to.have.length.below(4);","   *     expect('foo').to.have.length.within(2,4);","   *     expect([ 1, 2, 3 ]).to.have.length.within(2,4);","   *","   * *Deprecation notice:* Using `length` as an assertion will be deprecated","   * in version 2.4.0 and removed in 3.0.0. Code using the old style of","   * asserting for `length` property value using `length(value)` should be","   * switched to use `lengthOf(value)` instead.","   *","   * @name length","   * @namespace BDD","   * @api public","   */","","  /**","   * ### .lengthOf(value[, message])","   *","   * Asserts that the target's `length` property has","   * the expected value.","   *","   *     expect([ 1, 2, 3]).to.have.lengthOf(3);","   *     expect('foobar').to.have.lengthOf(6);","   *","   * @name lengthOf","   * @param {Number} length","   * @param {String} message _optional_","   * @namespace BDD","   * @api public","   */","","  function assertLengthChain () {","    flag(this, 'doLength', true);","  }","","  function assertLength (n, msg) {","    if (msg) flag(this, 'message', msg);","    var obj = flag(this, 'object');","    new Assertion(obj, msg).to.have.property('length');","    var len = obj.length;","","    this.assert(","        len == n","      , 'expected #{this} to have a length of #{exp} but got #{act}'","      , 'expected #{this} to not have a length of #{act}'","      , n","      , len","    );","  }","","  Assertion.addChainableMethod('length', assertLength, assertLengthChain);","  Assertion.addMethod('lengthOf', assertLength);","","  /**","   * ### .match(regexp)","   *","   * Asserts that the target matches a regular expression.","   *","   *     expect('foobar').to.match(/^foo/);","   *","   * @name match","   * @alias matches","   * @param {RegExp} RegularExpression","   * @param {String} message _optional_","   * @namespace BDD","   * @api public","   */","  function assertMatch(re, msg) {","    if (msg) flag(this, 'message', msg);","    var obj = flag(this, 'object');","    this.assert(","        re.exec(obj)","      , 'expected #{this} to match ' + re","      , 'expected #{this} not to match ' + re","    );","  }","","  Assertion.addMethod('match', assertMatch);","  Assertion.addMethod('matches', assertMatch);","","  /**","   * ### .string(string)","   *","   * Asserts that the string target contains another string.","   *","   *     expect('foobar').to.have.string('bar');","   *","   * @name string","   * @param {String} string","   * @param {String} message _optional_","   * @namespace BDD","   * @api public","   */","","  Assertion.addMethod('string', function (str, msg) {","    if (msg) flag(this, 'message', msg);","    var obj = flag(this, 'object');","    new Assertion(obj, msg).is.a('string');","","    this.assert(","        ~obj.indexOf(str)","      , 'expected #{this} to contain ' + _.inspect(str)","      , 'expected #{this} to not contain ' + _.inspect(str)","    );","  });","","","  /**","   * ### .keys(key1, [key2], [...])","   *","   * Asserts that the target contains any or all of the passed-in keys.","   * Use in combination with `any`, `all`, `contains`, or `have` will affect","   * what will pass.","   *","   * When used in conjunction with `any`, at least one key that is passed","   * in must exist in the target object. This is regardless whether or not","   * the `have` or `contain` qualifiers are used. Note, either `any` or `all`","   * should be used in the assertion. If neither are used, the assertion is","   * defaulted to `all`.","   *","   * When both `all` and `contain` are used, the target object must have at","   * least all of the passed-in keys but may have more keys not listed.","   *","   * When both `all` and `have` are used, the target object must both contain","   * all of the passed-in keys AND the number of keys in the target object must","   * match the number of keys passed in (in other words, a target object must","   * have all and only all of the passed-in keys).","   *","   *     expect({ foo: 1, bar: 2 }).to.have.any.keys('foo', 'baz');","   *     expect({ foo: 1, bar: 2 }).to.have.any.keys('foo');","   *     expect({ foo: 1, bar: 2 }).to.contain.any.keys('bar', 'baz');","   *     expect({ foo: 1, bar: 2 }).to.contain.any.keys(['foo']);","   *     expect({ foo: 1, bar: 2 }).to.contain.any.keys({'foo': 6});","   *     expect({ foo: 1, bar: 2 }).to.have.all.keys(['bar', 'foo']);","   *     expect({ foo: 1, bar: 2 }).to.have.all.keys({'bar': 6, 'foo': 7});","   *     expect({ foo: 1, bar: 2, baz: 3 }).to.contain.all.keys(['bar', 'foo']);","   *     expect({ foo: 1, bar: 2, baz: 3 }).to.contain.all.keys({'bar': 6});","   *","   *","   * @name keys","   * @alias key","   * @param {...String|Array|Object} keys","   * @namespace BDD","   * @api public","   */","","  function assertKeys (keys) {","    var obj = flag(this, 'object')","      , str","      , ok = true","      , mixedArgsMsg = 'keys must be given single argument of Array|Object|String, or multiple String arguments';","","    switch (_.type(keys)) {","      case \"array\":","        if (arguments.length > 1) throw (new Error(mixedArgsMsg));","        break;","      case \"object\":","        if (arguments.length > 1) throw (new Error(mixedArgsMsg));","        keys = Object.keys(keys);","        break;","      default:","        keys = Array.prototype.slice.call(arguments);","    }","","    if (!keys.length) throw new Error('keys required');","","    var actual = Object.keys(obj)","      , expected = keys","      , len = keys.length","      , any = flag(this, 'any')","      , all = flag(this, 'all');","","    if (!any && !all) {","      all = true;","    }","","    // Has any","    if (any) {","      var intersection = expected.filter(function(key) {","        return ~actual.indexOf(key);","      });","      ok = intersection.length > 0;","    }","","    // Has all","    if (all) {","      ok = keys.every(function(key){","        return ~actual.indexOf(key);","      });","      if (!flag(this, 'negate') && !flag(this, 'contains')) {","        ok = ok && keys.length == actual.length;","      }","    }","","    // Key string","    if (len > 1) {","      keys = keys.map(function(key){","        return _.inspect(key);","      });","      var last = keys.pop();","      if (all) {","        str = keys.join(', ') + ', and ' + last;","      }","      if (any) {","        str = keys.join(', ') + ', or ' + last;","      }","    } else {","      str = _.inspect(keys[0]);","    }","","    // Form","    str = (len > 1 ? 'keys ' : 'key ') + str;","","    // Have / include","    str = (flag(this, 'contains') ? 'contain ' : 'have ') + str;","","    // Assertion","    this.assert(","        ok","      , 'expected #{this} to ' + str","      , 'expected #{this} to not ' + str","      , expected.slice(0).sort()","      , actual.sort()","      , true","    );","  }","","  Assertion.addMethod('keys', assertKeys);","  Assertion.addMethod('key', assertKeys);","","  /**","   * ### .throw(constructor)","   *","   * Asserts that the function target will throw a specific error, or specific type of error","   * (as determined using `instanceof`), optionally with a RegExp or string inclusion test","   * for the error's message.","   *","   *     var err = new ReferenceError('This is a bad function.');","   *     var fn = function () { throw err; }","   *     expect(fn).to.throw(ReferenceError);","   *     expect(fn).to.throw(Error);","   *     expect(fn).to.throw(/bad function/);","   *     expect(fn).to.not.throw('good function');","   *     expect(fn).to.throw(ReferenceError, /bad function/);","   *     expect(fn).to.throw(err);","   *","   * Please note that when a throw expectation is negated, it will check each","   * parameter independently, starting with error constructor type. The appropriate way","   * to check for the existence of a type of error but for a message that does not match","   * is to use `and`.","   *","   *     expect(fn).to.throw(ReferenceError)","   *        .and.not.throw(/good function/);","   *","   * @name throw","   * @alias throws","   * @alias Throw","   * @param {ErrorConstructor} constructor","   * @param {String|RegExp} expected error message","   * @param {String} message _optional_","   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types","   * @returns error for chaining (null if no error)","   * @namespace BDD","   * @api public","   */","","  function assertThrows (constructor, errMsg, msg) {","    if (msg) flag(this, 'message', msg);","    var obj = flag(this, 'object');","    new Assertion(obj, msg).is.a('function');","","    var thrown = false","      , desiredError = null","      , name = null","      , thrownError = null;","","    if (arguments.length === 0) {","      errMsg = null;","      constructor = null;","    } else if (constructor && (constructor instanceof RegExp || 'string' === typeof constructor)) {","      errMsg = constructor;","      constructor = null;","    } else if (constructor && constructor instanceof Error) {","      desiredError = constructor;","      constructor = null;","      errMsg = null;","    } else if (typeof constructor === 'function') {","      name = constructor.prototype.name;","      if (!name || (name === 'Error' && constructor !== Error)) {","        name = constructor.name || (new constructor()).name;","      }","    } else {","      constructor = null;","    }","","    try {","      obj();","    } catch (err) {","      // first, check desired error","      if (desiredError) {","        this.assert(","            err === desiredError","          , 'expected #{this} to throw #{exp} but #{act} was thrown'","          , 'expected #{this} to not throw #{exp}'","          , (desiredError instanceof Error ? desiredError.toString() : desiredError)","          , (err instanceof Error ? err.toString() : err)","        );","","        flag(this, 'object', err);","        return this;","      }","","      // next, check constructor","      if (constructor) {","        this.assert(","            err instanceof constructor","          , 'expected #{this} to throw #{exp} but #{act} was thrown'","          , 'expected #{this} to not throw #{exp} but #{act} was thrown'","          , name","          , (err instanceof Error ? err.toString() : err)","        );","","        if (!errMsg) {","          flag(this, 'object', err);","          return this;","        }","      }","","      // next, check message","      var message = 'error' === _.type(err) && \"message\" in err","        ? err.message","        : '' + err;","","      if ((message != null) && errMsg && errMsg instanceof RegExp) {","        this.assert(","            errMsg.exec(message)","          , 'expected #{this} to throw error matching #{exp} but got #{act}'","          , 'expected #{this} to throw error not matching #{exp}'","          , errMsg","          , message","        );","","        flag(this, 'object', err);","        return this;","      } else if ((message != null) && errMsg && 'string' === typeof errMsg) {","        this.assert(","            ~message.indexOf(errMsg)","          , 'expected #{this} to throw error including #{exp} but got #{act}'","          , 'expected #{this} to throw error not including #{act}'","          , errMsg","          , message","        );","","        flag(this, 'object', err);","        return this;","      } else {","        thrown = true;","        thrownError = err;","      }","    }","","    var actuallyGot = ''","      , expectedThrown = name !== null","        ? name","        : desiredError","          ? '#{exp}' //_.inspect(desiredError)","          : 'an error';","","    if (thrown) {","      actuallyGot = ' but #{act} was thrown'","    }","","    this.assert(","        thrown === true","      , 'expected #{this} to throw ' + expectedThrown + actuallyGot","      , 'expected #{this} to not throw ' + expectedThrown + actuallyGot","      , (desiredError instanceof Error ? desiredError.toString() : desiredError)","      , (thrownError instanceof Error ? thrownError.toString() : thrownError)","    );","","    flag(this, 'object', thrownError);","  };","","  Assertion.addMethod('throw', assertThrows);","  Assertion.addMethod('throws', assertThrows);","  Assertion.addMethod('Throw', assertThrows);","","  /**","   * ### .respondTo(method)","   *","   * Asserts that the object or class target will respond to a method.","   *","   *     Klass.prototype.bar = function(){};","   *     expect(Klass).to.respondTo('bar');","   *     expect(obj).to.respondTo('bar');","   *","   * To check if a constructor will respond to a static function,","   * set the `itself` flag.","   *","   *     Klass.baz = function(){};","   *     expect(Klass).itself.to.respondTo('baz');","   *","   * @name respondTo","   * @alias respondsTo","   * @param {String} method","   * @param {String} message _optional_","   * @namespace BDD","   * @api public","   */","","  function respondTo (method, msg) {","    if (msg) flag(this, 'message', msg);","    var obj = flag(this, 'object')","      , itself = flag(this, 'itself')","      , context = ('function' === _.type(obj) && !itself)","        ? obj.prototype[method]","        : obj[method];","","    this.assert(","        'function' === typeof context","      , 'expected #{this} to respond to ' + _.inspect(method)","      , 'expected #{this} to not respond to ' + _.inspect(method)","    );","  }","","  Assertion.addMethod('respondTo', respondTo);","  Assertion.addMethod('respondsTo', respondTo);","","  /**","   * ### .itself","   *","   * Sets the `itself` flag, later used by the `respondTo` assertion.","   *","   *     function Foo() {}","   *     Foo.bar = function() {}","   *     Foo.prototype.baz = function() {}","   *","   *     expect(Foo).itself.to.respondTo('bar');","   *     expect(Foo).itself.not.to.respondTo('baz');","   *","   * @name itself","   * @namespace BDD","   * @api public","   */","","  Assertion.addProperty('itself', function () {","    flag(this, 'itself', true);","  });","","  /**","   * ### .satisfy(method)","   *","   * Asserts that the target passes a given truth test.","   *","   *     expect(1).to.satisfy(function(num) { return num > 0; });","   *","   * @name satisfy","   * @alias satisfies","   * @param {Function} matcher","   * @param {String} message _optional_","   * @namespace BDD","   * @api public","   */","","  function satisfy (matcher, msg) {","    if (msg) flag(this, 'message', msg);","    var obj = flag(this, 'object');","    var result = matcher(obj);","    this.assert(","        result","      , 'expected #{this} to satisfy ' + _.objDisplay(matcher)","      , 'expected #{this} to not satisfy' + _.objDisplay(matcher)","      , this.negate ? false : true","      , result","    );","  }","","  Assertion.addMethod('satisfy', satisfy);","  Assertion.addMethod('satisfies', satisfy);","","  /**","   * ### .closeTo(expected, delta)","   *","   * Asserts that the target is equal `expected`, to within a +/- `delta` range.","   *","   *     expect(1.5).to.be.closeTo(1, 0.5);","   *","   * @name closeTo","   * @alias approximately","   * @param {Number} expected","   * @param {Number} delta","   * @param {String} message _optional_","   * @namespace BDD","   * @api public","   */","","  function closeTo(expected, delta, msg) {","    if (msg) flag(this, 'message', msg);","    var obj = flag(this, 'object');","","    new Assertion(obj, msg).is.a('number');","    if (_.type(expected) !== 'number' || _.type(delta) !== 'number') {","      throw new Error('the arguments to closeTo or approximately must be numbers');","    }","","    this.assert(","        Math.abs(obj - expected) <= delta","      , 'expected #{this} to be close to ' + expected + ' +/- ' + delta","      , 'expected #{this} not to be close to ' + expected + ' +/- ' + delta","    );","  }","","  Assertion.addMethod('closeTo', closeTo);","  Assertion.addMethod('approximately', closeTo);","","  function isSubsetOf(subset, superset, cmp) {","    return subset.every(function(elem) {","      if (!cmp) return superset.indexOf(elem) !== -1;","","      return superset.some(function(elem2) {","        return cmp(elem, elem2);","      });","    })","  }","","  /**","   * ### .members(set)","   *","   * Asserts that the target is a superset of `set`,","   * or that the target and `set` have the same strictly-equal (===) members.","   * Alternately, if the `deep` flag is set, set members are compared for deep","   * equality.","   *","   *     expect([1, 2, 3]).to.include.members([3, 2]);","   *     expect([1, 2, 3]).to.not.include.members([3, 2, 8]);","   *","   *     expect([4, 2]).to.have.members([2, 4]);","   *     expect([5, 2]).to.not.have.members([5, 2, 1]);","   *","   *     expect([{ id: 1 }]).to.deep.include.members([{ id: 1 }]);","   *","   * @name members","   * @param {Array} set","   * @param {String} message _optional_","   * @namespace BDD","   * @api public","   */","","  Assertion.addMethod('members', function (subset, msg) {","    if (msg) flag(this, 'message', msg);","    var obj = flag(this, 'object');","","    new Assertion(obj).to.be.an('array');","    new Assertion(subset).to.be.an('array');","","    var cmp = flag(this, 'deep') ? _.eql : undefined;","","    if (flag(this, 'contains')) {","      return this.assert(","          isSubsetOf(subset, obj, cmp)","        , 'expected #{this} to be a superset of #{act}'","        , 'expected #{this} to not be a superset of #{act}'","        , obj","        , subset","      );","    }","","    this.assert(","        isSubsetOf(obj, subset, cmp) && isSubsetOf(subset, obj, cmp)","        , 'expected #{this} to have the same members as #{act}'","        , 'expected #{this} to not have the same members as #{act}'","        , obj","        , subset","    );","  });","","  /**","   * ### .oneOf(list)","   *","   * Assert that a value appears somewhere in the top level of array `list`.","   *","   *     expect('a').to.be.oneOf(['a', 'b', 'c']);","   *     expect(9).to.not.be.oneOf(['z']);","   *     expect([3]).to.not.be.oneOf([1, 2, [3]]);","   *","   *     var three = [3];","   *     // for object-types, contents are not compared","   *     expect(three).to.not.be.oneOf([1, 2, [3]]);","   *     // comparing references works","   *     expect(three).to.be.oneOf([1, 2, three]);","   *","   * @name oneOf","   * @param {Array<*>} list","   * @param {String} message _optional_","   * @namespace BDD","   * @api public","   */","","  function oneOf (list, msg) {","    if (msg) flag(this, 'message', msg);","    var expected = flag(this, 'object');","    new Assertion(list).to.be.an('array');","","    this.assert(","        list.indexOf(expected) > -1","      , 'expected #{this} to be one of #{exp}'","      , 'expected #{this} to not be one of #{exp}'","      , list","      , expected","    );","  }","","  Assertion.addMethod('oneOf', oneOf);","","","  /**","   * ### .change(function)","   *","   * Asserts that a function changes an object property","   *","   *     var obj = { val: 10 };","   *     var fn = function() { obj.val += 3 };","   *     var noChangeFn = function() { return 'foo' + 'bar'; }","   *     expect(fn).to.change(obj, 'val');","   *     expect(noChangeFn).to.not.change(obj, 'val')","   *","   * @name change","   * @alias changes","   * @alias Change","   * @param {String} object","   * @param {String} property name","   * @param {String} message _optional_","   * @namespace BDD","   * @api public","   */","","  function assertChanges (object, prop, msg) {","    if (msg) flag(this, 'message', msg);","    var fn = flag(this, 'object');","    new Assertion(object, msg).to.have.property(prop);","    new Assertion(fn).is.a('function');","","    var initial = object[prop];","    fn();","","    this.assert(","      initial !== object[prop]","      , 'expected .' + prop + ' to change'","      , 'expected .' + prop + ' to not change'","    );","  }","","  Assertion.addChainableMethod('change', assertChanges);","  Assertion.addChainableMethod('changes', assertChanges);","","  /**","   * ### .increase(function)","   *","   * Asserts that a function increases an object property","   *","   *     var obj = { val: 10 };","   *     var fn = function() { obj.val = 15 };","   *     expect(fn).to.increase(obj, 'val');","   *","   * @name increase","   * @alias increases","   * @alias Increase","   * @param {String} object","   * @param {String} property name","   * @param {String} message _optional_","   * @namespace BDD","   * @api public","   */","","  function assertIncreases (object, prop, msg) {","    if (msg) flag(this, 'message', msg);","    var fn = flag(this, 'object');","    new Assertion(object, msg).to.have.property(prop);","    new Assertion(fn).is.a('function');","","    var initial = object[prop];","    fn();","","    this.assert(","      object[prop] - initial > 0","      , 'expected .' + prop + ' to increase'","      , 'expected .' + prop + ' to not increase'","    );","  }","","  Assertion.addChainableMethod('increase', assertIncreases);","  Assertion.addChainableMethod('increases', assertIncreases);","","  /**","   * ### .decrease(function)","   *","   * Asserts that a function decreases an object property","   *","   *     var obj = { val: 10 };","   *     var fn = function() { obj.val = 5 };","   *     expect(fn).to.decrease(obj, 'val');","   *","   * @name decrease","   * @alias decreases","   * @alias Decrease","   * @param {String} object","   * @param {String} property name","   * @param {String} message _optional_","   * @namespace BDD","   * @api public","   */","","  function assertDecreases (object, prop, msg) {","    if (msg) flag(this, 'message', msg);","    var fn = flag(this, 'object');","    new Assertion(object, msg).to.have.property(prop);","    new Assertion(fn).is.a('function');","","    var initial = object[prop];","    fn();","","    this.assert(","      object[prop] - initial < 0","      , 'expected .' + prop + ' to decrease'","      , 'expected .' + prop + ' to not decrease'","    );","  }","","  Assertion.addChainableMethod('decrease', assertDecreases);","  Assertion.addChainableMethod('decreases', assertDecreases);","","  /**","   * ### .extensible","   *","   * Asserts that the target is extensible (can have new properties added to","   * it).","   *","   *     var nonExtensibleObject = Object.preventExtensions({});","   *     var sealedObject = Object.seal({});","   *     var frozenObject = Object.freeze({});","   *","   *     expect({}).to.be.extensible;","   *     expect(nonExtensibleObject).to.not.be.extensible;","   *     expect(sealedObject).to.not.be.extensible;","   *     expect(frozenObject).to.not.be.extensible;","   *","   * @name extensible","   * @namespace BDD","   * @api public","   */","","  Assertion.addProperty('extensible', function() {","    var obj = flag(this, 'object');","","    // In ES5, if the argument to this method is not an object (a primitive), then it will cause a TypeError.","    // In ES6, a non-object argument will be treated as if it was a non-extensible ordinary object, simply return false.","    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible","    // The following provides ES6 behavior when a TypeError is thrown under ES5.","","    var isExtensible;","","    try {","      isExtensible = Object.isExtensible(obj);","    } catch (err) {","      if (err instanceof TypeError) isExtensible = false;","      else throw err;","    }","","    this.assert(","      isExtensible","      , 'expected #{this} to be extensible'","      , 'expected #{this} to not be extensible'","    );","  });","","  /**","   * ### .sealed","   *","   * Asserts that the target is sealed (cannot have new properties added to it","   * and its existing properties cannot be removed).","   *","   *     var sealedObject = Object.seal({});","   *     var frozenObject = Object.freeze({});","   *","   *     expect(sealedObject).to.be.sealed;","   *     expect(frozenObject).to.be.sealed;","   *     expect({}).to.not.be.sealed;","   *","   * @name sealed","   * @namespace BDD","   * @api public","   */","","  Assertion.addProperty('sealed', function() {","    var obj = flag(this, 'object');","","    // In ES5, if the argument to this method is not an object (a primitive), then it will cause a TypeError.","    // In ES6, a non-object argument will be treated as if it was a sealed ordinary object, simply return true.","    // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isSealed","    // The following provides ES6 behavior when a TypeError is thrown under ES5.","","    var isSealed;","","    try {","      isSealed = Object.isSealed(obj);","    } catch (err) {","      if (err instanceof TypeError) isSealed = true;","      else throw err;","    }","","    this.assert(","      isSealed","      , 'expected #{this} to be sealed'","      , 'expected #{this} to not be sealed'","    );","  });","","  /**","   * ### .frozen","   *","   * Asserts that the target is frozen (cannot have new properties added to it","   * and its existing properties cannot be modified).","   *","   *     var frozenObject = Object.freeze({});","   *","   *     expect(frozenObject).to.be.frozen;","   *     expect({}).to.not.be.frozen;","   *","   * @name frozen","   * @namespace BDD","   * @api public","   */","","  Assertion.addProperty('frozen', function() {","    var obj = flag(this, 'object');","","    // In ES5, if the argument to this method is not an object (a primitive), then it will cause a TypeError.","    // In ES6, a non-object argument will be treated as if it was a frozen ordinary object, simply return true.","    // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen","    // The following provides ES6 behavior when a TypeError is thrown under ES5.","","    var isFrozen;","","    try {","      isFrozen = Object.isFrozen(obj);","    } catch (err) {","      if (err instanceof TypeError) isFrozen = true;","      else throw err;","    }","","    this.assert(","      isFrozen","      , 'expected #{this} to be frozen'","      , 'expected #{this} to not be frozen'","    );","  });","};",""],"l":{"8":1,"9":1,"42":1,"46":13,"47":0,"66":1,"67":0,"91":1,"92":0,"108":1,"109":0,"110":0,"127":1,"128":0,"129":0,"163":1,"164":0,"165":0,"166":0,"169":0,"176":1,"177":1,"201":1,"202":0,"205":1,"206":0,"208":0,"209":0,"210":0,"212":0,"213":0,"214":0,"215":0,"216":0,"219":0,"220":0,"221":0,"222":0,"224":0,"225":0,"226":0,"228":0,"230":0,"236":1,"237":1,"238":1,"239":1,"257":1,"258":0,"277":1,"278":0,"299":1,"300":0,"321":1,"322":0,"342":1,"343":0,"362":1,"363":0,"388":1,"389":0,"413":1,"414":0,"417":0,"418":0,"419":0,"420":0,"423":0,"445":1,"446":0,"448":0,"455":1,"456":1,"481":1,"482":0,"483":0,"484":0,"485":0,"487":0,"498":1,"499":1,"500":1,"518":1,"519":0,"520":0,"530":1,"531":1,"557":1,"558":0,"559":0,"560":0,"561":0,"562":0,"563":0,"571":0,"579":1,"580":1,"581":1,"606":1,"607":0,"608":0,"609":0,"610":0,"611":0,"612":0,"620":0,"628":1,"629":1,"655":1,"656":0,"657":0,"658":0,"659":0,"660":0,"661":0,"669":0,"677":1,"678":1,"679":1,"704":1,"705":0,"706":0,"707":0,"708":0,"709":0,"710":0,"718":0,"726":1,"727":1,"752":1,"753":0,"754":0,"756":0,"757":0,"758":0,"759":0,"765":0,"792":1,"793":0,"794":0,"795":0,"802":1,"803":1,"877":1,"878":0,"880":0,"892":0,"893":0,"894":0,"895":0,"898":0,"904":0,"905":0,"914":0,"933":1,"934":0,"935":0,"936":0,"943":1,"944":1,"966":1,"967":0,"968":0,"969":0,"971":0,"972":0,"973":0,"974":0,"975":0,"984":0,"990":0,"993":1,"994":1,"1035":1,"1036":0,"1039":1,"1040":0,"1041":0,"1042":0,"1043":0,"1045":0,"1054":1,"1055":1,"1071":1,"1072":0,"1073":0,"1074":0,"1081":1,"1082":1,"1098":1,"1099":0,"1100":0,"1101":0,"1103":0,"1150":1,"1151":0,"1156":0,"1158":0,"1159":0,"1161":0,"1162":0,"1163":0,"1165":0,"1168":0,"1170":0,"1176":0,"1177":0,"1181":0,"1182":0,"1183":0,"1185":0,"1189":0,"1190":0,"1191":0,"1193":0,"1194":0,"1199":0,"1200":0,"1201":0,"1203":0,"1204":0,"1205":0,"1207":0,"1208":0,"1211":0,"1215":0,"1218":0,"1221":0,"1231":1,"1232":1,"1270":1,"1271":0,"1272":0,"1273":0,"1275":0,"1280":0,"1281":0,"1282":0,"1283":0,"1284":0,"1285":0,"1286":0,"1287":0,"1288":0,"1289":0,"1290":0,"1291":0,"1292":0,"1293":0,"1296":0,"1299":0,"1300":0,"1303":0,"1304":0,"1312":0,"1313":0,"1317":0,"1318":0,"1326":0,"1327":0,"1328":0,"1333":0,"1337":0,"1338":0,"1346":0,"1347":0,"1348":0,"1349":0,"1357":0,"1358":0,"1360":0,"1361":0,"1365":0,"1372":0,"1373":0,"1376":0,"1384":0,"1387":1,"1388":1,"1389":1,"1414":1,"1415":0,"1416":0,"1422":0,"1429":1,"1430":1,"1449":1,"1450":0,"1468":1,"1469":0,"1470":0,"1471":0,"1472":0,"1481":1,"1482":1,"1500":1,"1501":0,"1502":0,"1504":0,"1505":0,"1506":0,"1509":0,"1516":1,"1517":1,"1519":1,"1520":0,"1521":0,"1523":0,"1524":0,"1552":1,"1553":0,"1554":0,"1556":0,"1557":0,"1559":0,"1561":0,"1562":0,"1571":0,"1602":1,"1603":0,"1604":0,"1605":0,"1607":0,"1616":1,"1640":1,"1641":0,"1642":0,"1643":0,"1644":0,"1646":0,"1647":0,"1649":0,"1656":1,"1657":1,"1678":1,"1679":0,"1680":0,"1681":0,"1682":0,"1684":0,"1685":0,"1687":0,"1694":1,"1695":1,"1716":1,"1717":0,"1718":0,"1719":0,"1720":0,"1722":0,"1723":0,"1725":0,"1732":1,"1733":1,"1755":1,"1756":0,"1763":0,"1765":0,"1766":0,"1768":0,"1769":0,"1772":0,"1797":1,"1798":0,"1805":0,"1807":0,"1808":0,"1810":0,"1811":0,"1814":0,"1837":1,"1838":0,"1845":0,"1847":0,"1848":0,"1850":0,"1851":0,"1854":0}},"/home/travis/build/npmtest/node-npmtest-chai/chai/lib/chai/interface/expect.js":{"path":"/home/travis/build/npmtest/node-npmtest-chai/chai/lib/chai/interface/expect.js","s":{"1":1,"2":1,"3":0,"4":1,"5":0,"6":0},"b":{"1":[0,0]},"f":{"1":1,"2":0,"3":0},"fnMap":{"1":{"name":"(anonymous_1)","line":7,"loc":{"start":{"line":7,"column":17},"end":{"line":7,"column":39}}},"2":{"name":"(anonymous_2)","line":8,"loc":{"start":{"line":8,"column":16},"end":{"line":8,"column":40}}},"3":{"name":"(anonymous_3)","line":26,"loc":{"start":{"line":26,"column":21},"end":{"line":26,"column":68}}}},"statementMap":{"1":{"start":{"line":7,"column":0},"end":{"line":34,"column":2}},"2":{"start":{"line":8,"column":2},"end":{"line":10,"column":4}},"3":{"start":{"line":9,"column":4},"end":{"line":9,"column":44}},"4":{"start":{"line":26,"column":2},"end":{"line":33,"column":4}},"5":{"start":{"line":27,"column":4},"end":{"line":27,"column":41}},"6":{"start":{"line":28,"column":4},"end":{"line":32,"column":25}}},"branchMap":{"1":{"line":27,"type":"binary-expr","locations":[{"start":{"line":27,"column":14},"end":{"line":27,"column":21}},{"start":{"line":27,"column":25},"end":{"line":27,"column":40}}]}},"code":["/*!"," * chai"," * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>"," * MIT Licensed"," */","","module.exports = function (chai, util) {","  chai.expect = function (val, message) {","    return new chai.Assertion(val, message);","  };","","  /**","   * ### .fail(actual, expected, [message], [operator])","   *","   * Throw a failure.","   *","   * @name fail","   * @param {Mixed} actual","   * @param {Mixed} expected","   * @param {String} message","   * @param {String} operator","   * @namespace Expect","   * @api public","   */","","  chai.expect.fail = function (actual, expected, message, operator) {","    message = message || 'expect.fail()';","    throw new chai.AssertionError(message, {","        actual: actual","      , expected: expected","      , operator: operator","    }, chai.expect.fail);","  };","};",""],"l":{"7":1,"8":1,"9":0,"26":1,"27":0,"28":0}},"/home/travis/build/npmtest/node-npmtest-chai/chai/lib/chai/interface/should.js":{"path":"/home/travis/build/npmtest/node-npmtest-chai/chai/lib/chai/interface/should.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":1,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":1,"32":1},"b":{"1":[0,0],"2":[0,0,0],"3":[0,0]},"f":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0},"fnMap":{"1":{"name":"(anonymous_1)","line":7,"loc":{"start":{"line":7,"column":17},"end":{"line":7,"column":39}}},"2":{"name":"loadShould","line":10,"loc":{"start":{"line":10,"column":2},"end":{"line":10,"column":25}}},"3":{"name":"shouldGetter","line":12,"loc":{"start":{"line":12,"column":4},"end":{"line":12,"column":28}}},"4":{"name":"shouldSetter","line":18,"loc":{"start":{"line":18,"column":4},"end":{"line":18,"column":33}}},"5":{"name":"(anonymous_5)","line":55,"loc":{"start":{"line":55,"column":18},"end":{"line":55,"column":65}}},"6":{"name":"(anonymous_6)","line":79,"loc":{"start":{"line":79,"column":19},"end":{"line":79,"column":46}}},"7":{"name":"(anonymous_7)","line":107,"loc":{"start":{"line":107,"column":19},"end":{"line":107,"column":50}}},"8":{"name":"(anonymous_8)","line":125,"loc":{"start":{"line":125,"column":19},"end":{"line":125,"column":39}}},"9":{"name":"(anonymous_9)","line":147,"loc":{"start":{"line":147,"column":23},"end":{"line":147,"column":50}}},"10":{"name":"(anonymous_10)","line":171,"loc":{"start":{"line":171,"column":23},"end":{"line":171,"column":54}}},"11":{"name":"(anonymous_11)","line":189,"loc":{"start":{"line":189,"column":23},"end":{"line":189,"column":43}}}},"statementMap":{"1":{"start":{"line":7,"column":0},"end":{"line":201,"column":2}},"2":{"start":{"line":8,"column":2},"end":{"line":8,"column":33}},"3":{"start":{"line":10,"column":2},"end":{"line":197,"column":3}},"4":{"start":{"line":12,"column":4},"end":{"line":17,"column":5}},"5":{"start":{"line":13,"column":6},"end":{"line":15,"column":7}},"6":{"start":{"line":14,"column":8},"end":{"line":14,"column":65}},"7":{"start":{"line":16,"column":6},"end":{"line":16,"column":53}},"8":{"start":{"line":18,"column":4},"end":{"line":31,"column":5}},"9":{"start":{"line":25,"column":6},"end":{"line":30,"column":9}},"10":{"start":{"line":33,"column":4},"end":{"line":37,"column":7}},"11":{"start":{"line":39,"column":4},"end":{"line":39,"column":20}},"12":{"start":{"line":55,"column":4},"end":{"line":62,"column":6}},"13":{"start":{"line":56,"column":6},"end":{"line":56,"column":43}},"14":{"start":{"line":57,"column":6},"end":{"line":61,"column":22}},"15":{"start":{"line":79,"column":4},"end":{"line":81,"column":6}},"16":{"start":{"line":80,"column":6},"end":{"line":80,"column":46}},"17":{"start":{"line":107,"column":4},"end":{"line":109,"column":6}},"18":{"start":{"line":108,"column":6},"end":{"line":108,"column":50}},"19":{"start":{"line":125,"column":4},"end":{"line":127,"column":5}},"20":{"start":{"line":126,"column":6},"end":{"line":126,"column":39}},"21":{"start":{"line":130,"column":4},"end":{"line":130,"column":19}},"22":{"start":{"line":147,"column":4},"end":{"line":149,"column":6}},"23":{"start":{"line":148,"column":6},"end":{"line":148,"column":50}},"24":{"start":{"line":171,"column":4},"end":{"line":173,"column":6}},"25":{"start":{"line":172,"column":6},"end":{"line":172,"column":54}},"26":{"start":{"line":189,"column":4},"end":{"line":191,"column":5}},"27":{"start":{"line":190,"column":6},"end":{"line":190,"column":43}},"28":{"start":{"line":193,"column":4},"end":{"line":193,"column":38}},"29":{"start":{"line":194,"column":4},"end":{"line":194,"column":46}},"30":{"start":{"line":196,"column":4},"end":{"line":196,"column":18}},"31":{"start":{"line":199,"column":2},"end":{"line":199,"column":27}},"32":{"start":{"line":200,"column":2},"end":{"line":200,"column":27}}},"branchMap":{"1":{"line":13,"type":"if","locations":[{"start":{"line":13,"column":6},"end":{"line":13,"column":6}},{"start":{"line":13,"column":6},"end":{"line":13,"column":6}}]},"2":{"line":13,"type":"binary-expr","locations":[{"start":{"line":13,"column":10},"end":{"line":13,"column":32}},{"start":{"line":13,"column":36},"end":{"line":13,"column":58}},{"start":{"line":13,"column":62},"end":{"line":13,"column":85}}]},"3":{"line":56,"type":"binary-expr","locations":[{"start":{"line":56,"column":16},"end":{"line":56,"column":23}},{"start":{"line":56,"column":27},"end":{"line":56,"column":42}}]}},"code":["/*!"," * chai"," * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>"," * MIT Licensed"," */","","module.exports = function (chai, util) {","  var Assertion = chai.Assertion;","","  function loadShould () {","    // explicitly define this method as function as to have it's name to include as `ssfi`","    function shouldGetter() {","      if (this instanceof String || this instanceof Number || this instanceof Boolean ) {","        return new Assertion(this.valueOf(), null, shouldGetter);","      }","      return new Assertion(this, null, shouldGetter);","    }","    function shouldSetter(value) {","      // See https://github.com/chaijs/chai/issues/86: this makes","      // `whatever.should = someValue` actually set `someValue`, which is","      // especially useful for `global.should = require('chai').should()`.","      //","      // Note that we have to use [[DefineProperty]] instead of [[Put]]","      // since otherwise we would trigger this very setter!","      Object.defineProperty(this, 'should', {","        value: value,","        enumerable: true,","        configurable: true,","        writable: true","      });","    }","    // modify Object.prototype to have `should`","    Object.defineProperty(Object.prototype, 'should', {","      set: shouldSetter","      , get: shouldGetter","      , configurable: true","    });","","    var should = {};","","    /**","     * ### .fail(actual, expected, [message], [operator])","     *","     * Throw a failure.","     *","     * @name fail","     * @param {Mixed} actual","     * @param {Mixed} expected","     * @param {String} message","     * @param {String} operator","     * @namespace Should","     * @api public","     */","","    should.fail = function (actual, expected, message, operator) {","      message = message || 'should.fail()';","      throw new chai.AssertionError(message, {","          actual: actual","        , expected: expected","        , operator: operator","      }, should.fail);","    };","","    /**","     * ### .equal(actual, expected, [message])","     *","     * Asserts non-strict equality (`==`) of `actual` and `expected`.","     *","     *     should.equal(3, '3', '== coerces values to strings');","     *","     * @name equal","     * @param {Mixed} actual","     * @param {Mixed} expected","     * @param {String} message","     * @namespace Should","     * @api public","     */","","    should.equal = function (val1, val2, msg) {","      new Assertion(val1, msg).to.equal(val2);","    };","","    /**","     * ### .throw(function, [constructor/string/regexp], [string/regexp], [message])","     *","     * Asserts that `function` will throw an error that is an instance of","     * `constructor`, or alternately that it will throw an error with message","     * matching `regexp`.","     *","     *     should.throw(fn, 'function throws a reference error');","     *     should.throw(fn, /function throws a reference error/);","     *     should.throw(fn, ReferenceError);","     *     should.throw(fn, ReferenceError, 'function throws a reference error');","     *     should.throw(fn, ReferenceError, /function throws a reference error/);","     *","     * @name throw","     * @alias Throw","     * @param {Function} function","     * @param {ErrorConstructor} constructor","     * @param {RegExp} regexp","     * @param {String} message","     * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types","     * @namespace Should","     * @api public","     */","","    should.Throw = function (fn, errt, errs, msg) {","      new Assertion(fn, msg).to.Throw(errt, errs);","    };","","    /**","     * ### .exist","     *","     * Asserts that the target is neither `null` nor `undefined`.","     *","     *     var foo = 'hi';","     *","     *     should.exist(foo, 'foo exists');","     *","     * @name exist","     * @namespace Should","     * @api public","     */","","    should.exist = function (val, msg) {","      new Assertion(val, msg).to.exist;","    }","","    // negation","    should.not = {}","","    /**","     * ### .not.equal(actual, expected, [message])","     *","     * Asserts non-strict inequality (`!=`) of `actual` and `expected`.","     *","     *     should.not.equal(3, 4, 'these numbers are not equal');","     *","     * @name not.equal","     * @param {Mixed} actual","     * @param {Mixed} expected","     * @param {String} message","     * @namespace Should","     * @api public","     */","","    should.not.equal = function (val1, val2, msg) {","      new Assertion(val1, msg).to.not.equal(val2);","    };","","    /**","     * ### .throw(function, [constructor/regexp], [message])","     *","     * Asserts that `function` will _not_ throw an error that is an instance of","     * `constructor`, or alternately that it will not throw an error with message","     * matching `regexp`.","     *","     *     should.not.throw(fn, Error, 'function does not throw');","     *","     * @name not.throw","     * @alias not.Throw","     * @param {Function} function","     * @param {ErrorConstructor} constructor","     * @param {RegExp} regexp","     * @param {String} message","     * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types","     * @namespace Should","     * @api public","     */","","    should.not.Throw = function (fn, errt, errs, msg) {","      new Assertion(fn, msg).to.not.Throw(errt, errs);","    };","","    /**","     * ### .not.exist","     *","     * Asserts that the target is neither `null` nor `undefined`.","     *","     *     var bar = null;","     *","     *     should.not.exist(bar, 'bar does not exist');","     *","     * @name not.exist","     * @namespace Should","     * @api public","     */","","    should.not.exist = function (val, msg) {","      new Assertion(val, msg).to.not.exist;","    }","","    should['throw'] = should['Throw'];","    should.not['throw'] = should.not['Throw'];","","    return should;","  };","","  chai.should = loadShould;","  chai.Should = loadShould;","};",""],"l":{"7":1,"8":1,"10":1,"12":1,"13":0,"14":0,"16":0,"18":1,"25":0,"33":0,"39":0,"55":0,"56":0,"57":0,"79":0,"80":0,"107":0,"108":0,"125":0,"126":0,"130":0,"147":0,"148":0,"171":0,"172":0,"189":0,"190":0,"193":0,"194":0,"196":0,"199":1,"200":1}},"/home/travis/build/npmtest/node-npmtest-chai/chai/lib/chai/interface/assert.js":{"path":"/home/travis/build/npmtest/node-npmtest-chai/chai/lib/chai/interface/assert.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":1,"7":0,"8":0,"9":1,"10":0,"11":1,"12":0,"13":1,"14":0,"15":0,"16":1,"17":0,"18":0,"19":1,"20":0,"21":1,"22":0,"23":1,"24":0,"25":1,"26":0,"27":1,"28":0,"29":1,"30":0,"31":1,"32":0,"33":1,"34":0,"35":1,"36":0,"37":1,"38":0,"39":1,"40":0,"41":1,"42":0,"43":1,"44":0,"45":1,"46":0,"47":1,"48":0,"49":1,"50":0,"51":1,"52":0,"53":1,"54":0,"55":1,"56":0,"57":1,"58":0,"59":1,"60":0,"61":1,"62":0,"63":1,"64":0,"65":1,"66":0,"67":1,"68":0,"69":1,"70":0,"71":1,"72":0,"73":1,"74":0,"75":1,"76":0,"77":1,"78":0,"79":1,"80":0,"81":1,"82":0,"83":1,"84":0,"85":1,"86":0,"87":1,"88":0,"89":1,"90":0,"91":1,"92":0,"93":1,"94":0,"95":1,"96":0,"97":1,"98":0,"99":1,"100":0,"101":1,"102":0,"103":1,"104":0,"105":1,"106":0,"107":1,"108":0,"109":1,"110":0,"111":1,"112":0,"113":1,"114":0,"115":0,"116":0,"117":0,"118":0,"119":1,"120":0,"121":0,"122":0,"123":0,"124":1,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":1,"147":0,"148":1,"149":0,"150":1,"151":0,"152":1,"153":0,"154":1,"155":0,"156":1,"157":0,"158":1,"159":0,"160":1,"161":0,"162":1,"163":0,"164":1,"165":0,"166":1,"167":0,"168":1,"169":0,"170":1,"171":0,"172":1,"173":0,"174":0,"175":1,"176":0,"177":1,"178":0,"179":1,"180":0,"181":1,"182":0,"183":1,"184":0,"185":1,"186":0,"187":1,"188":10,"189":10},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0,0,0,0,0,0,0,0],"6":[0,0]},"f":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":10},"fnMap":{"1":{"name":"(anonymous_1)","line":8,"loc":{"start":{"line":8,"column":17},"end":{"line":8,"column":39}}},"2":{"name":"(anonymous_2)","line":36,"loc":{"start":{"line":36,"column":29},"end":{"line":36,"column":56}}},"3":{"name":"(anonymous_3)","line":59,"loc":{"start":{"line":59,"column":16},"end":{"line":59,"column":63}}},"4":{"name":"(anonymous_4)","line":84,"loc":{"start":{"line":84,"column":16},"end":{"line":84,"column":36}}},"5":{"name":"(anonymous_5)","line":104,"loc":{"start":{"line":104,"column":19},"end":{"line":104,"column":39}}},"6":{"name":"(anonymous_6)","line":123,"loc":{"start":{"line":123,"column":17},"end":{"line":123,"column":42}}},"7":{"name":"(anonymous_7)","line":150,"loc":{"start":{"line":150,"column":20},"end":{"line":150,"column":45}}},"8":{"name":"(anonymous_8)","line":177,"loc":{"start":{"line":177,"column":23},"end":{"line":177,"column":48}}},"9":{"name":"(anonymous_9)","line":196,"loc":{"start":{"line":196,"column":26},"end":{"line":196,"column":51}}},"10":{"name":"(anonymous_10)","line":215,"loc":{"start":{"line":215,"column":21},"end":{"line":215,"column":46}}},"11":{"name":"(anonymous_11)","line":234,"loc":{"start":{"line":234,"column":24},"end":{"line":234,"column":49}}},"12":{"name":"(anonymous_12)","line":253,"loc":{"start":{"line":253,"column":19},"end":{"line":253,"column":44}}},"13":{"name":"(anonymous_13)","line":273,"loc":{"start":{"line":273,"column":21},"end":{"line":273,"column":48}}},"14":{"name":"(anonymous_14)","line":292,"loc":{"start":{"line":292,"column":19},"end":{"line":292,"column":44}}},"15":{"name":"(anonymous_15)","line":312,"loc":{"start":{"line":312,"column":20},"end":{"line":312,"column":47}}},"16":{"name":"(anonymous_16)","line":331,"loc":{"start":{"line":331,"column":18},"end":{"line":331,"column":38}}},"17":{"name":"(anonymous_17)","line":350,"loc":{"start":{"line":350,"column":21},"end":{"line":350,"column":41}}},"18":{"name":"(anonymous_18)","line":369,"loc":{"start":{"line":369,"column":19},"end":{"line":369,"column":39}}},"19":{"name":"(anonymous_19)","line":388,"loc":{"start":{"line":388,"column":22},"end":{"line":388,"column":42}}},"20":{"name":"(anonymous_20)","line":406,"loc":{"start":{"line":406,"column":18},"end":{"line":406,"column":38}}},"21":{"name":"(anonymous_21)","line":425,"loc":{"start":{"line":425,"column":21},"end":{"line":425,"column":41}}},"22":{"name":"(anonymous_22)","line":442,"loc":{"start":{"line":442,"column":17},"end":{"line":442,"column":37}}},"23":{"name":"(anonymous_23)","line":458,"loc":{"start":{"line":458,"column":20},"end":{"line":458,"column":40}}},"24":{"name":"(anonymous_24)","line":477,"loc":{"start":{"line":477,"column":23},"end":{"line":477,"column":43}}},"25":{"name":"(anonymous_25)","line":496,"loc":{"start":{"line":496,"column":21},"end":{"line":496,"column":41}}},"26":{"name":"(anonymous_26)","line":515,"loc":{"start":{"line":515,"column":22},"end":{"line":515,"column":42}}},"27":{"name":"(anonymous_27)","line":534,"loc":{"start":{"line":534,"column":25},"end":{"line":534,"column":45}}},"28":{"name":"(anonymous_28)","line":554,"loc":{"start":{"line":554,"column":20},"end":{"line":554,"column":40}}},"29":{"name":"(anonymous_29)","line":574,"loc":{"start":{"line":574,"column":23},"end":{"line":574,"column":43}}},"30":{"name":"(anonymous_30)","line":593,"loc":{"start":{"line":593,"column":19},"end":{"line":593,"column":39}}},"31":{"name":"(anonymous_31)","line":612,"loc":{"start":{"line":612,"column":22},"end":{"line":612,"column":42}}},"32":{"name":"(anonymous_32)","line":631,"loc":{"start":{"line":631,"column":20},"end":{"line":631,"column":40}}},"33":{"name":"(anonymous_33)","line":650,"loc":{"start":{"line":650,"column":23},"end":{"line":650,"column":43}}},"34":{"name":"(anonymous_34)","line":669,"loc":{"start":{"line":669,"column":20},"end":{"line":669,"column":40}}},"35":{"name":"(anonymous_35)","line":688,"loc":{"start":{"line":688,"column":23},"end":{"line":688,"column":43}}},"36":{"name":"(anonymous_36)","line":710,"loc":{"start":{"line":710,"column":21},"end":{"line":710,"column":41}}},"37":{"name":"(anonymous_37)","line":732,"loc":{"start":{"line":732,"column":24},"end":{"line":732,"column":44}}},"38":{"name":"(anonymous_38)","line":757,"loc":{"start":{"line":757,"column":18},"end":{"line":757,"column":44}}},"39":{"name":"(anonymous_39)","line":777,"loc":{"start":{"line":777,"column":21},"end":{"line":777,"column":47}}},"40":{"name":"(anonymous_40)","line":799,"loc":{"start":{"line":799,"column":22},"end":{"line":799,"column":48}}},"41":{"name":"(anonymous_41)","line":821,"loc":{"start":{"line":821,"column":25},"end":{"line":821,"column":51}}},"42":{"name":"(anonymous_42)","line":842,"loc":{"start":{"line":842,"column":19},"end":{"line":842,"column":44}}},"43":{"name":"(anonymous_43)","line":863,"loc":{"start":{"line":863,"column":22},"end":{"line":863,"column":47}}},"44":{"name":"(anonymous_44)","line":882,"loc":{"start":{"line":882,"column":17},"end":{"line":882,"column":41}}},"45":{"name":"(anonymous_45)","line":901,"loc":{"start":{"line":901,"column":20},"end":{"line":901,"column":44}}},"46":{"name":"(anonymous_46)","line":920,"loc":{"start":{"line":920,"column":20},"end":{"line":920,"column":46}}},"47":{"name":"(anonymous_47)","line":939,"loc":{"start":{"line":939,"column":23},"end":{"line":939,"column":49}}},"48":{"name":"(anonymous_48)","line":959,"loc":{"start":{"line":959,"column":24},"end":{"line":959,"column":50}}},"49":{"name":"(anonymous_49)","line":979,"loc":{"start":{"line":979,"column":27},"end":{"line":979,"column":53}}},"50":{"name":"(anonymous_50)","line":1000,"loc":{"start":{"line":1000,"column":23},"end":{"line":1000,"column":54}}},"51":{"name":"(anonymous_51)","line":1021,"loc":{"start":{"line":1021,"column":26},"end":{"line":1021,"column":57}}},"52":{"name":"(anonymous_52)","line":1043,"loc":{"start":{"line":1043,"column":27},"end":{"line":1043,"column":58}}},"53":{"name":"(anonymous_53)","line":1065,"loc":{"start":{"line":1065,"column":30},"end":{"line":1065,"column":61}}},"54":{"name":"(anonymous_54)","line":1085,"loc":{"start":{"line":1085,"column":20},"end":{"line":1085,"column":45}}},"55":{"name":"(anonymous_55)","line":1114,"loc":{"start":{"line":1114,"column":18},"end":{"line":1114,"column":49}}},"56":{"name":"(anonymous_56)","line":1143,"loc":{"start":{"line":1143,"column":24},"end":{"line":1143,"column":49}}},"57":{"name":"(anonymous_57)","line":1169,"loc":{"start":{"line":1169,"column":20},"end":{"line":1169,"column":56}}},"58":{"name":"(anonymous_58)","line":1222,"loc":{"start":{"line":1222,"column":19},"end":{"line":1222,"column":51}}},"59":{"name":"(anonymous_59)","line":1242,"loc":{"start":{"line":1242,"column":25},"end":{"line":1242,"column":57}}},"60":{"name":"(anonymous_60)","line":1262,"loc":{"start":{"line":1262,"column":23},"end":{"line":1262,"column":50}}},"61":{"name":"(anonymous_61)","line":1282,"loc":{"start":{"line":1282,"column":27},"end":{"line":1282,"column":54}}},"62":{"name":"(anonymous_62)","line":1302,"loc":{"start":{"line":1302,"column":26},"end":{"line":1302,"column":59}}},"63":{"name":"(anonymous_63)","line":1323,"loc":{"start":{"line":1323,"column":30},"end":{"line":1323,"column":63}}},"64":{"name":"(anonymous_64)","line":1342,"loc":{"start":{"line":1342,"column":17},"end":{"line":1342,"column":46}}},"65":{"name":"(anonymous_65)","line":1364,"loc":{"start":{"line":1364,"column":19},"end":{"line":1364,"column":44}}},"66":{"name":"(anonymous_66)","line":1386,"loc":{"start":{"line":1386,"column":25},"end":{"line":1386,"column":50}}},"67":{"name":"(anonymous_67)","line":1408,"loc":{"start":{"line":1408,"column":21},"end":{"line":1408,"column":46}}},"68":{"name":"(anonymous_68)","line":1430,"loc":{"start":{"line":1430,"column":27},"end":{"line":1430,"column":52}}},"69":{"name":"(anonymous_69)","line":1452,"loc":{"start":{"line":1452,"column":21},"end":{"line":1452,"column":46}}},"70":{"name":"(anonymous_70)","line":1474,"loc":{"start":{"line":1474,"column":27},"end":{"line":1474,"column":52}}},"71":{"name":"(anonymous_71)","line":1494,"loc":{"start":{"line":1494,"column":19},"end":{"line":1494,"column":34}}},"72":{"name":"(anonymous_72)","line":1515,"loc":{"start":{"line":1515,"column":24},"end":{"line":1515,"column":44}}},"73":{"name":"(anonymous_73)","line":1540,"loc":{"start":{"line":1540,"column":27},"end":{"line":1540,"column":47}}},"74":{"name":"(anonymous_74)","line":1564,"loc":{"start":{"line":1564,"column":20},"end":{"line":1564,"column":40}}},"75":{"name":"(anonymous_75)","line":1583,"loc":{"start":{"line":1583,"column":23},"end":{"line":1583,"column":43}}},"76":{"name":"(anonymous_76)","line":1604,"loc":{"start":{"line":1604,"column":20},"end":{"line":1604,"column":40}}},"77":{"name":"(anonymous_77)","line":1623,"loc":{"start":{"line":1623,"column":23},"end":{"line":1623,"column":43}}},"78":{"name":"alias","line":1631,"loc":{"start":{"line":1631,"column":3},"end":{"line":1631,"column":27}}}},"statementMap":{"1":{"start":{"line":8,"column":0},"end":{"line":1645,"column":2}},"2":{"start":{"line":14,"column":2},"end":{"line":15,"column":23}},"3":{"start":{"line":36,"column":2},"end":{"line":43,"column":4}},"4":{"start":{"line":37,"column":4},"end":{"line":37,"column":54}},"5":{"start":{"line":38,"column":4},"end":{"line":42,"column":6}},"6":{"start":{"line":59,"column":2},"end":{"line":66,"column":4}},"7":{"start":{"line":60,"column":4},"end":{"line":60,"column":41}},"8":{"start":{"line":61,"column":4},"end":{"line":65,"column":20}},"9":{"start":{"line":84,"column":2},"end":{"line":86,"column":4}},"10":{"start":{"line":85,"column":4},"end":{"line":85,"column":34}},"11":{"start":{"line":104,"column":2},"end":{"line":106,"column":4}},"12":{"start":{"line":105,"column":4},"end":{"line":105,"column":38}},"13":{"start":{"line":123,"column":2},"end":{"line":133,"column":4}},"14":{"start":{"line":124,"column":4},"end":{"line":124,"column":53}},"15":{"start":{"line":126,"column":4},"end":{"line":132,"column":6}},"16":{"start":{"line":150,"column":2},"end":{"line":160,"column":4}},"17":{"start":{"line":151,"column":4},"end":{"line":151,"column":56}},"18":{"start":{"line":153,"column":4},"end":{"line":159,"column":6}},"19":{"start":{"line":177,"column":2},"end":{"line":179,"column":4}},"20":{"start":{"line":178,"column":4},"end":{"line":178,"column":42}},"21":{"start":{"line":196,"column":2},"end":{"line":198,"column":4}},"22":{"start":{"line":197,"column":4},"end":{"line":197,"column":46}},"23":{"start":{"line":215,"column":2},"end":{"line":217,"column":4}},"24":{"start":{"line":216,"column":4},"end":{"line":216,"column":40}},"25":{"start":{"line":234,"column":2},"end":{"line":236,"column":4}},"26":{"start":{"line":235,"column":4},"end":{"line":235,"column":44}},"27":{"start":{"line":253,"column":2},"end":{"line":255,"column":4}},"28":{"start":{"line":254,"column":4},"end":{"line":254,"column":45}},"29":{"start":{"line":273,"column":2},"end":{"line":275,"column":4}},"30":{"start":{"line":274,"column":4},"end":{"line":274,"column":47}},"31":{"start":{"line":292,"column":2},"end":{"line":294,"column":4}},"32":{"start":{"line":293,"column":4},"end":{"line":293,"column":45}},"33":{"start":{"line":312,"column":2},"end":{"line":314,"column":4}},"34":{"start":{"line":313,"column":4},"end":{"line":313,"column":46}},"35":{"start":{"line":331,"column":2},"end":{"line":333,"column":4}},"36":{"start":{"line":332,"column":4},"end":{"line":332,"column":39}},"37":{"start":{"line":350,"column":2},"end":{"line":352,"column":4}},"38":{"start":{"line":351,"column":4},"end":{"line":351,"column":47}},"39":{"start":{"line":369,"column":2},"end":{"line":371,"column":4}},"40":{"start":{"line":370,"column":4},"end":{"line":370,"column":40}},"41":{"start":{"line":388,"column":2},"end":{"line":390,"column":4}},"42":{"start":{"line":389,"column":4},"end":{"line":389,"column":48}},"43":{"start":{"line":406,"column":2},"end":{"line":408,"column":4}},"44":{"start":{"line":407,"column":4},"end":{"line":407,"column":43}},"45":{"start":{"line":425,"column":2},"end":{"line":427,"column":4}},"46":{"start":{"line":426,"column":4},"end":{"line":426,"column":47}},"47":{"start":{"line":442,"column":2},"end":{"line":444,"column":4}},"48":{"start":{"line":443,"column":4},"end":{"line":443,"column":38}},"49":{"start":{"line":458,"column":2},"end":{"line":460,"column":4}},"50":{"start":{"line":459,"column":4},"end":{"line":459,"column":42}},"51":{"start":{"line":477,"column":2},"end":{"line":479,"column":4}},"52":{"start":{"line":478,"column":4},"end":{"line":478,"column":48}},"53":{"start":{"line":496,"column":2},"end":{"line":498,"column":4}},"54":{"start":{"line":497,"column":4},"end":{"line":497,"column":52}},"55":{"start":{"line":515,"column":2},"end":{"line":517,"column":4}},"56":{"start":{"line":516,"column":4},"end":{"line":516,"column":48}},"57":{"start":{"line":534,"column":2},"end":{"line":536,"column":4}},"58":{"start":{"line":535,"column":4},"end":{"line":535,"column":52}},"59":{"start":{"line":554,"column":2},"end":{"line":556,"column":4}},"60":{"start":{"line":555,"column":4},"end":{"line":555,"column":46}},"61":{"start":{"line":574,"column":2},"end":{"line":576,"column":4}},"62":{"start":{"line":575,"column":4},"end":{"line":575,"column":50}},"63":{"start":{"line":593,"column":2},"end":{"line":595,"column":4}},"64":{"start":{"line":594,"column":4},"end":{"line":594,"column":46}},"65":{"start":{"line":612,"column":2},"end":{"line":614,"column":4}},"66":{"start":{"line":613,"column":4},"end":{"line":613,"column":50}},"67":{"start":{"line":631,"column":2},"end":{"line":633,"column":4}},"68":{"start":{"line":632,"column":4},"end":{"line":632,"column":46}},"69":{"start":{"line":650,"column":2},"end":{"line":652,"column":4}},"70":{"start":{"line":651,"column":4},"end":{"line":651,"column":50}},"71":{"start":{"line":669,"column":2},"end":{"line":671,"column":4}},"72":{"start":{"line":670,"column":4},"end":{"line":670,"column":46}},"73":{"start":{"line":688,"column":2},"end":{"line":690,"column":4}},"74":{"start":{"line":689,"column":4},"end":{"line":689,"column":50}},"75":{"start":{"line":710,"column":2},"end":{"line":712,"column":4}},"76":{"start":{"line":711,"column":4},"end":{"line":711,"column":47}},"77":{"start":{"line":732,"column":2},"end":{"line":734,"column":4}},"78":{"start":{"line":733,"column":4},"end":{"line":733,"column":51}},"79":{"start":{"line":757,"column":2},"end":{"line":759,"column":4}},"80":{"start":{"line":758,"column":4},"end":{"line":758,"column":42}},"81":{"start":{"line":777,"column":2},"end":{"line":779,"column":4}},"82":{"start":{"line":778,"column":4},"end":{"line":778,"column":46}},"83":{"start":{"line":799,"column":2},"end":{"line":801,"column":4}},"84":{"start":{"line":800,"column":4},"end":{"line":800,"column":51}},"85":{"start":{"line":821,"column":2},"end":{"line":823,"column":4}},"86":{"start":{"line":822,"column":4},"end":{"line":822,"column":55}},"87":{"start":{"line":842,"column":2},"end":{"line":844,"column":4}},"88":{"start":{"line":843,"column":4},"end":{"line":843,"column":57}},"89":{"start":{"line":863,"column":2},"end":{"line":865,"column":4}},"90":{"start":{"line":864,"column":4},"end":{"line":864,"column":64}},"91":{"start":{"line":882,"column":2},"end":{"line":884,"column":4}},"92":{"start":{"line":883,"column":4},"end":{"line":883,"column":41}},"93":{"start":{"line":901,"column":2},"end":{"line":903,"column":4}},"94":{"start":{"line":902,"column":4},"end":{"line":902,"column":45}},"95":{"start":{"line":920,"column":2},"end":{"line":922,"column":4}},"96":{"start":{"line":921,"column":4},"end":{"line":921,"column":51}},"97":{"start":{"line":939,"column":2},"end":{"line":941,"column":4}},"98":{"start":{"line":940,"column":4},"end":{"line":940,"column":55}},"99":{"start":{"line":959,"column":2},"end":{"line":961,"column":4}},"100":{"start":{"line":960,"column":4},"end":{"line":960,"column":56}},"101":{"start":{"line":979,"column":2},"end":{"line":981,"column":4}},"102":{"start":{"line":980,"column":4},"end":{"line":980,"column":60}},"103":{"start":{"line":1000,"column":2},"end":{"line":1002,"column":4}},"104":{"start":{"line":1001,"column":4},"end":{"line":1001,"column":56}},"105":{"start":{"line":1021,"column":2},"end":{"line":1023,"column":4}},"106":{"start":{"line":1022,"column":4},"end":{"line":1022,"column":60}},"107":{"start":{"line":1043,"column":2},"end":{"line":1045,"column":4}},"108":{"start":{"line":1044,"column":4},"end":{"line":1044,"column":61}},"109":{"start":{"line":1065,"column":2},"end":{"line":1067,"column":4}},"110":{"start":{"line":1066,"column":4},"end":{"line":1066,"column":65}},"111":{"start":{"line":1085,"column":2},"end":{"line":1087,"column":4}},"112":{"start":{"line":1086,"column":4},"end":{"line":1086,"column":48}},"113":{"start":{"line":1114,"column":2},"end":{"line":1122,"column":4}},"114":{"start":{"line":1115,"column":4},"end":{"line":1118,"column":5}},"115":{"start":{"line":1116,"column":6},"end":{"line":1116,"column":18}},"116":{"start":{"line":1117,"column":6},"end":{"line":1117,"column":18}},"117":{"start":{"line":1120,"column":4},"end":{"line":1120,"column":64}},"118":{"start":{"line":1121,"column":4},"end":{"line":1121,"column":37}},"119":{"start":{"line":1143,"column":2},"end":{"line":1150,"column":4}},"120":{"start":{"line":1144,"column":4},"end":{"line":1147,"column":5}},"121":{"start":{"line":1145,"column":6},"end":{"line":1145,"column":17}},"122":{"start":{"line":1146,"column":6},"end":{"line":1146,"column":18}},"123":{"start":{"line":1149,"column":4},"end":{"line":1149,"column":46}},"124":{"start":{"line":1169,"column":2},"end":{"line":1204,"column":4}},"125":{"start":{"line":1170,"column":4},"end":{"line":1170,"column":11}},"126":{"start":{"line":1171,"column":4},"end":{"line":1198,"column":5}},"127":{"start":{"line":1173,"column":8},"end":{"line":1173,"column":25}},"128":{"start":{"line":1174,"column":8},"end":{"line":1174,"column":14}},"129":{"start":{"line":1176,"column":8},"end":{"line":1176,"column":26}},"130":{"start":{"line":1177,"column":8},"end":{"line":1177,"column":14}},"131":{"start":{"line":1179,"column":8},"end":{"line":1179,"column":24}},"132":{"start":{"line":1180,"column":8},"end":{"line":1180,"column":14}},"133":{"start":{"line":1182,"column":8},"end":{"line":1182,"column":25}},"134":{"start":{"line":1183,"column":8},"end":{"line":1183,"column":14}},"135":{"start":{"line":1185,"column":8},"end":{"line":1185,"column":24}},"136":{"start":{"line":1186,"column":8},"end":{"line":1186,"column":14}},"137":{"start":{"line":1188,"column":8},"end":{"line":1188,"column":25}},"138":{"start":{"line":1189,"column":8},"end":{"line":1189,"column":14}},"139":{"start":{"line":1191,"column":8},"end":{"line":1191,"column":25}},"140":{"start":{"line":1192,"column":8},"end":{"line":1192,"column":14}},"141":{"start":{"line":1194,"column":8},"end":{"line":1194,"column":26}},"142":{"start":{"line":1195,"column":8},"end":{"line":1195,"column":14}},"143":{"start":{"line":1197,"column":8},"end":{"line":1197,"column":63}},"144":{"start":{"line":1199,"column":4},"end":{"line":1199,"column":38}},"145":{"start":{"line":1200,"column":4},"end":{"line":1203,"column":96}},"146":{"start":{"line":1222,"column":2},"end":{"line":1224,"column":4}},"147":{"start":{"line":1223,"column":4},"end":{"line":1223,"column":54}},"148":{"start":{"line":1242,"column":2},"end":{"line":1244,"column":4}},"149":{"start":{"line":1243,"column":4},"end":{"line":1243,"column":60}},"150":{"start":{"line":1262,"column":2},"end":{"line":1264,"column":3}},"151":{"start":{"line":1263,"column":4},"end":{"line":1263,"column":56}},"152":{"start":{"line":1282,"column":2},"end":{"line":1284,"column":3}},"153":{"start":{"line":1283,"column":4},"end":{"line":1283,"column":61}},"154":{"start":{"line":1302,"column":2},"end":{"line":1304,"column":3}},"155":{"start":{"line":1303,"column":4},"end":{"line":1303,"column":60}},"156":{"start":{"line":1323,"column":2},"end":{"line":1325,"column":3}},"157":{"start":{"line":1324,"column":4},"end":{"line":1324,"column":65}},"158":{"start":{"line":1342,"column":2},"end":{"line":1344,"column":3}},"159":{"start":{"line":1343,"column":4},"end":{"line":1343,"column":49}},"160":{"start":{"line":1364,"column":2},"end":{"line":1366,"column":3}},"161":{"start":{"line":1365,"column":4},"end":{"line":1365,"column":43}},"162":{"start":{"line":1386,"column":2},"end":{"line":1388,"column":3}},"163":{"start":{"line":1387,"column":4},"end":{"line":1387,"column":47}},"164":{"start":{"line":1408,"column":2},"end":{"line":1410,"column":3}},"165":{"start":{"line":1409,"column":4},"end":{"line":1409,"column":45}},"166":{"start":{"line":1430,"column":2},"end":{"line":1432,"column":3}},"167":{"start":{"line":1431,"column":4},"end":{"line":1431,"column":49}},"168":{"start":{"line":1452,"column":2},"end":{"line":1454,"column":3}},"169":{"start":{"line":1453,"column":4},"end":{"line":1453,"column":45}},"170":{"start":{"line":1474,"column":2},"end":{"line":1476,"column":3}},"171":{"start":{"line":1475,"column":4},"end":{"line":1475,"column":49}},"172":{"start":{"line":1494,"column":2},"end":{"line":1498,"column":4}},"173":{"start":{"line":1495,"column":4},"end":{"line":1497,"column":5}},"174":{"start":{"line":1496,"column":6},"end":{"line":1496,"column":17}},"175":{"start":{"line":1515,"column":2},"end":{"line":1517,"column":4}},"176":{"start":{"line":1516,"column":4},"end":{"line":1516,"column":45}},"177":{"start":{"line":1540,"column":2},"end":{"line":1542,"column":4}},"178":{"start":{"line":1541,"column":4},"end":{"line":1541,"column":49}},"179":{"start":{"line":1564,"column":2},"end":{"line":1566,"column":4}},"180":{"start":{"line":1565,"column":4},"end":{"line":1565,"column":41}},"181":{"start":{"line":1583,"column":2},"end":{"line":1585,"column":4}},"182":{"start":{"line":1584,"column":4},"end":{"line":1584,"column":45}},"183":{"start":{"line":1604,"column":2},"end":{"line":1606,"column":4}},"184":{"start":{"line":1605,"column":4},"end":{"line":1605,"column":41}},"185":{"start":{"line":1623,"column":2},"end":{"line":1625,"column":4}},"186":{"start":{"line":1624,"column":4},"end":{"line":1624,"column":45}},"187":{"start":{"line":1631,"column":2},"end":{"line":1644,"column":31}},"188":{"start":{"line":1632,"column":4},"end":{"line":1632,"column":30}},"189":{"start":{"line":1633,"column":4},"end":{"line":1633,"column":17}}},"branchMap":{"1":{"line":60,"type":"binary-expr","locations":[{"start":{"line":60,"column":14},"end":{"line":60,"column":21}},{"start":{"line":60,"column":25},"end":{"line":60,"column":40}}]},"2":{"line":1115,"type":"if","locations":[{"start":{"line":1115,"column":4},"end":{"line":1115,"column":4}},{"start":{"line":1115,"column":4},"end":{"line":1115,"column":4}}]},"3":{"line":1115,"type":"binary-expr","locations":[{"start":{"line":1115,"column":8},"end":{"line":1115,"column":32}},{"start":{"line":1115,"column":36},"end":{"line":1115,"column":58}}]},"4":{"line":1144,"type":"if","locations":[{"start":{"line":1144,"column":4},"end":{"line":1144,"column":4}},{"start":{"line":1144,"column":4},"end":{"line":1144,"column":4}}]},"5":{"line":1171,"type":"switch","locations":[{"start":{"line":1172,"column":6},"end":{"line":1174,"column":14}},{"start":{"line":1175,"column":6},"end":{"line":1177,"column":14}},{"start":{"line":1178,"column":6},"end":{"line":1180,"column":14}},{"start":{"line":1181,"column":6},"end":{"line":1183,"column":14}},{"start":{"line":1184,"column":6},"end":{"line":1186,"column":14}},{"start":{"line":1187,"column":6},"end":{"line":1189,"column":14}},{"start":{"line":1190,"column":6},"end":{"line":1192,"column":14}},{"start":{"line":1193,"column":6},"end":{"line":1195,"column":14}},{"start":{"line":1196,"column":6},"end":{"line":1197,"column":63}}]},"6":{"line":1495,"type":"if","locations":[{"start":{"line":1495,"column":4},"end":{"line":1495,"column":4}},{"start":{"line":1495,"column":4},"end":{"line":1495,"column":4}}]}},"code":["/*!"," * chai"," * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>"," * MIT Licensed"," */","","","module.exports = function (chai, util) {","","  /*!","   * Chai dependencies.","   */","","  var Assertion = chai.Assertion","    , flag = util.flag;","","  /*!","   * Module export.","   */","","  /**","   * ### assert(expression, message)","   *","   * Write your own test expressions.","   *","   *     assert('foo' !== 'bar', 'foo is not bar');","   *     assert(Array.isArray([]), 'empty arrays are arrays');","   *","   * @param {Mixed} expression to test for truthiness","   * @param {String} message to display on error","   * @name assert","   * @namespace Assert","   * @api public","   */","","  var assert = chai.assert = function (express, errmsg) {","    var test = new Assertion(null, null, chai.assert);","    test.assert(","        express","      , errmsg","      , '[ negation message unavailable ]'","    );","  };","","  /**","   * ### .fail(actual, expected, [message], [operator])","   *","   * Throw a failure. Node.js `assert` module-compatible.","   *","   * @name fail","   * @param {Mixed} actual","   * @param {Mixed} expected","   * @param {String} message","   * @param {String} operator","   * @namespace Assert","   * @api public","   */","","  assert.fail = function (actual, expected, message, operator) {","    message = message || 'assert.fail()';","    throw new chai.AssertionError(message, {","        actual: actual","      , expected: expected","      , operator: operator","    }, assert.fail);","  };","","  /**","   * ### .isOk(object, [message])","   *","   * Asserts that `object` is truthy.","   *","   *     assert.isOk('everything', 'everything is ok');","   *     assert.isOk(false, 'this will fail');","   *","   * @name isOk","   * @alias ok","   * @param {Mixed} object to test","   * @param {String} message","   * @namespace Assert","   * @api public","   */","","  assert.isOk = function (val, msg) {","    new Assertion(val, msg).is.ok;","  };","","  /**","   * ### .isNotOk(object, [message])","   *","   * Asserts that `object` is falsy.","   *","   *     assert.isNotOk('everything', 'this will fail');","   *     assert.isNotOk(false, 'this will pass');","   *","   * @name isNotOk","   * @alias notOk","   * @param {Mixed} object to test","   * @param {String} message","   * @namespace Assert","   * @api public","   */","","  assert.isNotOk = function (val, msg) {","    new Assertion(val, msg).is.not.ok;","  };","","  /**","   * ### .equal(actual, expected, [message])","   *","   * Asserts non-strict equality (`==`) of `actual` and `expected`.","   *","   *     assert.equal(3, '3', '== coerces values to strings');","   *","   * @name equal","   * @param {Mixed} actual","   * @param {Mixed} expected","   * @param {String} message","   * @namespace Assert","   * @api public","   */","","  assert.equal = function (act, exp, msg) {","    var test = new Assertion(act, msg, assert.equal);","","    test.assert(","        exp == flag(test, 'object')","      , 'expected #{this} to equal #{exp}'","      , 'expected #{this} to not equal #{act}'","      , exp","      , act","    );","  };","","  /**","   * ### .notEqual(actual, expected, [message])","   *","   * Asserts non-strict inequality (`!=`) of `actual` and `expected`.","   *","   *     assert.notEqual(3, 4, 'these numbers are not equal');","   *","   * @name notEqual","   * @param {Mixed} actual","   * @param {Mixed} expected","   * @param {String} message","   * @namespace Assert","   * @api public","   */","","  assert.notEqual = function (act, exp, msg) {","    var test = new Assertion(act, msg, assert.notEqual);","","    test.assert(","        exp != flag(test, 'object')","      , 'expected #{this} to not equal #{exp}'","      , 'expected #{this} to equal #{act}'","      , exp","      , act","    );","  };","","  /**","   * ### .strictEqual(actual, expected, [message])","   *","   * Asserts strict equality (`===`) of `actual` and `expected`.","   *","   *     assert.strictEqual(true, true, 'these booleans are strictly equal');","   *","   * @name strictEqual","   * @param {Mixed} actual","   * @param {Mixed} expected","   * @param {String} message","   * @namespace Assert","   * @api public","   */","","  assert.strictEqual = function (act, exp, msg) {","    new Assertion(act, msg).to.equal(exp);","  };","","  /**","   * ### .notStrictEqual(actual, expected, [message])","   *","   * Asserts strict inequality (`!==`) of `actual` and `expected`.","   *","   *     assert.notStrictEqual(3, '3', 'no coercion for strict equality');","   *","   * @name notStrictEqual","   * @param {Mixed} actual","   * @param {Mixed} expected","   * @param {String} message","   * @namespace Assert","   * @api public","   */","","  assert.notStrictEqual = function (act, exp, msg) {","    new Assertion(act, msg).to.not.equal(exp);","  };","","  /**","   * ### .deepEqual(actual, expected, [message])","   *","   * Asserts that `actual` is deeply equal to `expected`.","   *","   *     assert.deepEqual({ tea: 'green' }, { tea: 'green' });","   *","   * @name deepEqual","   * @param {Mixed} actual","   * @param {Mixed} expected","   * @param {String} message","   * @namespace Assert","   * @api public","   */","","  assert.deepEqual = function (act, exp, msg) {","    new Assertion(act, msg).to.eql(exp);","  };","","  /**","   * ### .notDeepEqual(actual, expected, [message])","   *","   * Assert that `actual` is not deeply equal to `expected`.","   *","   *     assert.notDeepEqual({ tea: 'green' }, { tea: 'jasmine' });","   *","   * @name notDeepEqual","   * @param {Mixed} actual","   * @param {Mixed} expected","   * @param {String} message","   * @namespace Assert","   * @api public","   */","","  assert.notDeepEqual = function (act, exp, msg) {","    new Assertion(act, msg).to.not.eql(exp);","  };","","   /**","   * ### .isAbove(valueToCheck, valueToBeAbove, [message])","   *","   * Asserts `valueToCheck` is strictly greater than (>) `valueToBeAbove`","   *","   *     assert.isAbove(5, 2, '5 is strictly greater than 2');","   *","   * @name isAbove","   * @param {Mixed} valueToCheck","   * @param {Mixed} valueToBeAbove","   * @param {String} message","   * @namespace Assert","   * @api public","   */","","  assert.isAbove = function (val, abv, msg) {","    new Assertion(val, msg).to.be.above(abv);","  };","","   /**","   * ### .isAtLeast(valueToCheck, valueToBeAtLeast, [message])","   *","   * Asserts `valueToCheck` is greater than or equal to (>=) `valueToBeAtLeast`","   *","   *     assert.isAtLeast(5, 2, '5 is greater or equal to 2');","   *     assert.isAtLeast(3, 3, '3 is greater or equal to 3');","   *","   * @name isAtLeast","   * @param {Mixed} valueToCheck","   * @param {Mixed} valueToBeAtLeast","   * @param {String} message","   * @namespace Assert","   * @api public","   */","","  assert.isAtLeast = function (val, atlst, msg) {","    new Assertion(val, msg).to.be.least(atlst);","  };","","   /**","   * ### .isBelow(valueToCheck, valueToBeBelow, [message])","   *","   * Asserts `valueToCheck` is strictly less than (<) `valueToBeBelow`","   *","   *     assert.isBelow(3, 6, '3 is strictly less than 6');","   *","   * @name isBelow","   * @param {Mixed} valueToCheck","   * @param {Mixed} valueToBeBelow","   * @param {String} message","   * @namespace Assert","   * @api public","   */","","  assert.isBelow = function (val, blw, msg) {","    new Assertion(val, msg).to.be.below(blw);","  };","","   /**","   * ### .isAtMost(valueToCheck, valueToBeAtMost, [message])","   *","   * Asserts `valueToCheck` is less than or equal to (<=) `valueToBeAtMost`","   *","   *     assert.isAtMost(3, 6, '3 is less than or equal to 6');","   *     assert.isAtMost(4, 4, '4 is less than or equal to 4');","   *","   * @name isAtMost","   * @param {Mixed} valueToCheck","   * @param {Mixed} valueToBeAtMost","   * @param {String} message","   * @namespace Assert","   * @api public","   */","","  assert.isAtMost = function (val, atmst, msg) {","    new Assertion(val, msg).to.be.most(atmst);","  };","","  /**","   * ### .isTrue(value, [message])","   *","   * Asserts that `value` is true.","   *","   *     var teaServed = true;","   *     assert.isTrue(teaServed, 'the tea has been served');","   *","   * @name isTrue","   * @param {Mixed} value","   * @param {String} message","   * @namespace Assert","   * @api public","   */","","  assert.isTrue = function (val, msg) {","    new Assertion(val, msg).is['true'];","  };","","  /**","   * ### .isNotTrue(value, [message])","   *","   * Asserts that `value` is not true.","   *","   *     var tea = 'tasty chai';","   *     assert.isNotTrue(tea, 'great, time for tea!');","   *","   * @name isNotTrue","   * @param {Mixed} value","   * @param {String} message","   * @namespace Assert","   * @api public","   */","","  assert.isNotTrue = function (val, msg) {","    new Assertion(val, msg).to.not.equal(true);","  };","","  /**","   * ### .isFalse(value, [message])","   *","   * Asserts that `value` is false.","   *","   *     var teaServed = false;","   *     assert.isFalse(teaServed, 'no tea yet? hmm...');","   *","   * @name isFalse","   * @param {Mixed} value","   * @param {String} message","   * @namespace Assert","   * @api public","   */","","  assert.isFalse = function (val, msg) {","    new Assertion(val, msg).is['false'];","  };","","  /**","   * ### .isNotFalse(value, [message])","   *","   * Asserts that `value` is not false.","   *","   *     var tea = 'tasty chai';","   *     assert.isNotFalse(tea, 'great, time for tea!');","   *","   * @name isNotFalse","   * @param {Mixed} value","   * @param {String} message","   * @namespace Assert","   * @api public","   */","","  assert.isNotFalse = function (val, msg) {","    new Assertion(val, msg).to.not.equal(false);","  };","","  /**","   * ### .isNull(value, [message])","   *","   * Asserts that `value` is null.","   *","   *     assert.isNull(err, 'there was no error');","   *","   * @name isNull","   * @param {Mixed} value","   * @param {String} message","   * @namespace Assert","   * @api public","   */","","  assert.isNull = function (val, msg) {","    new Assertion(val, msg).to.equal(null);","  };","","  /**","   * ### .isNotNull(value, [message])","   *","   * Asserts that `value` is not null.","   *","   *     var tea = 'tasty chai';","   *     assert.isNotNull(tea, 'great, time for tea!');","   *","   * @name isNotNull","   * @param {Mixed} value","   * @param {String} message","   * @namespace Assert","   * @api public","   */","","  assert.isNotNull = function (val, msg) {","    new Assertion(val, msg).to.not.equal(null);","  };","","  /**","   * ### .isNaN","   * Asserts that value is NaN","   *","   *    assert.isNaN('foo', 'foo is NaN');","   *","   * @name isNaN","   * @param {Mixed} value","   * @param {String} message","   * @namespace Assert","   * @api public","   */","","  assert.isNaN = function (val, msg) {","    new Assertion(val, msg).to.be.NaN;","  };","","  /**","   * ### .isNotNaN","   * Asserts that value is not NaN","   *","   *    assert.isNotNaN(4, '4 is not NaN');","   *","   * @name isNotNaN","   * @param {Mixed} value","   * @param {String} message","   * @namespace Assert","   * @api public","   */","  assert.isNotNaN = function (val, msg) {","    new Assertion(val, msg).not.to.be.NaN;","  };","","  /**","   * ### .isUndefined(value, [message])","   *","   * Asserts that `value` is `undefined`.","   *","   *     var tea;","   *     assert.isUndefined(tea, 'no tea defined');","   *","   * @name isUndefined","   * @param {Mixed} value","   * @param {String} message","   * @namespace Assert","   * @api public","   */","","  assert.isUndefined = function (val, msg) {","    new Assertion(val, msg).to.equal(undefined);","  };","","  /**","   * ### .isDefined(value, [message])","   *","   * Asserts that `value` is not `undefined`.","   *","   *     var tea = 'cup of chai';","   *     assert.isDefined(tea, 'tea has been defined');","   *","   * @name isDefined","   * @param {Mixed} value","   * @param {String} message","   * @namespace Assert","   * @api public","   */","","  assert.isDefined = function (val, msg) {","    new Assertion(val, msg).to.not.equal(undefined);","  };","","  /**","   * ### .isFunction(value, [message])","   *","   * Asserts that `value` is a function.","   *","   *     function serveTea() { return 'cup of tea'; };","   *     assert.isFunction(serveTea, 'great, we can have tea now');","   *","   * @name isFunction","   * @param {Mixed} value","   * @param {String} message","   * @namespace Assert","   * @api public","   */","","  assert.isFunction = function (val, msg) {","    new Assertion(val, msg).to.be.a('function');","  };","","  /**","   * ### .isNotFunction(value, [message])","   *","   * Asserts that `value` is _not_ a function.","   *","   *     var serveTea = [ 'heat', 'pour', 'sip' ];","   *     assert.isNotFunction(serveTea, 'great, we have listed the steps');","   *","   * @name isNotFunction","   * @param {Mixed} value","   * @param {String} message","   * @namespace Assert","   * @api public","   */","","  assert.isNotFunction = function (val, msg) {","    new Assertion(val, msg).to.not.be.a('function');","  };","","  /**","   * ### .isObject(value, [message])","   *","   * Asserts that `value` is an object of type 'Object' (as revealed by `Object.prototype.toString`).","   * _The assertion does not match subclassed objects._","   *","   *     var selection = { name: 'Chai', serve: 'with spices' };","   *     assert.isObject(selection, 'tea selection is an object');","   *","   * @name isObject","   * @param {Mixed} value","   * @param {String} message","   * @namespace Assert","   * @api public","   */","","  assert.isObject = function (val, msg) {","    new Assertion(val, msg).to.be.a('object');","  };","","  /**","   * ### .isNotObject(value, [message])","   *","   * Asserts that `value` is _not_ an object of type 'Object' (as revealed by `Object.prototype.toString`).","   *","   *     var selection = 'chai'","   *     assert.isNotObject(selection, 'tea selection is not an object');","   *     assert.isNotObject(null, 'null is not an object');","   *","   * @name isNotObject","   * @param {Mixed} value","   * @param {String} message","   * @namespace Assert","   * @api public","   */","","  assert.isNotObject = function (val, msg) {","    new Assertion(val, msg).to.not.be.a('object');","  };","","  /**","   * ### .isArray(value, [message])","   *","   * Asserts that `value` is an array.","   *","   *     var menu = [ 'green', 'chai', 'oolong' ];","   *     assert.isArray(menu, 'what kind of tea do we want?');","   *","   * @name isArray","   * @param {Mixed} value","   * @param {String} message","   * @namespace Assert","   * @api public","   */","","  assert.isArray = function (val, msg) {","    new Assertion(val, msg).to.be.an('array');","  };","","  /**","   * ### .isNotArray(value, [message])","   *","   * Asserts that `value` is _not_ an array.","   *","   *     var menu = 'green|chai|oolong';","   *     assert.isNotArray(menu, 'what kind of tea do we want?');","   *","   * @name isNotArray","   * @param {Mixed} value","   * @param {String} message","   * @namespace Assert","   * @api public","   */","","  assert.isNotArray = function (val, msg) {","    new Assertion(val, msg).to.not.be.an('array');","  };","","  /**","   * ### .isString(value, [message])","   *","   * Asserts that `value` is a string.","   *","   *     var teaOrder = 'chai';","   *     assert.isString(teaOrder, 'order placed');","   *","   * @name isString","   * @param {Mixed} value","   * @param {String} message","   * @namespace Assert","   * @api public","   */","","  assert.isString = function (val, msg) {","    new Assertion(val, msg).to.be.a('string');","  };","","  /**","   * ### .isNotString(value, [message])","   *","   * Asserts that `value` is _not_ a string.","   *","   *     var teaOrder = 4;","   *     assert.isNotString(teaOrder, 'order placed');","   *","   * @name isNotString","   * @param {Mixed} value","   * @param {String} message","   * @namespace Assert","   * @api public","   */","","  assert.isNotString = function (val, msg) {","    new Assertion(val, msg).to.not.be.a('string');","  };","","  /**","   * ### .isNumber(value, [message])","   *","   * Asserts that `value` is a number.","   *","   *     var cups = 2;","   *     assert.isNumber(cups, 'how many cups');","   *","   * @name isNumber","   * @param {Number} value","   * @param {String} message","   * @namespace Assert","   * @api public","   */","","  assert.isNumber = function (val, msg) {","    new Assertion(val, msg).to.be.a('number');","  };","","  /**","   * ### .isNotNumber(value, [message])","   *","   * Asserts that `value` is _not_ a number.","   *","   *     var cups = '2 cups please';","   *     assert.isNotNumber(cups, 'how many cups');","   *","   * @name isNotNumber","   * @param {Mixed} value","   * @param {String} message","   * @namespace Assert","   * @api public","   */","","  assert.isNotNumber = function (val, msg) {","    new Assertion(val, msg).to.not.be.a('number');","  };","","  /**","   * ### .isBoolean(value, [message])","   *","   * Asserts that `value` is a boolean.","   *","   *     var teaReady = true","   *       , teaServed = false;","   *","   *     assert.isBoolean(teaReady, 'is the tea ready');","   *     assert.isBoolean(teaServed, 'has tea been served');","   *","   * @name isBoolean","   * @param {Mixed} value","   * @param {String} message","   * @namespace Assert","   * @api public","   */","","  assert.isBoolean = function (val, msg) {","    new Assertion(val, msg).to.be.a('boolean');","  };","","  /**","   * ### .isNotBoolean(value, [message])","   *","   * Asserts that `value` is _not_ a boolean.","   *","   *     var teaReady = 'yep'","   *       , teaServed = 'nope';","   *","   *     assert.isNotBoolean(teaReady, 'is the tea ready');","   *     assert.isNotBoolean(teaServed, 'has tea been served');","   *","   * @name isNotBoolean","   * @param {Mixed} value","   * @param {String} message","   * @namespace Assert","   * @api public","   */","","  assert.isNotBoolean = function (val, msg) {","    new Assertion(val, msg).to.not.be.a('boolean');","  };","","  /**","   * ### .typeOf(value, name, [message])","   *","   * Asserts that `value`'s type is `name`, as determined by","   * `Object.prototype.toString`.","   *","   *     assert.typeOf({ tea: 'chai' }, 'object', 'we have an object');","   *     assert.typeOf(['chai', 'jasmine'], 'array', 'we have an array');","   *     assert.typeOf('tea', 'string', 'we have a string');","   *     assert.typeOf(/tea/, 'regexp', 'we have a regular expression');","   *     assert.typeOf(null, 'null', 'we have a null');","   *     assert.typeOf(undefined, 'undefined', 'we have an undefined');","   *","   * @name typeOf","   * @param {Mixed} value","   * @param {String} name","   * @param {String} message","   * @namespace Assert","   * @api public","   */","","  assert.typeOf = function (val, type, msg) {","    new Assertion(val, msg).to.be.a(type);","  };","","  /**","   * ### .notTypeOf(value, name, [message])","   *","   * Asserts that `value`'s type is _not_ `name`, as determined by","   * `Object.prototype.toString`.","   *","   *     assert.notTypeOf('tea', 'number', 'strings are not numbers');","   *","   * @name notTypeOf","   * @param {Mixed} value","   * @param {String} typeof name","   * @param {String} message","   * @namespace Assert","   * @api public","   */","","  assert.notTypeOf = function (val, type, msg) {","    new Assertion(val, msg).to.not.be.a(type);","  };","","  /**","   * ### .instanceOf(object, constructor, [message])","   *","   * Asserts that `value` is an instance of `constructor`.","   *","   *     var Tea = function (name) { this.name = name; }","   *       , chai = new Tea('chai');","   *","   *     assert.instanceOf(chai, Tea, 'chai is an instance of tea');","   *","   * @name instanceOf","   * @param {Object} object","   * @param {Constructor} constructor","   * @param {String} message","   * @namespace Assert","   * @api public","   */","","  assert.instanceOf = function (val, type, msg) {","    new Assertion(val, msg).to.be.instanceOf(type);","  };","","  /**","   * ### .notInstanceOf(object, constructor, [message])","   *","   * Asserts `value` is not an instance of `constructor`.","   *","   *     var Tea = function (name) { this.name = name; }","   *       , chai = new String('chai');","   *","   *     assert.notInstanceOf(chai, Tea, 'chai is not an instance of tea');","   *","   * @name notInstanceOf","   * @param {Object} object","   * @param {Constructor} constructor","   * @param {String} message","   * @namespace Assert","   * @api public","   */","","  assert.notInstanceOf = function (val, type, msg) {","    new Assertion(val, msg).to.not.be.instanceOf(type);","  };","","  /**","   * ### .include(haystack, needle, [message])","   *","   * Asserts that `haystack` includes `needle`. Works","   * for strings and arrays.","   *","   *     assert.include('foobar', 'bar', 'foobar contains string \"bar\"');","   *     assert.include([ 1, 2, 3 ], 3, 'array contains value');","   *","   * @name include","   * @param {Array|String} haystack","   * @param {Mixed} needle","   * @param {String} message","   * @namespace Assert","   * @api public","   */","","  assert.include = function (exp, inc, msg) {","    new Assertion(exp, msg, assert.include).include(inc);","  };","","  /**","   * ### .notInclude(haystack, needle, [message])","   *","   * Asserts that `haystack` does not include `needle`. Works","   * for strings and arrays.","   *","   *     assert.notInclude('foobar', 'baz', 'string not include substring');","   *     assert.notInclude([ 1, 2, 3 ], 4, 'array not include contain value');","   *","   * @name notInclude","   * @param {Array|String} haystack","   * @param {Mixed} needle","   * @param {String} message","   * @namespace Assert","   * @api public","   */","","  assert.notInclude = function (exp, inc, msg) {","    new Assertion(exp, msg, assert.notInclude).not.include(inc);","  };","","  /**","   * ### .match(value, regexp, [message])","   *","   * Asserts that `value` matches the regular expression `regexp`.","   *","   *     assert.match('foobar', /^foo/, 'regexp matches');","   *","   * @name match","   * @param {Mixed} value","   * @param {RegExp} regexp","   * @param {String} message","   * @namespace Assert","   * @api public","   */","","  assert.match = function (exp, re, msg) {","    new Assertion(exp, msg).to.match(re);","  };","","  /**","   * ### .notMatch(value, regexp, [message])","   *","   * Asserts that `value` does not match the regular expression `regexp`.","   *","   *     assert.notMatch('foobar', /^foo/, 'regexp does not match');","   *","   * @name notMatch","   * @param {Mixed} value","   * @param {RegExp} regexp","   * @param {String} message","   * @namespace Assert","   * @api public","   */","","  assert.notMatch = function (exp, re, msg) {","    new Assertion(exp, msg).to.not.match(re);","  };","","  /**","   * ### .property(object, property, [message])","   *","   * Asserts that `object` has a property named by `property`.","   *","   *     assert.property({ tea: { green: 'matcha' }}, 'tea');","   *","   * @name property","   * @param {Object} object","   * @param {String} property","   * @param {String} message","   * @namespace Assert","   * @api public","   */","","  assert.property = function (obj, prop, msg) {","    new Assertion(obj, msg).to.have.property(prop);","  };","","  /**","   * ### .notProperty(object, property, [message])","   *","   * Asserts that `object` does _not_ have a property named by `property`.","   *","   *     assert.notProperty({ tea: { green: 'matcha' }}, 'coffee');","   *","   * @name notProperty","   * @param {Object} object","   * @param {String} property","   * @param {String} message","   * @namespace Assert","   * @api public","   */","","  assert.notProperty = function (obj, prop, msg) {","    new Assertion(obj, msg).to.not.have.property(prop);","  };","","  /**","   * ### .deepProperty(object, property, [message])","   *","   * Asserts that `object` has a property named by `property`, which can be a","   * string using dot- and bracket-notation for deep reference.","   *","   *     assert.deepProperty({ tea: { green: 'matcha' }}, 'tea.green');","   *","   * @name deepProperty","   * @param {Object} object","   * @param {String} property","   * @param {String} message","   * @namespace Assert","   * @api public","   */","","  assert.deepProperty = function (obj, prop, msg) {","    new Assertion(obj, msg).to.have.deep.property(prop);","  };","","  /**","   * ### .notDeepProperty(object, property, [message])","   *","   * Asserts that `object` does _not_ have a property named by `property`, which","   * can be a string using dot- and bracket-notation for deep reference.","   *","   *     assert.notDeepProperty({ tea: { green: 'matcha' }}, 'tea.oolong');","   *","   * @name notDeepProperty","   * @param {Object} object","   * @param {String} property","   * @param {String} message","   * @namespace Assert","   * @api public","   */","","  assert.notDeepProperty = function (obj, prop, msg) {","    new Assertion(obj, msg).to.not.have.deep.property(prop);","  };","","  /**","   * ### .propertyVal(object, property, value, [message])","   *","   * Asserts that `object` has a property named by `property` with value given","   * by `value`.","   *","   *     assert.propertyVal({ tea: 'is good' }, 'tea', 'is good');","   *","   * @name propertyVal","   * @param {Object} object","   * @param {String} property","   * @param {Mixed} value","   * @param {String} message","   * @namespace Assert","   * @api public","   */","","  assert.propertyVal = function (obj, prop, val, msg) {","    new Assertion(obj, msg).to.have.property(prop, val);","  };","","  /**","   * ### .propertyNotVal(object, property, value, [message])","   *","   * Asserts that `object` has a property named by `property`, but with a value","   * different from that given by `value`.","   *","   *     assert.propertyNotVal({ tea: 'is good' }, 'tea', 'is bad');","   *","   * @name propertyNotVal","   * @param {Object} object","   * @param {String} property","   * @param {Mixed} value","   * @param {String} message","   * @namespace Assert","   * @api public","   */","","  assert.propertyNotVal = function (obj, prop, val, msg) {","    new Assertion(obj, msg).to.not.have.property(prop, val);","  };","","  /**","   * ### .deepPropertyVal(object, property, value, [message])","   *","   * Asserts that `object` has a property named by `property` with value given","   * by `value`. `property` can use dot- and bracket-notation for deep","   * reference.","   *","   *     assert.deepPropertyVal({ tea: { green: 'matcha' }}, 'tea.green', 'matcha');","   *","   * @name deepPropertyVal","   * @param {Object} object","   * @param {String} property","   * @param {Mixed} value","   * @param {String} message","   * @namespace Assert","   * @api public","   */","","  assert.deepPropertyVal = function (obj, prop, val, msg) {","    new Assertion(obj, msg).to.have.deep.property(prop, val);","  };","","  /**","   * ### .deepPropertyNotVal(object, property, value, [message])","   *","   * Asserts that `object` has a property named by `property`, but with a value","   * different from that given by `value`. `property` can use dot- and","   * bracket-notation for deep reference.","   *","   *     assert.deepPropertyNotVal({ tea: { green: 'matcha' }}, 'tea.green', 'konacha');","   *","   * @name deepPropertyNotVal","   * @param {Object} object","   * @param {String} property","   * @param {Mixed} value","   * @param {String} message","   * @namespace Assert","   * @api public","   */","","  assert.deepPropertyNotVal = function (obj, prop, val, msg) {","    new Assertion(obj, msg).to.not.have.deep.property(prop, val);","  };","","  /**","   * ### .lengthOf(object, length, [message])","   *","   * Asserts that `object` has a `length` property with the expected value.","   *","   *     assert.lengthOf([1,2,3], 3, 'array has length of 3');","   *     assert.lengthOf('foobar', 6, 'string has length of 6');","   *","   * @name lengthOf","   * @param {Mixed} object","   * @param {Number} length","   * @param {String} message","   * @namespace Assert","   * @api public","   */","","  assert.lengthOf = function (exp, len, msg) {","    new Assertion(exp, msg).to.have.length(len);","  };","","  /**","   * ### .throws(function, [constructor/string/regexp], [string/regexp], [message])","   *","   * Asserts that `function` will throw an error that is an instance of","   * `constructor`, or alternately that it will throw an error with message","   * matching `regexp`.","   *","   *     assert.throws(fn, 'function throws a reference error');","   *     assert.throws(fn, /function throws a reference error/);","   *     assert.throws(fn, ReferenceError);","   *     assert.throws(fn, ReferenceError, 'function throws a reference error');","   *     assert.throws(fn, ReferenceError, /function throws a reference error/);","   *","   * @name throws","   * @alias throw","   * @alias Throw","   * @param {Function} function","   * @param {ErrorConstructor} constructor","   * @param {RegExp} regexp","   * @param {String} message","   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types","   * @namespace Assert","   * @api public","   */","","  assert.throws = function (fn, errt, errs, msg) {","    if ('string' === typeof errt || errt instanceof RegExp) {","      errs = errt;","      errt = null;","    }","","    var assertErr = new Assertion(fn, msg).to.throw(errt, errs);","    return flag(assertErr, 'object');","  };","","  /**","   * ### .doesNotThrow(function, [constructor/regexp], [message])","   *","   * Asserts that `function` will _not_ throw an error that is an instance of","   * `constructor`, or alternately that it will not throw an error with message","   * matching `regexp`.","   *","   *     assert.doesNotThrow(fn, Error, 'function does not throw');","   *","   * @name doesNotThrow","   * @param {Function} function","   * @param {ErrorConstructor} constructor","   * @param {RegExp} regexp","   * @param {String} message","   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types","   * @namespace Assert","   * @api public","   */","","  assert.doesNotThrow = function (fn, type, msg) {","    if ('string' === typeof type) {","      msg = type;","      type = null;","    }","","    new Assertion(fn, msg).to.not.Throw(type);","  };","","  /**","   * ### .operator(val1, operator, val2, [message])","   *","   * Compares two values using `operator`.","   *","   *     assert.operator(1, '<', 2, 'everything is ok');","   *     assert.operator(1, '>', 2, 'this will fail');","   *","   * @name operator","   * @param {Mixed} val1","   * @param {String} operator","   * @param {Mixed} val2","   * @param {String} message","   * @namespace Assert","   * @api public","   */","","  assert.operator = function (val, operator, val2, msg) {","    var ok;","    switch(operator) {","      case '==':","        ok = val == val2;","        break;","      case '===':","        ok = val === val2;","        break;","      case '>':","        ok = val > val2;","        break;","      case '>=':","        ok = val >= val2;","        break;","      case '<':","        ok = val < val2;","        break;","      case '<=':","        ok = val <= val2;","        break;","      case '!=':","        ok = val != val2;","        break;","      case '!==':","        ok = val !== val2;","        break;","      default:","        throw new Error('Invalid operator \"' + operator + '\"');","    }","    var test = new Assertion(ok, msg);","    test.assert(","        true === flag(test, 'object')","      , 'expected ' + util.inspect(val) + ' to be ' + operator + ' ' + util.inspect(val2)","      , 'expected ' + util.inspect(val) + ' to not be ' + operator + ' ' + util.inspect(val2) );","  };","","  /**","   * ### .closeTo(actual, expected, delta, [message])","   *","   * Asserts that the target is equal `expected`, to within a +/- `delta` range.","   *","   *     assert.closeTo(1.5, 1, 0.5, 'numbers are close');","   *","   * @name closeTo","   * @param {Number} actual","   * @param {Number} expected","   * @param {Number} delta","   * @param {String} message","   * @namespace Assert","   * @api public","   */","","  assert.closeTo = function (act, exp, delta, msg) {","    new Assertion(act, msg).to.be.closeTo(exp, delta);","  };","","  /**","   * ### .approximately(actual, expected, delta, [message])","   *","   * Asserts that the target is equal `expected`, to within a +/- `delta` range.","   *","   *     assert.approximately(1.5, 1, 0.5, 'numbers are close');","   *","   * @name approximately","   * @param {Number} actual","   * @param {Number} expected","   * @param {Number} delta","   * @param {String} message","   * @namespace Assert","   * @api public","   */","","  assert.approximately = function (act, exp, delta, msg) {","    new Assertion(act, msg).to.be.approximately(exp, delta);","  };","","  /**","   * ### .sameMembers(set1, set2, [message])","   *","   * Asserts that `set1` and `set2` have the same members.","   * Order is not taken into account.","   *","   *     assert.sameMembers([ 1, 2, 3 ], [ 2, 1, 3 ], 'same members');","   *","   * @name sameMembers","   * @param {Array} set1","   * @param {Array} set2","   * @param {String} message","   * @namespace Assert","   * @api public","   */","","  assert.sameMembers = function (set1, set2, msg) {","    new Assertion(set1, msg).to.have.same.members(set2);","  }","","  /**","   * ### .sameDeepMembers(set1, set2, [message])","   *","   * Asserts that `set1` and `set2` have the same members - using a deep equality checking.","   * Order is not taken into account.","   *","   *     assert.sameDeepMembers([ {b: 3}, {a: 2}, {c: 5} ], [ {c: 5}, {b: 3}, {a: 2} ], 'same deep members');","   *","   * @name sameDeepMembers","   * @param {Array} set1","   * @param {Array} set2","   * @param {String} message","   * @namespace Assert","   * @api public","   */","","  assert.sameDeepMembers = function (set1, set2, msg) {","    new Assertion(set1, msg).to.have.same.deep.members(set2);","  }","","  /**","   * ### .includeMembers(superset, subset, [message])","   *","   * Asserts that `subset` is included in `superset`.","   * Order is not taken into account.","   *","   *     assert.includeMembers([ 1, 2, 3 ], [ 2, 1 ], 'include members');","   *","   * @name includeMembers","   * @param {Array} superset","   * @param {Array} subset","   * @param {String} message","   * @namespace Assert","   * @api public","   */","","  assert.includeMembers = function (superset, subset, msg) {","    new Assertion(superset, msg).to.include.members(subset);","  }","","  /**","   * ### .includeDeepMembers(superset, subset, [message])","   *","   * Asserts that `subset` is included in `superset` - using deep equality checking.","   * Order is not taken into account.","   * Duplicates are ignored.","   *","   *     assert.includeDeepMembers([ {a: 1}, {b: 2}, {c: 3} ], [ {b: 2}, {a: 1}, {b: 2} ], 'include deep members');","   *","   * @name includeDeepMembers","   * @param {Array} superset","   * @param {Array} subset","   * @param {String} message","   * @namespace Assert","   * @api public","   */","","  assert.includeDeepMembers = function (superset, subset, msg) {","    new Assertion(superset, msg).to.include.deep.members(subset);","  }","","  /**","   * ### .oneOf(inList, list, [message])","   *","   * Asserts that non-object, non-array value `inList` appears in the flat array `list`.","   *","   *     assert.oneOf(1, [ 2, 1 ], 'Not found in list');","   *","   * @name oneOf","   * @param {*} inList","   * @param {Array<*>} list","   * @param {String} message","   * @namespace Assert","   * @api public","   */","","  assert.oneOf = function (inList, list, msg) {","    new Assertion(inList, msg).to.be.oneOf(list);","  }","","   /**","   * ### .changes(function, object, property)","   *","   * Asserts that a function changes the value of a property","   *","   *     var obj = { val: 10 };","   *     var fn = function() { obj.val = 22 };","   *     assert.changes(fn, obj, 'val');","   *","   * @name changes","   * @param {Function} modifier function","   * @param {Object} object","   * @param {String} property name","   * @param {String} message _optional_","   * @namespace Assert","   * @api public","   */","","  assert.changes = function (fn, obj, prop) {","    new Assertion(fn).to.change(obj, prop);","  }","","   /**","   * ### .doesNotChange(function, object, property)","   *","   * Asserts that a function does not changes the value of a property","   *","   *     var obj = { val: 10 };","   *     var fn = function() { console.log('foo'); };","   *     assert.doesNotChange(fn, obj, 'val');","   *","   * @name doesNotChange","   * @param {Function} modifier function","   * @param {Object} object","   * @param {String} property name","   * @param {String} message _optional_","   * @namespace Assert","   * @api public","   */","","  assert.doesNotChange = function (fn, obj, prop) {","    new Assertion(fn).to.not.change(obj, prop);","  }","","   /**","   * ### .increases(function, object, property)","   *","   * Asserts that a function increases an object property","   *","   *     var obj = { val: 10 };","   *     var fn = function() { obj.val = 13 };","   *     assert.increases(fn, obj, 'val');","   *","   * @name increases","   * @param {Function} modifier function","   * @param {Object} object","   * @param {String} property name","   * @param {String} message _optional_","   * @namespace Assert","   * @api public","   */","","  assert.increases = function (fn, obj, prop) {","    new Assertion(fn).to.increase(obj, prop);","  }","","   /**","   * ### .doesNotIncrease(function, object, property)","   *","   * Asserts that a function does not increase object property","   *","   *     var obj = { val: 10 };","   *     var fn = function() { obj.val = 8 };","   *     assert.doesNotIncrease(fn, obj, 'val');","   *","   * @name doesNotIncrease","   * @param {Function} modifier function","   * @param {Object} object","   * @param {String} property name","   * @param {String} message _optional_","   * @namespace Assert","   * @api public","   */","","  assert.doesNotIncrease = function (fn, obj, prop) {","    new Assertion(fn).to.not.increase(obj, prop);","  }","","   /**","   * ### .decreases(function, object, property)","   *","   * Asserts that a function decreases an object property","   *","   *     var obj = { val: 10 };","   *     var fn = function() { obj.val = 5 };","   *     assert.decreases(fn, obj, 'val');","   *","   * @name decreases","   * @param {Function} modifier function","   * @param {Object} object","   * @param {String} property name","   * @param {String} message _optional_","   * @namespace Assert","   * @api public","   */","","  assert.decreases = function (fn, obj, prop) {","    new Assertion(fn).to.decrease(obj, prop);","  }","","   /**","   * ### .doesNotDecrease(function, object, property)","   *","   * Asserts that a function does not decreases an object property","   *","   *     var obj = { val: 10 };","   *     var fn = function() { obj.val = 15 };","   *     assert.doesNotDecrease(fn, obj, 'val');","   *","   * @name doesNotDecrease","   * @param {Function} modifier function","   * @param {Object} object","   * @param {String} property name","   * @param {String} message _optional_","   * @namespace Assert","   * @api public","   */","","  assert.doesNotDecrease = function (fn, obj, prop) {","    new Assertion(fn).to.not.decrease(obj, prop);","  }","","  /*!","   * ### .ifError(object)","   *","   * Asserts if value is not a false value, and throws if it is a true value.","   * This is added to allow for chai to be a drop-in replacement for Node's","   * assert class.","   *","   *     var err = new Error('I am a custom error');","   *     assert.ifError(err); // Rethrows err!","   *","   * @name ifError","   * @param {Object} object","   * @namespace Assert","   * @api public","   */","","  assert.ifError = function (val) {","    if (val) {","      throw(val);","    }","  };","","  /**","   * ### .isExtensible(object)","   *","   * Asserts that `object` is extensible (can have new properties added to it).","   *","   *     assert.isExtensible({});","   *","   * @name isExtensible","   * @alias extensible","   * @param {Object} object","   * @param {String} message _optional_","   * @namespace Assert","   * @api public","   */","","  assert.isExtensible = function (obj, msg) {","    new Assertion(obj, msg).to.be.extensible;","  };","","  /**","   * ### .isNotExtensible(object)","   *","   * Asserts that `object` is _not_ extensible.","   *","   *     var nonExtensibleObject = Object.preventExtensions({});","   *     var sealedObject = Object.seal({});","   *     var frozenObject = Object.freese({});","   *","   *     assert.isNotExtensible(nonExtensibleObject);","   *     assert.isNotExtensible(sealedObject);","   *     assert.isNotExtensible(frozenObject);","   *","   * @name isNotExtensible","   * @alias notExtensible","   * @param {Object} object","   * @param {String} message _optional_","   * @namespace Assert","   * @api public","   */","","  assert.isNotExtensible = function (obj, msg) {","    new Assertion(obj, msg).to.not.be.extensible;","  };","","  /**","   * ### .isSealed(object)","   *","   * Asserts that `object` is sealed (cannot have new properties added to it","   * and its existing properties cannot be removed).","   *","   *     var sealedObject = Object.seal({});","   *     var frozenObject = Object.seal({});","   *","   *     assert.isSealed(sealedObject);","   *     assert.isSealed(frozenObject);","   *","   * @name isSealed","   * @alias sealed","   * @param {Object} object","   * @param {String} message _optional_","   * @namespace Assert","   * @api public","   */","","  assert.isSealed = function (obj, msg) {","    new Assertion(obj, msg).to.be.sealed;","  };","","  /**","   * ### .isNotSealed(object)","   *","   * Asserts that `object` is _not_ sealed.","   *","   *     assert.isNotSealed({});","   *","   * @name isNotSealed","   * @alias notSealed","   * @param {Object} object","   * @param {String} message _optional_","   * @namespace Assert","   * @api public","   */","","  assert.isNotSealed = function (obj, msg) {","    new Assertion(obj, msg).to.not.be.sealed;","  };","","  /**","   * ### .isFrozen(object)","   *","   * Asserts that `object` is frozen (cannot have new properties added to it","   * and its existing properties cannot be modified).","   *","   *     var frozenObject = Object.freeze({});","   *     assert.frozen(frozenObject);","   *","   * @name isFrozen","   * @alias frozen","   * @param {Object} object","   * @param {String} message _optional_","   * @namespace Assert","   * @api public","   */","","  assert.isFrozen = function (obj, msg) {","    new Assertion(obj, msg).to.be.frozen;","  };","","  /**","   * ### .isNotFrozen(object)","   *","   * Asserts that `object` is _not_ frozen.","   *","   *     assert.isNotFrozen({});","   *","   * @name isNotFrozen","   * @alias notFrozen","   * @param {Object} object","   * @param {String} message _optional_","   * @namespace Assert","   * @api public","   */","","  assert.isNotFrozen = function (obj, msg) {","    new Assertion(obj, msg).to.not.be.frozen;","  };","","  /*!","   * Aliases.","   */","","  (function alias(name, as){","    assert[as] = assert[name];","    return alias;","  })","  ('isOk', 'ok')","  ('isNotOk', 'notOk')","  ('throws', 'throw')","  ('throws', 'Throw')","  ('isExtensible', 'extensible')","  ('isNotExtensible', 'notExtensible')","  ('isSealed', 'sealed')","  ('isNotSealed', 'notSealed')","  ('isFrozen', 'frozen')","  ('isNotFrozen', 'notFrozen');","};",""],"l":{"8":1,"14":1,"36":1,"37":0,"38":0,"59":1,"60":0,"61":0,"84":1,"85":0,"104":1,"105":0,"123":1,"124":0,"126":0,"150":1,"151":0,"153":0,"177":1,"178":0,"196":1,"197":0,"215":1,"216":0,"234":1,"235":0,"253":1,"254":0,"273":1,"274":0,"292":1,"293":0,"312":1,"313":0,"331":1,"332":0,"350":1,"351":0,"369":1,"370":0,"388":1,"389":0,"406":1,"407":0,"425":1,"426":0,"442":1,"443":0,"458":1,"459":0,"477":1,"478":0,"496":1,"497":0,"515":1,"516":0,"534":1,"535":0,"554":1,"555":0,"574":1,"575":0,"593":1,"594":0,"612":1,"613":0,"631":1,"632":0,"650":1,"651":0,"669":1,"670":0,"688":1,"689":0,"710":1,"711":0,"732":1,"733":0,"757":1,"758":0,"777":1,"778":0,"799":1,"800":0,"821":1,"822":0,"842":1,"843":0,"863":1,"864":0,"882":1,"883":0,"901":1,"902":0,"920":1,"921":0,"939":1,"940":0,"959":1,"960":0,"979":1,"980":0,"1000":1,"1001":0,"1021":1,"1022":0,"1043":1,"1044":0,"1065":1,"1066":0,"1085":1,"1086":0,"1114":1,"1115":0,"1116":0,"1117":0,"1120":0,"1121":0,"1143":1,"1144":0,"1145":0,"1146":0,"1149":0,"1169":1,"1170":0,"1171":0,"1173":0,"1174":0,"1176":0,"1177":0,"1179":0,"1180":0,"1182":0,"1183":0,"1185":0,"1186":0,"1188":0,"1189":0,"1191":0,"1192":0,"1194":0,"1195":0,"1197":0,"1199":0,"1200":0,"1222":1,"1223":0,"1242":1,"1243":0,"1262":1,"1263":0,"1282":1,"1283":0,"1302":1,"1303":0,"1323":1,"1324":0,"1342":1,"1343":0,"1364":1,"1365":0,"1386":1,"1387":0,"1408":1,"1409":0,"1430":1,"1431":0,"1452":1,"1453":0,"1474":1,"1475":0,"1494":1,"1495":0,"1496":0,"1515":1,"1516":0,"1540":1,"1541":0,"1564":1,"1565":0,"1583":1,"1584":0,"1604":1,"1605":0,"1623":1,"1624":0,"1631":1,"1632":10,"1633":10}}}